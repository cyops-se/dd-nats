<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NATS.Client</name>
    </assembly>
    <members>
        <member name="T:NATS.Client.AsyncSubscription">
            <summary>
            <see cref="T:NATS.Client.AsyncSubscription"/> asynchronously delivers messages to listeners of the <see cref="E:NATS.Client.AsyncSubscription.MessageHandler"/>
            event. This class should not be used directly.
            </summary>
            <remarks>
            If the <see cref="T:NATS.Client.AsyncSubscription"/> is created without listening to the <see cref="E:NATS.Client.AsyncSubscription.MessageHandler"/>
            event, no messages will be received until <see cref="M:NATS.Client.AsyncSubscription.Start"/> has been called.
            </remarks>
        </member>
        <member name="E:NATS.Client.AsyncSubscription.MessageHandler">
            <summary>
            Occurs when the <see cref="T:NATS.Client.AsyncSubscription"/> receives a message from the
            underlying <see cref="T:NATS.Client.Subscription"/>.
            </summary>
        </member>
        <member name="M:NATS.Client.AsyncSubscription.Start">
            <summary>
            Starts delivering received messages to listeners on <see cref="E:NATS.Client.AsyncSubscription.MessageHandler"/>
            from a separate thread.
            </summary>
            <remarks>
            If the <see cref="T:NATS.Client.IAsyncSubscription"/> has already started delivering messages, this
            method is a no-op.
            </remarks>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException">There is no longer an associated <see cref="T:NATS.Client.Connection"/>
            for this <see cref="T:NATS.Client.AsyncSubscription"/>.</exception>
        </member>
        <member name="M:NATS.Client.AsyncSubscription.Unsubscribe">
            <summary>
            Removes interest in the given subject.
            </summary>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException">There is no longer an associated <see cref="T:NATS.Client.Connection"/>
            for this <see cref="T:NATS.Client.AsyncSubscription"/>.</exception>
        </member>
        <member name="M:NATS.Client.AsyncSubscription.AutoUnsubscribe(System.Int32)">
            <summary>
            Issues an automatic call to <see cref="M:NATS.Client.AsyncSubscription.Unsubscribe"/> when <paramref name="max"/> messages have been
            received.
            </summary>
            <remarks><para>This can be useful when sending a request to an unknown number of subscribers.
            <see cref="T:NATS.Client.Connection"/>'s Request methods use this functionality.</para>
            <para>Calling this method will invoke <see cref="M:NATS.Client.AsyncSubscription.Start"/> if it has not already been called.</para></remarks>
            <param name="max">The maximum number of messages to receive on the subscription before calling
            <see cref="M:NATS.Client.AsyncSubscription.Unsubscribe"/>. Values less than or equal to zero (<c>0</c>) unsubscribe immediately.</param>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException">There is no longer an associated <see cref="T:NATS.Client.Connection"/>
            for this <see cref="T:NATS.Client.AsyncSubscription"/>.</exception>
        </member>
        <member name="T:NATS.Client.ConnState">
            <summary>
            State of the <see cref="T:NATS.Client.IConnection"/>.
            </summary>
        </member>
        <member name="F:NATS.Client.ConnState.DISCONNECTED">
            <summary>
            The <see cref="T:NATS.Client.IConnection"/> is disconnected.
            </summary>
        </member>
        <member name="F:NATS.Client.ConnState.CONNECTED">
            <summary>
            The <see cref="T:NATS.Client.IConnection"/> is connected to a NATS Server.
            </summary>
        </member>
        <member name="F:NATS.Client.ConnState.CLOSED">
            <summary>
            The <see cref="T:NATS.Client.IConnection"/> has been closed.
            </summary>
        </member>
        <member name="F:NATS.Client.ConnState.RECONNECTING">
            <summary>
            The <see cref="T:NATS.Client.IConnection"/> is currently reconnecting
            to a NATS Server.
            </summary>
        </member>
        <member name="F:NATS.Client.ConnState.CONNECTING">
            <summary>
            The <see cref="T:NATS.Client.IConnection"/> is currently connecting
            to a NATS Server.
            </summary>
        </member>
        <member name="F:NATS.Client.ConnState.DRAINING_SUBS">
            <summary>
            The <see cref="T:NATS.Client.IConnection"/> is currently draining subscriptions.
            </summary>
        </member>
        <member name="F:NATS.Client.ConnState.DRAINING_PUBS">
            <summary>
            The <see cref="T:NATS.Client.IConnection"/> is currently connecting draining
            publishers.
            </summary>
        </member>
        <member name="T:NATS.Client.Connection">
            <summary>
            <see cref="T:NATS.Client.Connection"/> represents a bare connection to a NATS server.
            Users should create an <see cref="T:NATS.Client.IConnection"/> instance using
            <see cref="T:NATS.Client.ConnectionFactory"/> rather than directly using this class.
            </summary>
        </member>
        <member name="P:NATS.Client.Connection.Opts">
            <summary>
            Gets the configuration options for this instance.
            </summary>
        </member>
        <member name="T:NATS.Client.Connection.TCPConnection">
            <summary>
            Convenience class representing the TCP connection to prevent 
            managing two variables throughout the NATs client code.
            </summary>
        </member>
        <member name="F:NATS.Client.Connection.TCPConnection.options">
            A note on the use of streams.  .NET provides a BufferedStream
            that can sit on top of an IO stream, in this case the network
            stream. It increases performance by providing an additional
            buffer.
            
            So, here's what we have for writing:
                Client code
                     ->BufferedStream (bw)
                         ->NetworkStream/SslStream (srvStream)
                             ->TCPClient (srvClient);
                             
             For reading:
                Client code
                     ->NetworkStream/SslStream (srvStream)
                         ->TCPClient (srvClient);
            
        </member>
        <member name="T:NATS.Client.Connection.SubChannelPool">
            <summary>
            The SubChannelPool class is used when the application
            has specified async subscribers will share channels and associated
            processing threads in the connection.  It simply returns a channel 
            that already has a long running task (thread) processing it.  
            Async subscribers use this channel in lieu of their own channel and
            message processing task.
            </summary>
        </member>
        <member name="T:NATS.Client.Connection.SubChannelPool.SubChannelProcessor">
            <summary>
            SubChannelProcessor creates a channel and a task to process
            messages on that channel.
            </summary>
        </member>
        <member name="M:NATS.Client.Connection.SubChannelPool.getChannel">
            <summary>
            Gets a message channel for use with an async subscriber.
            </summary>
            <returns>
            A channel, already setup with a task processing messages.
            </returns>
        </member>
        <member name="M:NATS.Client.Connection.getMessageChannel">
            <summary>
            Gets an available message channel for use with async subscribers.  It will
            setup the message channel pool if configured to do so.
            </summary>
            <returns>
            A channel for use, null if configuration dictates not to use the 
            channel pool.
            </returns>
        </member>
        <member name="M:NATS.Client.Connection.#ctor(NATS.Client.Options)">
            <summary>
            Initializes a new instance of the <see cref="T:NATS.Client.Connection"/> class
            with the specified <see cref="T:NATS.Client.Options"/>.
            </summary>
            <param name="options">The configuration options to use for this 
            <see cref="T:NATS.Client.Connection"/>.</param>
        </member>
        <member name="P:NATS.Client.Connection.ConnectedUrl">
            <summary>
            Gets the URL of the NATS server to which this instance
            is connected, otherwise <c>null</c>.
            </summary>
        </member>
        <member name="P:NATS.Client.Connection.ClientIP">
            <summary>
            Gets the IP of client as known by the NATS server, otherwise <c>null</c>.
            </summary>
            <remarks>
            Supported in the NATS server version 2.1.6 and above.  If the client is connected to
            an older server or is in the process of connecting, null will be returned.
            </remarks>
        </member>
        <member name="P:NATS.Client.Connection.ClientID">
            <summary>
            Gets the ID of client as known by the NATS server, otherwise <c>null</c>.
            </summary>
            <remarks>
            May not be supported in all versions of the server. If the client is connected to
            an older server or is in the process of connecting, 0 will be returned.
            </remarks>
        </member>
        <member name="P:NATS.Client.Connection.ConnectedId">
            <summary>
            Gets the server ID of the NATS server to which this instance
            is connected, otherwise <c>null</c>.
            </summary>
        </member>
        <member name="P:NATS.Client.Connection.ServerInfo">
            <summary>
            Gets the server info for this connection to which this instance
            is connected, otherwise <c>null</c>.
            </summary>
        </member>
        <member name="P:NATS.Client.Connection.Servers">
            <summary>
            Gets an array of known server URLs for this instance.
            </summary>
            <remarks><see cref="P:NATS.Client.Connection.Servers"/> also includes any additional
            servers discovered after a connection has been established. If
            authentication is enabled, <see cref="P:NATS.Client.Options.User"/> or
            <see cref="P:NATS.Client.Options.Token"/> must be used when connecting with
            these URLs.</remarks>
        </member>
        <member name="P:NATS.Client.Connection.DiscoveredServers">
            <summary>
            Gets an array of server URLs that were discovered after this
            instance connected.
            </summary>
            <remarks>If authentication is enabled, <see cref="P:NATS.Client.Options.User"/> or
            <see cref="P:NATS.Client.Options.Token"/> must be used when connecting with
            these URLs.</remarks>
        </member>
        <member name="P:NATS.Client.Connection.LastError">
            <summary>
            Gets the last <see cref="T:System.Exception"/> encountered by this instance,
            otherwise <c>null</c>.
            </summary>
        </member>
        <member name="M:NATS.Client.Connection.Publish(System.String,System.Byte[])">
            <summary>
            Publishes <paramref name="data"/> to the given <paramref name="subject"/>.
            </summary>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the data to publish
            to the connected NATS server.</param>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is 
            <c>null</c> or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="data"/> exceeds the maximum payload size
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call
            while publishing. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.Publish(System.String,NATS.Client.MsgHeader,System.Byte[])">
            <summary>
            Publishes <paramref name="data"/> to the given <paramref name="subject"/>.
            </summary>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="headers">Optional headers to publish with the message.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the data to publish
            to the connected NATS server.</param>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is 
            <c>null</c> or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="data"/> exceeds the maximum payload size
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call
            while publishing. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.Publish(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Publishes a sequence of bytes from <paramref name="data"/> to the given <paramref name="subject"/>.
            </summary>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <seealso cref="M:NATS.Client.IConnection.Publish(System.String,System.Byte[])"/>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="data"/> exceeds the maximum payload size
            supported by the NATS server.</exception>
        </member>
        <member name="M:NATS.Client.Connection.Publish(System.String,NATS.Client.MsgHeader,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Publishes a sequence of bytes from <paramref name="data"/> to the given <paramref name="subject"/>.
            </summary>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="headers">Optional headers to publish with the message.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <seealso cref="M:NATS.Client.IConnection.Publish(System.String,System.Byte[])"/>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="data"/> exceeds the maximum payload size
            supported by the NATS server.</exception>
        </member>
        <member name="M:NATS.Client.Connection.Publish(System.String,System.String,System.Byte[])">
            <summary>
            Publishes <paramref name="data"/> to the given <paramref name="subject"/>.
            </summary>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="reply">An optional reply subject.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the data to publish
            to the connected NATS server.</param>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is <c>null</c> or
            entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="data"/> exceeds the maximum payload size
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call
            while publishing. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.Publish(System.String,System.String,NATS.Client.MsgHeader,System.Byte[])">
            <summary>
            Publishes <paramref name="data"/> to the given <paramref name="subject"/>.
            </summary>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="reply">An optional reply subject.</param>
            <param name="headers">Optional headers to publish with the message.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the data to publish
            to the connected NATS server.</param>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is <c>null</c> or
            entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="data"/> exceeds the maximum payload size
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call
            while publishing. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.Publish(System.String,System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Publishes a sequence of bytes from <paramref name="data"/> to the given <paramref name="subject"/>.
            </summary>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="reply">An optional reply subject.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <seealso cref="M:NATS.Client.IConnection.Publish(System.String,System.Byte[])"/>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="data"/> exceeds the maximum payload size
            supported by the NATS server.</exception>
        </member>
        <member name="M:NATS.Client.Connection.Publish(System.String,System.String,NATS.Client.MsgHeader,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Publishes a sequence of bytes from <paramref name="data"/> to the given <paramref name="subject"/>.
            </summary>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="reply">An optional reply subject.</param>
            <param name="headers">Optional headers to publish with the message.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <seealso cref="M:NATS.Client.IConnection.Publish(System.String,System.Byte[])"/>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="data"/> exceeds the maximum payload size
            supported by the NATS server.</exception>
        </member>
        <member name="M:NATS.Client.Connection.Publish(NATS.Client.Msg)">
            <summary>
            Publishes a <see cref="T:NATS.Client.Msg"/> instance, which includes the subject, an optional reply, and an
            optional data field.
            </summary>
            <param name="msg">A <see cref="T:NATS.Client.Msg"/> instance containing the subject, optional reply, and data to publish
            to the NATS server.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="msg"/> is <c>null</c>.</exception>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException">The <see cref="P:NATS.Client.Msg.Subject"/> property of
            <paramref name="msg"/> is <c>null</c> or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException">Message data exceeds the maximum payload size
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call 
            while publishing. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.Request(System.String,System.Byte[],System.Int32)">
            <summary>
            Sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>, or throws
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.Request(System.String,System.Byte[])"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <returns>A <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout"/> is less than or equal to zero 
            (<c>0</c>).</exception>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is <c>null</c> or
            entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="data"/> exceeds the maximum payload size
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the 
            response.</exception>
            <exception cref="T:NATS.Client.NATSNoRespondersException">No responders are available for this request.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call
            while executing the request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.Request(System.String,NATS.Client.MsgHeader,System.Byte[],System.Int32)">
            <summary>
            Sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>, or throws
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.Request(System.String,System.Byte[])"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="headers">Optional headers to publish with the message.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <returns>A <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout"/> is less than or equal to zero 
            (<c>0</c>).</exception>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is <c>null</c> or
            entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="data"/> exceeds the maximum payload size
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the 
            response.</exception>
            <exception cref="T:NATS.Client.NATSNoRespondersException">No responders are available for this request.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call
            while executing the request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.Request(System.String,System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Sends a sequence of bytes as the request payload and returns the response <see cref="T:NATS.Client.Msg"/>, or throws
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.Request(System.String,System.Byte[],System.Int32,System.Int32,System.Int32)"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <returns>A <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="data"/> exceeds the maximum payload size
            supported by the NATS server.</exception>
        </member>
        <member name="M:NATS.Client.Connection.Request(System.String,NATS.Client.MsgHeader,System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Sends a sequence of bytes as the request payload and returns the response <see cref="T:NATS.Client.Msg"/>, or throws
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.Request(System.String,System.Byte[],System.Int32,System.Int32,System.Int32)"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="headers">Optional headers to publish with the message.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <returns>A <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="data"/> exceeds the maximum payload size
            supported by the NATS server.</exception>
        </member>
        <member name="M:NATS.Client.Connection.Request(System.String,System.Byte[])">
            <summary>
            Sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.Request(System.String,System.Byte[])"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <returns>A <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is <c>null</c> or 
            entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="data"/> exceeds the maximum payload size
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the
            response.</exception>
            <exception cref="T:NATS.Client.NATSNoRespondersException">No responders are available for this request.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call while
            executing the request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.Request(System.String,NATS.Client.MsgHeader,System.Byte[])">
            <summary>
            Sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.Request(System.String,System.Byte[])"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="headers">Optional headers to publish with the message.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <returns>A <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is <c>null</c> or 
            entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the
            response.</exception>
            <exception cref="T:NATS.Client.NATSNoRespondersException">No responders are available for this request.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call while
            executing the request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="data"/> exceeds the maximum payload size
            supported by the NATS server.</exception>
        </member>
        <member name="M:NATS.Client.Connection.Request(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends a sequence of bytes as the request payload and returns the response <see cref="T:NATS.Client.Msg"/>.
            </summary>
            <remarks>
            <para>NATS supports two flavors of request-reply messaging: point-to-point or one-to-many. Point-to-point
            involves the fastest or first to respond. In a one-to-many exchange, you set a limit on the number of 
            responses the requestor may receive and instead must use a subscription (<see cref="M:NATS.Client.ISubscription.AutoUnsubscribe(System.Int32)"/>).
            In a request-response exchange, publish request operation publishes a message with a reply subject expecting
            a response on that reply subject.</para>
            <para><see cref="M:NATS.Client.Connection.Request(System.String,System.Byte[],System.Int32,System.Int32)"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.</para>
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <returns>A <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is <c>null</c> or 
            entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="data"/> exceeds the maximum payload size
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the
            response.</exception>
            <exception cref="T:NATS.Client.NATSNoRespondersException">No responders are available for this request.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call while
            executing the request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.Request(System.String,NATS.Client.MsgHeader,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends a sequence of bytes as the request payload and returns the response <see cref="T:NATS.Client.Msg"/>.
            </summary>
            <remarks>
            <para>NATS supports two flavors of request-reply messaging: point-to-point or one-to-many. Point-to-point
            involves the fastest or first to respond. In a one-to-many exchange, you set a limit on the number of 
            responses the requestor may receive and instead must use a subscription (<see cref="M:NATS.Client.ISubscription.AutoUnsubscribe(System.Int32)"/>).
            In a request-response exchange, publish request operation publishes a message with a reply subject expecting
            a response on that reply subject.</para>
            <para><see cref="M:NATS.Client.Connection.Request(System.String,System.Byte[],System.Int32,System.Int32)"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.</para>
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="headers">Optional headers to publish with the message.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <returns>A <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is <c>null</c> or 
            entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="data"/> exceeds the maximum payload size
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the
            response.</exception>
            <exception cref="T:NATS.Client.NATSNoRespondersException">No responders are available for this request.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call while
            executing the request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.Request(NATS.Client.Msg,System.Int32)">
            <summary>
            Sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>, or throws
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.Request(NATS.Client.Msg)"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="message">A NATS <see cref="T:NATS.Client.Msg"/> that contains the request data to publish
            to the connected NATS server.  The reply subject will be overridden.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <returns>A <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout"/> is less than or equal to zero 
            (<c>0</c>).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="message"/> is null.</exception>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException">The <paramref name="message"/> subject is <c>null</c>
            or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException">Message data exceeds the maximum payload size
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the 
            response.</exception>
            <exception cref="T:NATS.Client.NATSNoRespondersException">No responders are available for this request.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call
            while executing the request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.Request(NATS.Client.Msg)">
            <summary>
            Sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.Request(NATS.Client.Msg)"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="message">A NATS <see cref="T:NATS.Client.Msg"/> that contains the request data to publish
            to the connected NATS server.  The reply subject will be overridden.</param>
            <returns>A <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="message"/> is null.</exception>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException">The <paramref name="message"/> subject is <c>null</c>
            or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException">Message data exceeds the maximum payload size
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the
            response.</exception>
            <exception cref="T:NATS.Client.NATSNoRespondersException">No responders are available for this request.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call while
            executing the request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Int32)">
            <summary>
            Asynchronously sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>, or throws 
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Int32)"/> will create an unique inbox for this request, sharing a
            single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <returns>A task that represents the asynchronous read operation. The value of the <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="timeout"/> is less than or equal to zero 
            (<c>0</c>).</exception>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is <c>null</c>
            or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="data"/> exceeds the maximum payload size
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the
            response.</exception>
            <exception cref="T:NATS.Client.NATSNoRespondersException">No responders are available for this request.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call
            while executing the request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.OperationCanceledException">The asynchronous operation was cancelled or timed out before
            it could be completed.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.RequestAsync(System.String,NATS.Client.MsgHeader,System.Byte[],System.Int32)">
            <summary>
            Asynchronously sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>, or throws 
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Int32)"/> will create an unique inbox for this request, sharing a
            single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="headers">Optional headers to publish with the message.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <returns>A task that represents the asynchronous read operation. The value of the <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="timeout"/> is less than or equal to zero 
            (<c>0</c>).</exception>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is <c>null</c>
            or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="data"/> exceeds the maximum payload size
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the
            response.</exception>
            <exception cref="T:NATS.Client.NATSNoRespondersException">No responders are available for this request.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call
            while executing the request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.OperationCanceledException">The asynchronous operation was cancelled or timed out before
            it could be completed.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Asynchronously sends a sequence of bytes as the request payload and returns the response <see cref="T:NATS.Client.Msg"/>, or throws 
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Int32,System.Int32,System.Int32)"/> will create an unique inbox for this request, sharing a
            single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <returns>A task that represents the asynchronous read operation. The value of the <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="data"/> exceeds the maximum payload size
            supported by the NATS server.</exception>
        </member>
        <member name="M:NATS.Client.Connection.RequestAsync(System.String,NATS.Client.MsgHeader,System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Asynchronously sends a sequence of bytes as the request payload and returns the response <see cref="T:NATS.Client.Msg"/>, or throws 
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Int32,System.Int32,System.Int32)"/> will create an unique inbox for this request, sharing a
            single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="headers">Optional headers to publish with the message.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <returns>A task that represents the asynchronous read operation. The value of the <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="data"/> exceeds the maximum payload size
            supported by the NATS server.</exception>
        </member>
        <member name="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[])">
            <summary>
            Asynchronously sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[])"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <returns>A task that represents the asynchronous read operation. The value of the 
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS
            server.</returns>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is <c>null</c> or
            entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="data"/> exceeds the maximum payload size
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the
            response.</exception>
            <exception cref="T:NATS.Client.NATSNoRespondersException">No responders are available for this request.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call while
            executing the request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.OperationCanceledException">The asynchronous operation was cancelled or timed out before
            it could be completed.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.RequestAsync(System.String,NATS.Client.MsgHeader,System.Byte[])">
            <summary>
            Asynchronously sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[])"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="headers">Optional headers to publish with the message.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <returns>A task that represents the asynchronous read operation. The value of the 
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS
            server.</returns>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is <c>null</c> or
            entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="data"/> exceeds the maximum payload size
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the
            response.</exception>
            <exception cref="T:NATS.Client.NATSNoRespondersException">No responders are available for this request.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call while
            executing the request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.OperationCanceledException">The asynchronous operation was cancelled or timed out before
            it could be completed.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Asynchronously sends a sequence of bytes as the request payload and returns the response <see cref="T:NATS.Client.Msg"/>.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Int32,System.Int32)"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <returns>A task that represents the asynchronous read operation. The value of the 
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS
            server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="data"/> exceeds the maximum payload size
            supported by the NATS server.</exception>
        </member>
        <member name="M:NATS.Client.Connection.RequestAsync(System.String,NATS.Client.MsgHeader,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Asynchronously sends a sequence of bytes as the request payload and returns the response <see cref="T:NATS.Client.Msg"/>.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Int32,System.Int32)"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="headers">Optional headers to publish with the message.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <returns>A task that represents the asynchronous read operation. The value of the 
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS
            server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="data"/> exceeds the maximum payload size
            supported by the NATS server.</exception>
        </member>
        <member name="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>, or throws
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires, while monitoring for 
            cancellation requests.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Int32,System.Threading.CancellationToken)"/> will create an unique inbox for this
            request, sharing a single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However,
            if <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <param name="token">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous read operation. The value of the
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains  a <see cref="T:NATS.Client.Msg"/> with the response from the NATS
            server.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="timeout"/> is less than or equal to zero
            (<c>0</c>).</exception>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is <c>null</c> or
            entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="data"/> exceeds the maximum payload size
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the
            response.</exception>
            <exception cref="T:NATS.Client.NATSNoRespondersException">No responders are available for this request.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call while
            executing the request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.OperationCanceledException">The asynchronous operation was cancelled or timed out before
            it could be completed.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.RequestAsync(System.String,NATS.Client.MsgHeader,System.Byte[],System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>, or throws
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires, while monitoring for 
            cancellation requests.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Int32,System.Threading.CancellationToken)"/> will create an unique inbox for this
            request, sharing a single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However,
            if <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="headers">Optional headers to publish with the message.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <param name="token">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous read operation. The value of the
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains  a <see cref="T:NATS.Client.Msg"/> with the response from the NATS
            server.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="timeout"/> is less than or equal to zero
            (<c>0</c>).</exception>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is <c>null</c> or
            entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="data"/> exceeds the maximum payload size
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the
            response.</exception>
            <exception cref="T:NATS.Client.NATSNoRespondersException">No responders are available for this request.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call while
            executing the request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.OperationCanceledException">The asynchronous operation was cancelled or timed out before
            it could be completed.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>, while monitoring for
            cancellation requests.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Threading.CancellationToken)"/> will create an unique inbox for this request,
            sharing a single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="token">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous read operation. The value of the
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS 
            server.</returns>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is <c>null</c>
            or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="data"/> exceeds the maximum payload size
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the 
            response.</exception>
            <exception cref="T:NATS.Client.NATSNoRespondersException">No responders are available for this request.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call while 
            executing the request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.OperationCanceledException">The asynchronous operation was cancelled or timed out before it
            could be completed.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.RequestAsync(System.String,NATS.Client.MsgHeader,System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>, while monitoring for
            cancellation requests.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Threading.CancellationToken)"/> will create an unique inbox for this request,
            sharing a single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="headers">Optional headers to publish with the message.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="token">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous read operation. The value of the
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS 
            server.</returns>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is <c>null</c>
            or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="data"/> exceeds the maximum payload size
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the 
            response.</exception>
            <exception cref="T:NATS.Client.NATSNoRespondersException">No responders are available for this request.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call while 
            executing the request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.OperationCanceledException">The asynchronous operation was cancelled or timed out before it
            could be completed.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends a sequence of bytes as the request payload and returns the response <see cref="T:NATS.Client.Msg"/>,
            while monitoring for cancellation requests.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)"/> will create an unique inbox for this request,
            sharing a single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <param name="token">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous read operation. The value of the
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS 
            server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="data"/> exceeds the maximum payload size
            supported by the NATS server.</exception>
        </member>
        <member name="M:NATS.Client.Connection.RequestAsync(System.String,NATS.Client.MsgHeader,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends a sequence of bytes as the request payload and returns the response <see cref="T:NATS.Client.Msg"/>,
            while monitoring for cancellation requests.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)"/> will create an unique inbox for this request,
            sharing a single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="headers">Optional headers to publish with the message.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <param name="token">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous read operation. The value of the
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS 
            server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="data"/> exceeds the maximum payload size
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="data"/> exceeds the maximum payload size
            supported by the NATS server.</exception>
        </member>
        <member name="M:NATS.Client.Connection.RequestAsync(NATS.Client.Msg,System.Int32)">
            <summary>
            Asynchronously sends a request message and returns the response <see cref="T:NATS.Client.Msg"/>, or throws 
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.RequestAsync(NATS.Client.Msg,System.Int32)"/> will create an unique inbox for this request, sharing a
            single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="message">A NATS <see cref="T:NATS.Client.Msg"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <returns>A task that represents the asynchronous read operation. The value of the <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="timeout"/> is less than or equal to zero 
            (<c>0</c>).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="message"/> is null.</exception>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException">The <paramref name="message"/> subject is <c>null</c>
            or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException">Message data exceeds the maximum payload size
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the
            response.</exception>
            <exception cref="T:NATS.Client.NATSNoRespondersException">No responders are available for this request.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call
            while executing the request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.OperationCanceledException">The asynchronous operation was cancelled or timed out before
            it could be completed.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.RequestAsync(NATS.Client.Msg)">
            <summary>
            Asynchronously sends a request message and returns the response <see cref="T:NATS.Client.Msg"/>.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.RequestAsync(NATS.Client.Msg)"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="message">A NATS <see cref="T:NATS.Client.Msg"/> that contains the request data to publish
            to the connected NATS server.</param>
            <returns>A task that represents the asynchronous read operation. The value of the 
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS
            server.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="message"/> is null.</exception>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException">The <paramref name="message"/> subject is <c>null</c>
            or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException">Message data exceeds the maximum payload size
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the
            response.</exception>
            <exception cref="T:NATS.Client.NATSNoRespondersException">No responders are available for this request.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call while
            executing the request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.OperationCanceledException">The asynchronous operation was cancelled or timed out before
            it could be completed.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.RequestAsync(NATS.Client.Msg,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends a request message and returns the response <see cref="T:NATS.Client.Msg"/>, or throws
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires, while monitoring for 
            cancellation requests.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.RequestAsync(NATS.Client.Msg,System.Int32,System.Threading.CancellationToken)"/> will create an unique inbox for this
            request, sharing a single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However,
            if <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="message">A NATS <see cref="T:NATS.Client.Msg"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <param name="token">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous read operation. The value of the
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains  a <see cref="T:NATS.Client.Msg"/> with the response from the NATS
            server.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="timeout"/> is less than or equal to zero
            (<c>0</c>).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="message"/> is null.</exception>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException">The <paramref name="message"/> subject is <c>null</c>
            or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException">Message data exceeds the maximum payload size
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the
            response.</exception>
            <exception cref="T:NATS.Client.NATSNoRespondersException">No responders are available for this request.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call while
            executing the request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.OperationCanceledException">The asynchronous operation was cancelled or timed out before
            it could be completed.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.RequestAsync(NATS.Client.Msg,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends a request message and returns the response <see cref="T:NATS.Client.Msg"/>, while monitoring for
            cancellation requests.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.Connection.RequestAsync(NATS.Client.Msg,System.Threading.CancellationToken)"/> will create an unique inbox for this request,
            sharing a single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="message">A NATS <see cref="T:NATS.Client.Msg"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="token">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous read operation. The value of the
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS 
            server.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="message"/> is null.</exception>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException">The <paramref name="message"/> subject is <c>null</c>
            or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException">Message data exceeds the maximum payload size
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the 
            response.</exception>
            <exception cref="T:NATS.Client.NATSNoRespondersException">No responders are available for this request.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call while 
            executing the request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.OperationCanceledException">The asynchronous operation was cancelled or timed out before it
            could be completed.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.NewInbox">
            <summary>
            Creates an inbox string which can be used for directed replies from subscribers.
            </summary>
            <remarks>
            The returned inboxes are guaranteed to be unique, but can be shared and subscribed
            to by others.
            </remarks>
            <returns>A unique inbox string.</returns>
        </member>
        <member name="M:NATS.Client.Connection.SubscribeSync(System.String)">
            <summary>
            Expresses interest in the given <paramref name="subject"/> to the NATS Server.
            </summary>
            <param name="subject">The subject on which to listen for messages.
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <returns>An <see cref="T:NATS.Client.ISyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>.</returns>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is
            <c>null</c> or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.SubscribeAsync(System.String)">
            <summary>
            Expresses interest in the given <paramref name="subject"/> to the NATS Server.
            </summary>
            <remarks>
            The <see cref="T:NATS.Client.IAsyncSubscription"/> returned will not start receiving messages until
            <see cref="M:NATS.Client.IAsyncSubscription.Start"/> is called.
            </remarks>
            <param name="subject">The subject on which to listen for messages. 
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <returns>An <see cref="T:NATS.Client.IAsyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>.</returns>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is
            <c>null</c> or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.SubscribeAsync(System.String,System.EventHandler{NATS.Client.MsgHandlerEventArgs})">
            <summary>
            Expresses interest in the given <paramref name="subject"/> to the NATS Server, and begins delivering
            messages to the given event handler.
            </summary>
            <remarks>The <see cref="T:NATS.Client.IAsyncSubscription"/> returned will start delivering messages
            to the event handler as soon as they are received. The caller does not have to invoke
            <see cref="M:NATS.Client.IAsyncSubscription.Start"/>.</remarks>
            <param name="subject">The subject on which to listen for messages.
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <param name="handler">The <see cref="T:System.EventHandler`1"/> invoked when messages are received 
            on the returned <see cref="T:NATS.Client.IAsyncSubscription"/>.</param>
            <returns>An <see cref="T:NATS.Client.IAsyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>.</returns>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is 
            <c>null</c> or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.SubscribeSync(System.String,System.String)">
            <summary>
            Creates a synchronous queue subscriber on the given <paramref name="subject"/>.
            </summary>
            <remarks>All subscribers with the same queue name will form the queue group and
            only one member of the group will be selected to receive any given message
            synchronously.</remarks>
            <param name="subject">The subject on which to listen for messages.</param>
            <param name="queue">The name of the queue group in which to participate.</param>
            <returns>An <see cref="T:NATS.Client.ISyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>, as part of 
            the given queue group.</returns>
        </member>
        <member name="M:NATS.Client.Connection.SubscribeAsync(System.String,System.String)">
            <summary>
            Creates an asynchronous queue subscriber on the given <paramref name="subject"/>.
            </summary>
            <remarks>
            The <see cref="T:NATS.Client.IAsyncSubscription"/> returned will not start receiving messages until
            <see cref="M:NATS.Client.IAsyncSubscription.Start"/> is called.
            </remarks>
            <param name="subject">The subject on which to listen for messages.
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <param name="queue">The name of the queue group in which to participate.</param>
            <returns>An <see cref="T:NATS.Client.IAsyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>.</returns>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is 
            <c>null</c> or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.SubscribeAsync(System.String,System.String,System.EventHandler{NATS.Client.MsgHandlerEventArgs})">
            <summary>
            Creates an asynchronous queue subscriber on the given <paramref name="subject"/>, and begins delivering
            messages to the given event handler.
            </summary>
            <remarks>The <see cref="T:NATS.Client.IAsyncSubscription"/> returned will start delivering messages
            to the event handler as soon as they are received. The caller does not have to invoke
            <see cref="M:NATS.Client.IAsyncSubscription.Start"/>.</remarks>
            <param name="subject">The subject on which to listen for messages.
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <param name="queue">The name of the queue group in which to participate.</param>
            <param name="handler">The <see cref="T:System.EventHandler`1"/> invoked when messages are received 
            on the returned <see cref="T:NATS.Client.IAsyncSubscription"/>.</param>
            <returns>An <see cref="T:NATS.Client.IAsyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>.</returns>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is 
            <c>null</c> or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.Flush(System.Int32)">
            <summary>
            Performs a round trip to the server and returns when it receives the internal reply, or throws
            a <see cref="T:NATS.Client.NATSTimeoutException"/> exception if the NATS Server does not reply in time.
            </summary>
            <param name="timeout">The number of milliseconds to wait.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout"/> is less than or equal to zero (<c>0</c>).</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the response.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call while executing the
            request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.RTT">
            <summary>
            <returns>A timespan representing the elapsed time.</returns>
            </summary>
            <returns></returns>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">If the connection is closed.</exception>
            <exception cref="T:NATS.Client.NATSException">Miscellaneous other exceptions</exception>
        </member>
        <member name="M:NATS.Client.Connection.Flush">
            <summary>
            Performs a round trip to the server and returns when it receives the internal reply.
            </summary>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the response.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call while executing the
            request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.Connection.FlushBuffer">
            <summary>
            Immediately flushes the underlying connection buffer if the connection is valid.
            </summary>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call while executing the
            request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
        </member>
        <member name="M:NATS.Client.Connection.Close">
            <summary>
            Closes the <see cref="T:NATS.Client.Connection"/> and all associated
            subscriptions.
            </summary>
            <seealso cref="M:NATS.Client.Connection.IsClosed"/>
            <seealso cref="P:NATS.Client.Connection.State"/>
        </member>
        <member name="M:NATS.Client.Connection.IsClosed">
            <summary>
            Returns a value indicating whether or not the <see cref="T:NATS.Client.Connection"/>
            instance is closed.
            </summary>
            <returns><c>true</c> if and only if the <see cref="T:NATS.Client.Connection"/> is
            closed, otherwise <c>false</c>.</returns>
            <seealso cref="M:NATS.Client.Connection.Close"/>
            <seealso cref="P:NATS.Client.Connection.State"/>
        </member>
        <member name="M:NATS.Client.Connection.Drain">
            <summary>
            Drains a connection for graceful shutdown.
            </summary>
            <remarks>
            Drain will put a connection into a drain state. All subscriptions will
            immediately be put into a drain state. Upon completion, the publishers
            will be drained and can not publish any additional messages. Upon draining
            of the publishers, the connection will be closed. Use the 
            <see cref="F:NATS.Client.Options.ClosedEventHandler"/> option to know when the connection
            has moved from draining to closed.
            </remarks>
            <seealso cref="M:NATS.Client.Connection.Close"/>
        </member>
        <member name="M:NATS.Client.Connection.Drain(System.Int32)">
            <summary>
            Drains a connection for graceful shutdown.
            </summary>
            <remarks>
            Drain will put a connection into a drain state. All subscriptions will
            immediately be put into a drain state. Upon completion, the publishers
            will be drained and can not publish any additional messages. Upon draining
            of the publishers, the connection will be closed. Use the 
            <see cref="F:NATS.Client.Options.ClosedEventHandler"/> option to know when the connection
            has moved from draining to closed.
            </remarks>
            <seealso cref="M:NATS.Client.Connection.Close"/>
            <param name="timeout">The duration to wait before draining.</param> 
        </member>
        <member name="M:NATS.Client.Connection.DrainAsync">
            <summary>
            Drains a connection for graceful shutdown.
            </summary>
            <remarks>
            Drain will put a connection into a drain state. All subscriptions will
            immediately be put into a drain state. Upon completion, the publishers
            will be drained and can not publish any additional messages. Upon draining
            of the publishers, the connection will be closed. Use the 
            <see cref="F:NATS.Client.Options.ClosedEventHandler"/> option to know when the connection
            has moved from draining to closed.
            </remarks>
            <seealso cref="M:NATS.Client.Connection.Close"/>
            <returns>A task that represents the asynchronous drain operation.</returns>
        </member>
        <member name="M:NATS.Client.Connection.DrainAsync(System.Int32)">
            <summary>
            Drains a connection for graceful shutdown.
            </summary>
            <remarks>
            Drain will put a connection into a drain state. All subscriptions will
            immediately be put into a drain state. Upon completion, the publishers
            will be drained and can not publish any additional messages. Upon draining
            of the publishers, the connection will be closed. Use the 
            <see cref="F:NATS.Client.Options.ClosedEventHandler"/> option to know when the connection
            has moved from draining to closed.
            </remarks>
            <seealso cref="M:NATS.Client.Connection.Close"/>
            <param name="timeout">The duration to wait before draining.</param> 
            <returns>A task that represents the asynchronous drain operation.</returns>
        </member>
        <member name="M:NATS.Client.Connection.IsDraining">
            <summary>
            Returns a value indicating whether or not the <see cref="T:NATS.Client.Connection"/>
            instance is draining.
            </summary>
            <returns><c>true</c> if and only if the <see cref="T:NATS.Client.Connection"/> is
            draining, otherwise <c>false</c>.</returns>
            <seealso cref="M:NATS.Client.IConnection.Drain"/>
            <seealso cref="P:NATS.Client.Connection.State"/>
        </member>
        <member name="M:NATS.Client.Connection.IsReconnecting">
            <summary>
            Returns a value indicating whether or not the <see cref="T:NATS.Client.Connection"/>
            is currently reconnecting.
            </summary>
            <returns><c>true</c> if and only if the <see cref="T:NATS.Client.Connection"/> is
            reconnecting, otherwise <c>false</c>.</returns>
            <seealso cref="P:NATS.Client.Connection.State"/>
        </member>
        <member name="P:NATS.Client.Connection.State">
            <summary>
            Gets the current state of the <see cref="T:NATS.Client.Connection"/>.
            </summary>
            <seealso cref="T:NATS.Client.ConnState"/>
        </member>
        <member name="P:NATS.Client.Connection.SubscriptionCount">
            <summary>
            Get the number of active subscriptions.
            </summary>
        </member>
        <member name="P:NATS.Client.Connection.Stats">
            <summary>
            Gets the statistics tracked for the <see cref="T:NATS.Client.Connection"/>.
            </summary>
            <seealso cref="M:NATS.Client.Connection.ResetStats"/>
        </member>
        <member name="M:NATS.Client.Connection.ResetStats">
            <summary>
            Resets the associated statistics for the <see cref="T:NATS.Client.Connection"/>.
            </summary>
            <seealso cref="P:NATS.Client.Connection.Stats"/>
        </member>
        <member name="P:NATS.Client.Connection.MaxPayload">
            <summary>
            Gets the maximum size in bytes of a payload sent
            to the connected NATS Server.
            </summary>
            <seealso cref="M:NATS.Client.Connection.Publish(NATS.Client.Msg)"/>
            <seealso cref="M:NATS.Client.Connection.Publish(System.String,System.Byte[])"/>
            <seealso cref="M:NATS.Client.Connection.Publish(System.String,System.String,System.Byte[])"/>
            <seealso cref="M:NATS.Client.Connection.Request(System.String,System.Byte[])"/>
            <seealso cref="M:NATS.Client.Connection.Request(System.String,System.Byte[],System.Int32)"/>
            <seealso cref="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[])"/>
            <seealso cref="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Threading.CancellationToken)"/>
            <seealso cref="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Int32)"/>
            <seealso cref="M:NATS.Client.Connection.RequestAsync(System.String,System.Byte[],System.Int32,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:NATS.Client.Connection.ToString">
            <summary>
            Returns a string representation of the
            value of this <see cref="T:NATS.Client.Connection"/> instance.
            </summary>
            <returns>A string that represents the current instance.</returns>
        </member>
        <member name="M:NATS.Client.Connection.Dispose(System.Boolean)">
            <summary>
            Closes the connection and optionally releases the managed resources.
            </summary>
            <remarks>In derived classes, do not override the <see cref="M:NATS.Client.Connection.Close"/> method, instead
            put all of the <seealso cref="T:NATS.Client.Connection"/> cleanup logic in your Dispose override.</remarks>
            <param name="disposing"><c>true</c> to release both managed
            and unmanaged resources; <c>false</c> to release only unmanaged 
            resources.</param>
        </member>
        <member name="M:NATS.Client.Connection.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:NATS.Client.Connection"/>.
            </summary>
            <remarks>This method disposes the connection, by clearing all pending
            operations, and closing the connection to release resources.</remarks>
        </member>
        <member name="M:NATS.Client.StreamExtensions.ReadUntilCrlf(System.IO.Stream)">
            <summary>
            Consumes the stream one byte at a time until a newline is found.
            This approach is used to avoid over-reading or under-reading the stream,
            as it will be accessed in the reader loop as well.
            Using StreamReader instead of this method can cause issues when a line
            is delivered in chunks, especially over global connections, which is more
            likely to occur.
            The performance of this reading approach is relatively low, so it should only
            be used in scenarios with low traffic, such as reading the server INFO.
            </summary>
        </member>
        <member name="T:NATS.Client.ConnectionFactory">
            <summary>
            Provides factory methods to create connections to NATS Servers.
            </summary>
        </member>
        <member name="M:NATS.Client.ConnectionFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NATS.Client.ConnectionFactory"/> class,
            providing factory methods to create connections to NATS Servers.
            </summary>
        </member>
        <member name="M:NATS.Client.ConnectionFactory.CreateConnection(System.String,System.Boolean)">
            <summary>
            Attempt to connect to the NATS server referenced by <paramref name="url"/>.
            </summary>
            <remarks>
            <para><paramref name="url"/> can contain username/password semantics.
            Comma seperated arrays are also supported, e.g. <c>&quot;urlA, urlB&quot;</c>.</para>
            </remarks>
            <param name="url">A string containing the URL (or URLs) to the NATS Server. See the Remarks
            section for more information.</param>
            <param name="reconnectOnConnect">if true, the connection will treat the initial connection as any other and attempt reconnects on failure</param>
            <returns>An <see cref="T:NATS.Client.IConnection"/> object connected to the NATS server.</returns>
            <exception cref="T:NATS.Client.NATSNoServersException">No connection to a NATS Server could be established.</exception>
            <exception cref="T:NATS.Client.NATSConnectionException"><para>A timeout occurred connecting to a NATS Server.</para>
            <para>-or-</para>
            <para>An exception was encountered while connecting to a NATS Server. See <see cref="P:System.Exception.InnerException"/> for more
            details.</para></exception>
        </member>
        <member name="M:NATS.Client.ConnectionFactory.CreateConnection(System.String,System.String,System.Boolean)">
            <summary>
            Attempt to connect to the NATS server referenced by <paramref name="url"/> with NATS 2.0 credentials.
            </summary>
            <remarks>
            <para><paramref name="url"/>
            Comma seperated arrays are also supported, e.g. <c>&quot;urlA, urlB&quot;</c>.</para>
            </remarks>
            <param name="url">A string containing the URL (or URLs) to the NATS Server. See the Remarks
            section for more information.</param>
            <param name="credentialsPath">The full path to a chained credentials file.</param>
            <param name="reconnectOnConnect">if true, the connection will treat the initial connection as any other and attempt reconnects on failure</param>
            <returns>An <see cref="T:NATS.Client.IConnection"/> object connected to the NATS server.</returns>
            <exception cref="T:NATS.Client.NATSNoServersException">No connection to a NATS Server could be established.</exception>
            <exception cref="T:NATS.Client.NATSConnectionException"><para>A timeout occurred connecting to a NATS Server.</para>
            <para>-or-</para>
            <para>An exception was encountered while connecting to a NATS Server. See <see cref="P:System.Exception.InnerException"/> for more
            details.</para></exception>
        </member>
        <member name="M:NATS.Client.ConnectionFactory.CreateConnection(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Attempt to connect to the NATS server referenced by <paramref name="url"/> with NATS 2.0 credentials.
            </summary>
            <remarks>
            <para><paramref name="url"/>
            Comma seperated arrays are also supported, e.g. <c>&quot;urlA, urlB&quot;</c>.</para>
            </remarks>
            <param name="url">A string containing the URL (or URLs) to the NATS Server. See the Remarks
            section for more information.</param>
            <param name="jwt">The path to a user's public JWT credentials.</param>
            <param name="privateNkey">The path to a file for user user's private Nkey seed.</param>
            <param name="reconnectOnConnect">if true, the connection will treat the initial connection as any other and attempt reconnects on failure</param>
            <returns>An <see cref="T:NATS.Client.IConnection"/> object connected to the NATS server.</returns>
            <exception cref="T:NATS.Client.NATSNoServersException">No connection to a NATS Server could be established.</exception>
            <exception cref="T:NATS.Client.NATSConnectionException"><para>A timeout occurred connecting to a NATS Server.</para>
            <para>-or-</para>
            <para>An exception was encountered while connecting to a NATS Server. See <see cref="P:System.Exception.InnerException"/> for more
            details.</para></exception>
        </member>
        <member name="M:NATS.Client.ConnectionFactory.CreateConnectionWithCredentials(System.String,System.String,System.Boolean)">
            <summary>
            Attempt to connect to the NATS server referenced by <paramref name="url"/>
            with NATS 2.0 the user jwt and nkey seed credentials provided directly in the string.
            </summary>
            <param name="url"></param>
            <param name="credentialsText">The text containing the "-----BEGIN NATS USER JWT-----" block
            and the text containing the "-----BEGIN USER NKEY SEED-----" block</param>
            <param name="reconnectOnConnect"></param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.ConnectionFactory.CreateConnectionWithCredentials(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Attempt to connect to the NATS server referenced by <paramref name="url"/>
            with NATS 2.0 the user jwt and nkey seed credentials provided directly via strings.
            </summary>
            <remarks>
            <para><paramref name="url"/>
            Comma seperated arrays are also supported, e.g. <c>&quot;urlA, urlB&quot;</c>.</para>
            </remarks>
            <param name="url">A string containing the URL (or URLs) to the NATS Server. See the Remarks
            section for more information.</param>
            <param name="userJwtText">The text containing the "-----BEGIN NATS USER JWT-----" block</param>
            <param name="nkeySeedText">The text containing the "-----BEGIN USER NKEY SEED-----" block or the seed begining with "SU".
            May be the same as the jwt string if they are chained.</param>
            <param name="reconnectOnConnect"></param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.ConnectionFactory.GetDefaultOptions(System.String)">
            <summary>
            Retrieves the default set of client options.
            </summary>
            <param name="server">Optionally set the server. Still can be set or overriden with
            <see cref="P:NATS.Client.Options.Url"/> or <see cref="P:NATS.Client.Options.Servers"/> properties</param>
            <returns>The default <see cref="T:NATS.Client.Options"/> object for the NATS client.</returns>
        </member>
        <member name="M:NATS.Client.ConnectionFactory.CreateSecureConnection(System.String,System.Boolean)">
            <summary>
            Attempt to connect to the NATS server using TLS referenced by <paramref name="url"/>.
            </summary>
            <remarks>
            <para><paramref name="url"/> can contain username/password semantics.
            Comma seperated arrays are also supported, e.g. urlA, urlB.</para>
            </remarks>
            <param name="url">A string containing the URL (or URLs) to the NATS Server. See the Remarks
            section for more information.</param>
            <param name="reconnectOnConnect">if true, the connection will treat the initial connection as any other and attempt reconnects on failure</param>
            <returns>An <see cref="T:NATS.Client.IConnection"/> object connected to the NATS server.</returns>
            <exception cref="T:NATS.Client.NATSNoServersException">No connection to a NATS Server could be established.</exception>
            <exception cref="T:NATS.Client.NATSConnectionException"><para>A timeout occurred connecting to a NATS Server.</para>
            <para>-or-</para>
            <para>An exception was encountered while connecting to a NATS Server. See <see cref="P:System.Exception.InnerException"/> for more
            details.</para></exception>
        </member>
        <member name="M:NATS.Client.ConnectionFactory.CreateConnection(System.Boolean)">
            <summary>
            Create a connection to the NATs server using the default options.
            </summary>
            <param name="reconnectOnConnect">if true, the connection will treat the initial connection as any other and attempt reconnects on failure</param>
            <returns>An <see cref="T:NATS.Client.IConnection"/> object connected to the NATS server.</returns>
            <exception cref="T:NATS.Client.NATSNoServersException">No connection to a NATS Server could be established.</exception>
            <exception cref="T:NATS.Client.NATSConnectionException"><para>A timeout occurred connecting to a NATS Server.</para>
            <para>-or-</para>
            <para>An exception was encountered while connecting to a NATS Server. See <see cref="P:System.Exception.InnerException"/> for more
            details.</para></exception>
            <seealso cref="M:NATS.Client.ConnectionFactory.GetDefaultOptions(System.String)"/>
        </member>
        <member name="M:NATS.Client.ConnectionFactory.CreateConnection(NATS.Client.Options,System.Boolean)">
            <summary>
            Create a connection to a NATS Server defined by the given options.
            </summary>
            <param name="opts">The NATS client options to use for this connection.</param>
            <param name="reconnectOnConnect">if true, the connection will treat the initial connection as any other and attempt reconnects on failure</param>
            <returns>An <see cref="T:NATS.Client.IConnection"/> object connected to the NATS server.</returns>
            <exception cref="T:NATS.Client.NATSNoServersException">No connection to a NATS Server could be established.</exception>
            <exception cref="T:NATS.Client.NATSConnectionException"><para>A timeout occurred connecting to a NATS Server.</para>
            <para>-or-</para>
            <para>An exception was encountered while connecting to a NATS Server. See <see cref="P:System.Exception.InnerException"/> for more
            details.</para></exception>
        </member>
        <member name="M:NATS.Client.ConnectionFactory.CreateEncodedConnection(System.Boolean)">
            <summary>
            ENCODED CONNECTIONS, WHILE STILL FUNCTIONAL, WILL NO LONGER BE SUPPORTED
            Attempt to connect to the NATS server, with an encoded connection, using the default options.
            </summary>
            <param name="reconnectOnConnect">if true, the connection will treat the initial connection as any other and attempt reconnects on failure</param>
            <returns>An <see cref="T:NATS.Client.IEncodedConnection"/> object connected to the NATS server.</returns>
            <seealso cref="M:NATS.Client.ConnectionFactory.GetDefaultOptions(System.String)"/>
            <exception cref="T:NATS.Client.NATSNoServersException">No connection to a NATS Server could be established.</exception>
            <exception cref="T:NATS.Client.NATSConnectionException"><para>A timeout occurred connecting to a NATS Server.</para>
            <para>-or-</para>
            <para>An exception was encountered while connecting to a NATS Server. See <see cref="P:System.Exception.InnerException"/> for more
            details.</para></exception>
        </member>
        <member name="M:NATS.Client.ConnectionFactory.CreateEncodedConnection(System.String,System.Boolean)">
            <summary>
            ENCODED CONNECTIONS, WHILE STILL FUNCTIONAL, WILL NO LONGER BE SUPPORTED
            Attempt to connect to the NATS server, with an encoded connection, referenced by <paramref name="url"/>.
            </summary>
            <remarks>
            <para><paramref name="url"/> can contain username/password semantics.
            Comma seperated arrays are also supported, e.g. urlA, urlB.</para>
            <param name="reconnectOnConnect">if true, the connection will treat the initial connection as any other and attempt reconnects on failure</param>
            </remarks>
            <param name="url">A string containing the URL (or URLs) to the NATS Server. See the Remarks
            section for more information.</param>
            <returns>An <see cref="T:NATS.Client.IEncodedConnection"/> object connected to the NATS server.</returns>
            <exception cref="T:NATS.Client.NATSNoServersException">No connection to a NATS Server could be established.</exception>
            <exception cref="T:NATS.Client.NATSConnectionException"><para>A timeout occurred connecting to a NATS Server.</para>
            <para>-or-</para>
            <para>An exception was encountered while connecting to a NATS Server. See <see cref="P:System.Exception.InnerException"/> for more
            details.</para></exception>
        </member>
        <member name="M:NATS.Client.ConnectionFactory.CreateEncodedConnection(NATS.Client.Options,System.Boolean)">
            <summary>
            ENCODED CONNECTIONS, WHILE STILL FUNCTIONAL, WILL NO LONGER BE SUPPORTED
            Attempt to connect to the NATS server, with an encoded connection, using the given options.
            </summary>
            <param name="opts">The NATS client options to use for this connection.</param>
            <returns>An <see cref="T:NATS.Client.IEncodedConnection"/> object connected to the NATS server.</returns>
            <param name="reconnectOnConnect">if true, the connection will treat the initial connection as any other and attempt reconnects on failure</param>
            <exception cref="T:NATS.Client.NATSNoServersException">No connection to a NATS Server could be established.</exception>
            <exception cref="T:NATS.Client.NATSConnectionException"><para>A timeout occurred connecting to a NATS Server.</para>
            <para>-or-</para>
            <para>An exception was encountered while connecting to a NATS Server. See <see cref="P:System.Exception.InnerException"/> for more
            details.</para></exception>
        </member>
        <member name="T:NATS.Client.DefaultUserJWTHandler">
            <summary>
            This class is contains the default handlers for the
            <see cref="F:NATS.Client.Options.UserJWTEventHandler"/> and the 
            <see cref="F:NATS.Client.Options.UserSignatureEventHandler"/>.  This class is
            not normally used directly, but is provided to extend or use for
            utility methods to read a private seed or user JWT.
            </summary>
        </member>
        <member name="P:NATS.Client.DefaultUserJWTHandler.JwtFile">
            <summary>
            Gets the JWT file.
            </summary>
        </member>
        <member name="P:NATS.Client.DefaultUserJWTHandler.CredsFile">
            <summary>
            Gets the credentials files.
            </summary>
        </member>
        <member name="M:NATS.Client.DefaultUserJWTHandler.#ctor(System.String,System.String)">
            <summary>
            Creates the default user jwt handler.
            </summary>
            <param name="jwtFilePath">Full path the to user JWT</param>
            <param name="credsFilePath">Full path to the user private credentials file.
            May be the same as the jwt file if they are chained.</param>
        </member>
        <member name="M:NATS.Client.DefaultUserJWTHandler.LoadUserFromFile(System.String)">
            <summary>
            Gets a user JWT from a user JWT or chained credentials file.
            </summary>
            <param name="path">Full path to the JWT or cred file.</param>
            <returns>The encoded JWT</returns>
        </member>
        <member name="M:NATS.Client.DefaultUserJWTHandler.LoadNkeyPairFromSeedFile(System.String)">
            <summary>
            Generates a NATS Ed25519 keypair, used to sign server nonces, from a 
            private credentials file.
            </summary>
            <param name="path">The credentials file, could be a "*.nk" or "*.creds" file.</param>
            <returns>A NATS Ed25519 KeyPair</returns>
        </member>
        <member name="M:NATS.Client.DefaultUserJWTHandler.DefaultUserJWTEventHandler(System.Object,NATS.Client.UserJWTEventArgs)">
            <summary>
            The default User JWT Event Handler.
            </summary>
            <param name="sender">Usually the connection.</param>
            <param name="args">Arguments</param>
        </member>
        <member name="M:NATS.Client.DefaultUserJWTHandler.SignNonceFromFile(System.String,NATS.Client.UserSignatureEventArgs)">
            <summary>
            Utility method to signs the UserSignatureEventArgs server nonce from 
            a private credentials file.
            </summary>
            <param name="credsFile">A file with the private Nkey</param>
            <param name="args">Arguments</param>
        </member>
        <member name="M:NATS.Client.DefaultUserJWTHandler.DefaultUserSignatureHandler(System.Object,NATS.Client.UserSignatureEventArgs)">
            <summary>
            The default User Signature event handler.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:NATS.Client.Serializer">
            <summary>
            Represents the method that will handle serialization of <paramref name="obj"/>
            to a byte array.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to serialize.</param>
        </member>
        <member name="T:NATS.Client.Deserializer">
            <summary>
            Represents a method that will handle deserialization of a byte array
            into an <see cref="T:System.Object"/>.
            </summary>
            <param name="data">The byte array in a <see cref="T:NATS.Client.Msg"/> payload
            that contains the <see cref="T:System.Object"/> to deserialize.</param>
            <returns>The <see cref="T:System.Object"/> being deserialized.</returns>
        </member>
        <member name="T:NATS.Client.EncodedMessageEventArgs">
            <summary>
            ENCODED CONNECTIONS, WHILE STILL FUNCTIONAL, WILL NO LONGER BE SUPPORTED
            Provides decoded messages received by subscriptions or requests.
            </summary>
        </member>
        <member name="P:NATS.Client.EncodedMessageEventArgs.Subject">
            <summary>
            Gets the subject for the received <see cref="T:NATS.Client.Msg"/>.
            </summary>
        </member>
        <member name="P:NATS.Client.EncodedMessageEventArgs.Reply">
            <summary>
            Gets the reply topic for the received <see cref="T:NATS.Client.Msg"/>.
            </summary>
        </member>
        <member name="P:NATS.Client.EncodedMessageEventArgs.ReceivedObject">
            <summary>
            Gets the object decoded (deserialized) from the incoming message.
            </summary>
        </member>
        <member name="P:NATS.Client.EncodedMessageEventArgs.Message">
            <summary>
            Gets the original <see cref="T:NATS.Client.Msg"/> that <see cref="P:NATS.Client.EncodedMessageEventArgs.ReceivedObject"/> was deserialized from.
            </summary>
        </member>
        <member name="T:NATS.Client.EncodedConnection">
            <summary>
            ENCODED CONNECTIONS, WHILE STILL FUNCTIONAL, WILL NO LONGER BE SUPPORTED
            Represents a <see cref="T:NATS.Client.Connection"/> which uses a client specified
            encoding scheme.
            </summary>
        </member>
        <member name="M:NATS.Client.EncodedConnection.Publish(System.String,System.Object)">
            <summary>
            Publishes the serialized value of <paramref name="obj"/> to the given <paramref name="subject"/>.
            </summary>
            <param name="subject">The subject to publish <paramref name="obj"/> to over
            the current connection.</param>
            <param name="obj">The <see cref="T:System.Object"/> to serialize and publish to the connected NATS server.</param>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is 
            <c>null</c> or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="obj"/> exceeds the maximum payload size
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSException"><para><see cref="P:NATS.Client.EncodedConnection.OnSerialize"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para>There was an unexpected exception performing an internal NATS call
            while publishing. See <see cref="P:System.Exception.InnerException"/> for more details.</para></exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.EncodedConnection.Publish(System.String,NATS.Client.MsgHeader,System.Object)">
            <summary>
            Publishes the serialized value of <paramref name="obj"/> to the given <paramref name="subject"/>.
            </summary>
            <param name="subject">The subject to publish <paramref name="obj"/> to over
            the current connection.</param>
            <param name="headers">Optional headers to publish with the message.</param>
            <param name="obj">The <see cref="T:System.Object"/> to serialize and publish to the connected NATS server.</param>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is 
            <c>null</c> or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="obj"/> exceeds the maximum payload size
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSException"><para><see cref="P:NATS.Client.EncodedConnection.OnSerialize"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para>There was an unexpected exception performing an internal NATS call
            while publishing. See <see cref="P:System.Exception.InnerException"/> for more details.</para></exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.EncodedConnection.Publish(System.String,System.String,System.Object)">
            <summary>
            Publishes the serialized value of <paramref name="obj"/> to the given <paramref name="subject"/>.
            </summary>
            <param name="subject">The subject to publish <paramref name="obj"/> to over
            the current connection.</param>
            <param name="reply">An optional reply subject.</param>
            <param name="obj">The <see cref="T:System.Object"/> to serialize and publish to the connected NATS server.</param>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is <c>null</c> or
            entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="obj"/> exceeds the maximum payload size
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSException"><para><see cref="P:NATS.Client.EncodedConnection.OnSerialize"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para>There was an unexpected exception performing an internal NATS call
            while publishing. See <see cref="P:System.Exception.InnerException"/> for more details.</para></exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.EncodedConnection.Publish(System.String,System.String,NATS.Client.MsgHeader,System.Object)">
            <summary>
            Publishes the serialized value of <paramref name="obj"/> to the given <paramref name="subject"/>.
            </summary>
            <param name="subject">The subject to publish <paramref name="obj"/> to over
            the current connection.</param>
            <param name="reply">An optional reply subject.</param>
            <param name="headers">Optional headers to publish with the message.</param>
            <param name="obj">The <see cref="T:System.Object"/> to serialize and publish to the connected NATS server.</param>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is <c>null</c> or
            entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="obj"/> exceeds the maximum payload size
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSException"><para><see cref="P:NATS.Client.EncodedConnection.OnSerialize"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para>There was an unexpected exception performing an internal NATS call
            while publishing. See <see cref="P:System.Exception.InnerException"/> for more details.</para></exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.EncodedConnection.SubscribeAsync(System.String,System.EventHandler{NATS.Client.EncodedMessageEventArgs})">
            <summary>
            Expresses interest in the given <paramref name="subject"/> to the NATS Server, and begins delivering
            messages to the given event handler.
            </summary>
            <remarks>The <see cref="T:NATS.Client.IAsyncSubscription"/> returned will start delivering messages
            to the event handler as soon as they are received. The caller does not have to invoke
            <see cref="M:NATS.Client.IAsyncSubscription.Start"/>.</remarks>
            <param name="subject">The subject on which to listen for messages.
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <param name="handler">The <see cref="T:System.EventHandler`1"/> invoked when messages are received 
            on the returned <see cref="T:NATS.Client.IAsyncSubscription"/>.</param>
            <returns>An <see cref="T:NATS.Client.IAsyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="handler"/> is <c>null</c>.</exception>
            <exception cref="T:NATS.Client.NATSException"><see cref="P:NATS.Client.EncodedConnection.OnDeserialize"/> is <c>null</c>.</exception>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is 
            <c>null</c> or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.EncodedConnection.SubscribeAsync(System.String,System.String,System.EventHandler{NATS.Client.EncodedMessageEventArgs})">
            <summary>
            Creates an asynchronous queue subscriber on the given <paramref name="subject"/>, and begins delivering
            messages to the given event handler.
            </summary>
            <remarks>The <see cref="T:NATS.Client.IAsyncSubscription"/> returned will start delivering messages
            to the event handler as soon as they are received. The caller does not have to invoke
            <see cref="M:NATS.Client.IAsyncSubscription.Start"/>.</remarks>
            <param name="subject">The subject on which to listen for messages.
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <param name="queue">The name of the queue group in which to participate.</param>
            <param name="handler">The <see cref="T:System.EventHandler`1"/> invoked when messages are received 
            on the returned <see cref="T:NATS.Client.IAsyncSubscription"/>.</param>
            <returns>An <see cref="T:NATS.Client.IAsyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="handler"/> is <c>null</c>.</exception>
            <exception cref="T:NATS.Client.NATSException"><see cref="P:NATS.Client.EncodedConnection.OnDeserialize"/> is <c>null</c>.</exception>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is 
            <c>null</c> or entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.EncodedConnection.Request(System.String,System.Object,System.Int32)">
            <summary>
            Sends a request payload and returns the deserialized response, or throws
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.EncodedConnection.Request(System.String,System.Object,System.Int32)"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.IEncodedConnection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="obj"/> to over
            the current connection.</param>
            <param name="obj">The <see cref="T:System.Object"/> to serialize and publish to the connected NATS server.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <returns>A <see cref="T:System.Object"/> with the deserialized response from the NATS server.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout"/> is less than or equal to zero 
            (<c>0</c>).</exception>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is <c>null</c> or
            entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="obj"/> exceeds the maximum payload size
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the 
            response.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call
            while executing the request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.EncodedConnection.Request(System.String,NATS.Client.MsgHeader,System.Object,System.Int32)">
            <summary>
            Sends a request payload and returns the deserialized response, or throws
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.EncodedConnection.Request(System.String,System.Object,System.Int32)"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.IEncodedConnection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="obj"/> to over
            the current connection.</param>
            <param name="headers">Optional headers to publish with the message.</param>
            <param name="obj">The <see cref="T:System.Object"/> to serialize and publish to the connected NATS server.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <returns>A <see cref="T:System.Object"/> with the deserialized response from the NATS server.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout"/> is less than or equal to zero 
            (<c>0</c>).</exception>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is <c>null</c> or
            entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="obj"/> exceeds the maximum payload size
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the 
            response.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call
            while executing the request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.EncodedConnection.Request(System.String,System.Object)">
            <summary>
            Sends a request payload and returns the deserialized response.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.EncodedConnection.Request(System.String,System.Object)"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.IEncodedConnection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="obj"/> to over
            the current connection.</param>
            <param name="obj">The <see cref="T:System.Object"/> to serialize and publish to the connected NATS server.</param>
            <returns>A <see cref="T:System.Object"/> with the deserialized response from the NATS server.</returns>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is <c>null</c> or 
            entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="obj"/> exceeds the maximum payload size
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the
            response.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call while
            executing the request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="M:NATS.Client.EncodedConnection.Request(System.String,NATS.Client.MsgHeader,System.Object)">
            <summary>
            Sends a request payload and returns the deserialized response.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.EncodedConnection.Request(System.String,System.Object)"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.IEncodedConnection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="obj"/> to over
            the current connection.</param>
            <param name="headers">Optional headers to publish with the message.</param>
            <param name="obj">The <see cref="T:System.Object"/> to serialize and publish to the connected NATS server.</param>
            <returns>A <see cref="T:System.Object"/> with the deserialized response from the NATS server.</returns>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException"><paramref name="subject"/> is <c>null</c> or 
            entirely whitespace.</exception>
            <exception cref="T:NATS.Client.NATSMaxPayloadException"><paramref name="obj"/> exceeds the maximum payload size
            supported by the NATS server.</exception>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while sending the request or receiving the
            response.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call while
            executing the request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
            <exception cref="T:System.IO.IOException">There was a failure while writing to the network.</exception>
        </member>
        <member name="P:NATS.Client.EncodedConnection.OnSerialize">
            <summary>
            Gets or sets the method which is called to serialize
            objects sent as a message payload.
            </summary>
            <remarks>If <c>null</c> is given then the
            default serialization method for the platform is used, if one exists.</remarks>
        </member>
        <member name="P:NATS.Client.EncodedConnection.OnDeserialize">
            <summary>
            Gets or sets the method which is called to deserialize
            objects from a message payload.
            </summary>
            <remarks>If <c>null</c> is given then the
            default deserialization method for the platform is used, if one exists.</remarks>
        </member>
        <member name="M:NATS.Client.EncodedConnection.Dispose(System.Boolean)">
            <summary>
            Closes the <see cref="T:NATS.Client.EncodedConnection"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed
            and unmanaged resources; <c>false</c> to release only unmanaged 
            resources.</param>
        </member>
        <member name="T:NATS.Client.NATSException">
            <summary>
            The exception that is thrown when there is a NATS error condition.  All
            NATS exception inherit from this class.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSConnectionException">
            <summary>
            The exception that is thrown when there is a connection error.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSReconnectBufferException">
            <summary>
            The exception that is thrown when there is an error writing
            to the internal reconnect buffer.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSProtocolException">
            <summary>
            This exception that is thrown when there is an internal error with
            the NATS protocol.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSNoServersException">
            <summary>
            The exception that is thrown when a connection cannot be made
            to any server.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSSecureConnWantedException">
            <summary>
            The exception that is thrown when a secure connection is requested,
            but not required.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSSecureConnRequiredException">
            <summary>
            The exception that is thrown when a secure connection is required.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSConnectionClosedException">
            <summary>
            The exception that is thrown when a an operation is performed on
            a connection that is closed.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSSlowConsumerException">
            <summary>
            The exception that is thrown when a consumer (subscription) is slow.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSStaleConnectionException">
            <summary>
            The exception that is thrown when an operation occurs on a connection
            that has been determined to be stale.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSMaxPayloadException">
            <summary>
            The exception that is thrown when a message payload exceeds what
            the maximum configured.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSMaxMessagesException">
            <summary>
            The exception that is thrown when a subscriber has exceeded the maximum
            number of messages that has been configured.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSBadSubscriptionException">
            <summary>
            The exception that is thrown when a subscriber operation is performed on
            an invalid subscriber.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSTimeoutException">
            <summary>
            The exception that is thrown when a NATS operation times out.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSNotSupportedException">
            <summary>
            The exception that is thrown when a NATS operation is not supported due
            to client and server feature conflict.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSInvalidHeaderException">
            <summary>
            The exception that is thrown when a NATS header is invalid.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSConnectionDrainingException">
            <summary>
            The exception that is thrown when a NATS operation is performed on a draining connection.
            </summary>
        </member>
        <member name="T:NATS.Client.NATSNoRespondersException">
            <summary>
            The exception thrown when the server has detected there are no responders for a request.
            </summary>
            <remarks>
            This is circuit breaking behavior from the NATS server to more quickly identify when
            a request would have timed out.
            </remarks>
        </member>
        <member name="T:NATS.Client.NATSJetStreamStatusException">
            <summary>
            The exception that is thrown when a JetStream subscription detects an exceptional or unknown status
            </summary>
        </member>
        <member name="T:NATS.Client.NATSJetStreamClientException">
            <summary>
            The exception that is thrown when a client request is improper
            </summary>
        </member>
        <member name="T:NATS.Client.IAsyncSubscription">
            <summary>
            <see cref="T:NATS.Client.IAsyncSubscription"/> asynchronously delivers messages to listeners of the <see cref="E:NATS.Client.IAsyncSubscription.MessageHandler"/>
            event.
            </summary>
            <remarks>
            If the <see cref="T:NATS.Client.IAsyncSubscription"/> is created without listening to the <see cref="E:NATS.Client.IAsyncSubscription.MessageHandler"/>
            event, no messages will be received until <see cref="M:NATS.Client.IAsyncSubscription.Start"/> has been called.
            </remarks>
        </member>
        <member name="E:NATS.Client.IAsyncSubscription.MessageHandler">
            <summary>
            Occurs when the <see cref="T:NATS.Client.IAsyncSubscription"/> receives a message from the
            underlying <see cref="T:NATS.Client.ISubscription"/>.
            </summary>
        </member>
        <member name="M:NATS.Client.IAsyncSubscription.Start">
            <summary>
            Starts delivering received messages to listeners on <see cref="E:NATS.Client.IAsyncSubscription.MessageHandler"/>
            from a separate thread.
            </summary>
            <remarks>
            If the <see cref="T:NATS.Client.IAsyncSubscription"/> has already started delivering messages, this
            method is a no-op.
            </remarks>
        </member>
        <member name="T:NATS.Client.IConnection">
            <summary>
            Represents a connection to the NATS server.
            </summary>
        </member>
        <member name="P:NATS.Client.IConnection.Opts">
            <summary>
            Gets the configuration options for this instance.
            </summary>
        </member>
        <member name="P:NATS.Client.IConnection.ClientIP">
            <summary>
            Gets the IP of client as known by the NATS server, otherwise <c>null</c>.
            </summary>
            <remarks>
            Supported in the NATS server version 2.1.6 and above.  If the client is connected to
            an older server or is in the process of connecting, null will be returned.
            </remarks>
        </member>
        <member name="P:NATS.Client.IConnection.ClientID">
            <summary>
            Gets the ID of client as known by the NATS server, otherwise <c>null</c>.
            </summary>
            <remarks>
            May not be supported in all versions of the server. If the client is connected to
            an older server or is in the process of connecting, 0 will be returned.
            </remarks>
        </member>
        <member name="P:NATS.Client.IConnection.ConnectedUrl">
            <summary>
            Gets the URL of the NATS server to which this instance
            is connected, otherwise <c>null</c>.
            </summary>
        </member>
        <member name="P:NATS.Client.IConnection.ConnectedId">
            <summary>
            Gets the server ID of the NATS server to which this instance
            is connected, otherwise <c>null</c>.
            </summary>
        </member>
        <member name="P:NATS.Client.IConnection.ServerInfo">
            <summary>
            Gets the server info for this connection to which this instance
            is connected, otherwise <c>null</c>.
            </summary>
        </member>
        <member name="P:NATS.Client.IConnection.Servers">
            <summary>
            Gets an array of known server URLs for this instance.
            </summary>
            <remarks><see cref="P:NATS.Client.IConnection.Servers"/> also includes any additional
            servers discovered after a connection has been established. If
            authentication is enabled, <see cref="P:NATS.Client.Options.User"/> or
            <see cref="P:NATS.Client.Options.Token"/> must be used when connecting with
            these URLs.</remarks>
        </member>
        <member name="P:NATS.Client.IConnection.DiscoveredServers">
            <summary>
            Gets an array of server URLs that were discovered after this
            instance connected.
            </summary>
            <remarks>If authentication is enabled, <see cref="P:NATS.Client.Options.User"/> or
            <see cref="P:NATS.Client.Options.Token"/> must be used when connecting with
            these URLs.</remarks>
        </member>
        <member name="P:NATS.Client.IConnection.LastError">
            <summary>
            Gets the last <see cref="T:System.Exception"/> encountered by this instance,
            otherwise <c>null</c>.
            </summary>
        </member>
        <member name="M:NATS.Client.IConnection.Reconnect(NATS.Client.ReconnectOptions)">
            <summary>
            Manually start reconnect behavior.
            <param name="reconnectOptions">ReconnectOptions, optional</param>
            </summary>
        </member>
        <member name="M:NATS.Client.IConnection.Publish(System.String,System.Byte[])">
            <summary>
            Publishes <paramref name="data"/> to the given <paramref name="subject"/>.
            </summary>
            <remarks>
            <para>NATS implements a publish-subscribe message distribution model. NATS publish subscribe is a
            one-to-many communication. A publisher sends a message on a subject. Any active subscriber listening
            on that subject receives the message. Subscribers can register interest in wildcard subjects.</para>
            <para>In the basic NATS platform, if a subscriber is not listening on the subject (no subject match),
            or is not active when the message is sent, the message is not received. NATS is a fire-and-forget
            messaging system. If you need higher levels of service, you can either use NATS Streaming, or build the
            additional reliability into your client(s) yourself.</para>
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the data to publish
            to the connected NATS server.</param>
            <exception cref="T:NATS.Client.NATSReconnectBufferException"> is thrown when
            publishing while reconnecting and the internal reconnect buffer
            has been disabled or exceeded.</exception>
            <seealso cref="P:NATS.Client.Options.ReconnectBufferSize"></seealso>
        </member>
        <member name="M:NATS.Client.IConnection.Publish(System.String,NATS.Client.MsgHeader,System.Byte[])">
            <summary>
            Publishes <paramref name="data"/> to the given <paramref name="subject"/>.
            </summary>
            <remarks>
            <para>NATS implements a publish-subscribe message distribution model. NATS publish subscribe is a
            one-to-many communication. A publisher sends a message on a subject. Any active subscriber listening
            on that subject receives the message. Subscribers can register interest in wildcard subjects.</para>
            <para>In the basic NATS platform, if a subscriber is not listening on the subject (no subject match),
            or is not active when the message is sent, the message is not received. NATS is a fire-and-forget
            messaging system. If you need higher levels of service, you can either use NATS Streaming, or build the
            additional reliability into your client(s) yourself.</para>
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="headers">Optional headers to publish with the message.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the data to publish
            to the connected NATS server.</param>
            <exception cref="T:NATS.Client.NATSReconnectBufferException"> is thrown when
            publishing while reconnecting and the internal reconnect buffer
            has been disabled or exceeded.</exception>
            <seealso cref="P:NATS.Client.Options.ReconnectBufferSize"></seealso>
        </member>
        <member name="M:NATS.Client.IConnection.Publish(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Publishes a sequence of bytes from <paramref name="data"/> to the given <paramref name="subject"/>.
            </summary>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <seealso cref="M:NATS.Client.IConnection.Publish(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.Publish(System.String,NATS.Client.MsgHeader,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Publishes a sequence of bytes from <paramref name="data"/> to the given <paramref name="subject"/>.
            </summary>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="headers">Optional headers to publish with the message.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <seealso cref="M:NATS.Client.IConnection.Publish(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.Publish(System.String,System.String,System.Byte[])">
            <summary>
            Publishes <paramref name="data"/> to the given <paramref name="subject"/>.
            </summary>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="reply">An optional reply subject.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the data to publish
            to the connected NATS server.</param>
            <seealso cref="M:NATS.Client.IConnection.Publish(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.Publish(System.String,System.String,NATS.Client.MsgHeader,System.Byte[])">
            <summary>
            Publishes <paramref name="data"/> to the given <paramref name="subject"/>.
            </summary>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="reply">An optional reply subject.</param>
            <param name="headers">Optional headers to publish with the message.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the data to publish
            to the connected NATS server.</param>
            <seealso cref="M:NATS.Client.IConnection.Publish(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.Publish(System.String,System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Publishes a sequence of bytes from <paramref name="data"/> to the given <paramref name="subject"/>.
            </summary>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="reply">An optional reply subject.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <seealso cref="M:NATS.Client.IConnection.Publish(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.Publish(System.String,System.String,NATS.Client.MsgHeader,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Publishes a sequence of bytes from <paramref name="data"/> to the given <paramref name="subject"/>.
            </summary>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="reply">An optional reply subject.</param>
            <param name="headers">Optional headers to publish with the message.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <seealso cref="M:NATS.Client.IConnection.Publish(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.Publish(NATS.Client.Msg)">
            <summary>
            Publishes a <see cref="T:NATS.Client.Msg"/> instance, which includes the subject, an optional reply, and an
            optional data field.
            </summary>
            <param name="msg">A <see cref="T:NATS.Client.Msg"/> instance containing the subject, optional reply, and data to publish
            to the NATS server.</param>
            <seealso cref="M:NATS.Client.IConnection.Publish(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.Request(System.String,System.Byte[],System.Int32)">
            <summary>
            Sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>, or throws
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <returns>A <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.Request(System.String,NATS.Client.MsgHeader,System.Byte[],System.Int32)">
            <summary>
            Sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>, or throws
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="headers">Optional headers to publish with the message.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <returns>A <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.Request(System.String,System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Sends a sequence of bytes as the request payload and returns the response <see cref="T:NATS.Client.Msg"/>, or throws
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[],System.Int32,System.Int32,System.Int32)"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <returns>A <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.Request(System.String,NATS.Client.MsgHeader,System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Sends a sequence of bytes as the request payload and returns the response <see cref="T:NATS.Client.Msg"/>, or throws
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[],System.Int32,System.Int32,System.Int32)"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="headers">Optional headers to publish with the message.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <returns>A <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.Request(System.String,System.Byte[])">
            <summary>
            Sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>.
            </summary>
            <remarks>
            <para>NATS supports two flavors of request-reply messaging: point-to-point or one-to-many. Point-to-point
            involves the fastest or first to respond. In a one-to-many exchange, you set a limit on the number of 
            responses the requestor may receive and instead must use a subscription (<see cref="M:NATS.Client.ISubscription.AutoUnsubscribe(System.Int32)"/>).
            In a request-response exchange, publish request operation publishes a message with a reply subject expecting
            a response on that reply subject.</para>
            <para><see cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.</para>
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <returns>A <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
        </member>
        <member name="M:NATS.Client.IConnection.Request(System.String,NATS.Client.MsgHeader,System.Byte[])">
            <summary>
            Sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>.
            </summary>
            <remarks>
            <para>NATS supports two flavors of request-reply messaging: point-to-point or one-to-many. Point-to-point
            involves the fastest or first to respond. In a one-to-many exchange, you set a limit on the number of 
            responses the requestor may receive and instead must use a subscription (<see cref="M:NATS.Client.ISubscription.AutoUnsubscribe(System.Int32)"/>).
            In a request-response exchange, publish request operation publishes a message with a reply subject expecting
            a response on that reply subject.</para>
            <para><see cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.</para>
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="headers">Optional headers to publish with the message.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <returns>A <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
        </member>
        <member name="M:NATS.Client.IConnection.Request(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends a sequence of bytes as the request payload and returns the response <see cref="T:NATS.Client.Msg"/>.
            </summary>
            <remarks>
            <para>NATS supports two flavors of request-reply messaging: point-to-point or one-to-many. Point-to-point
            involves the fastest or first to respond. In a one-to-many exchange, you set a limit on the number of 
            responses the requestor may receive and instead must use a subscription (<see cref="M:NATS.Client.ISubscription.AutoUnsubscribe(System.Int32)"/>).
            In a request-response exchange, publish request operation publishes a message with a reply subject expecting
            a response on that reply subject.</para>
            <para><see cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[],System.Int32,System.Int32)"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.</para>
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <returns>A <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
        </member>
        <member name="M:NATS.Client.IConnection.Request(System.String,NATS.Client.MsgHeader,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends a sequence of bytes as the request payload and returns the response <see cref="T:NATS.Client.Msg"/>.
            </summary>
            <remarks>
            <para>NATS supports two flavors of request-reply messaging: point-to-point or one-to-many. Point-to-point
            involves the fastest or first to respond. In a one-to-many exchange, you set a limit on the number of 
            responses the requestor may receive and instead must use a subscription (<see cref="M:NATS.Client.ISubscription.AutoUnsubscribe(System.Int32)"/>).
            In a request-response exchange, publish request operation publishes a message with a reply subject expecting
            a response on that reply subject.</para>
            <para><see cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[],System.Int32,System.Int32)"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.</para>
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="headers">Optional headers to publish with the message.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <returns>A <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
        </member>
        <member name="M:NATS.Client.IConnection.Request(NATS.Client.Msg)">
            <summary>
            Sends a request message and returns the response <see cref="T:NATS.Client.Msg"/>.
            </summary>
            <remarks>
            <para>NATS supports two flavors of request-reply messaging: point-to-point or one-to-many. Point-to-point
            involves the fastest or first to respond. In a one-to-many exchange, you set a limit on the number of 
            responses the requestor may receive and instead must use a subscription (<see cref="M:NATS.Client.ISubscription.AutoUnsubscribe(System.Int32)"/>).
            In a request-response exchange, publish request operation publishes a message with a reply subject expecting
            a response on that reply subject.</para>
            <para><see cref="M:NATS.Client.IConnection.Request(NATS.Client.Msg)"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.</para>
            </remarks>=
            <param name="message">A <see cref="T:NATS.Client.Msg"/> that contains the request data to publish
            to the connected NATS server.  Any reply subject will be overridden.</param>
            <returns>A <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
        </member>
        <member name="M:NATS.Client.IConnection.Request(NATS.Client.Msg,System.Int32)">
            <summary>
            Sends a request message and returns the response <see cref="T:NATS.Client.Msg"/>, or throws
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IConnection.Request(NATS.Client.Msg,System.Int32)"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="message">A NATS <see cref="T:NATS.Client.Msg"/> that contains the request data to publish
            to the connected NATS server.  The reply subject will be overridden.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <returns>A <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(NATS.Client.Msg)"/>
        </member>
        <member name="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Int32)">
            <summary>
            Asynchronously sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>, or throws 
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Int32)"/> will create an unique inbox for this request, sharing a
            single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <returns>A task that represents the asynchronous read operation. The value of the <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.RequestAsync(System.String,NATS.Client.MsgHeader,System.Byte[],System.Int32)">
            <summary>
            Asynchronously sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>, or throws 
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Int32)"/> will create an unique inbox for this request, sharing a
            single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="headers">Optional headers to publish with the message.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <returns>A task that represents the asynchronous read operation. The value of the <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Asynchronously sends a sequence of bytes as the request payload and returns the response <see cref="T:NATS.Client.Msg"/>, or throws 
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Int32,System.Int32,System.Int32)"/> will create an unique inbox for this request, sharing a
            single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <returns>A task that represents the asynchronous read operation. The value of the <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.RequestAsync(System.String,NATS.Client.MsgHeader,System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Asynchronously sends a sequence of bytes as the request payload and returns the response <see cref="T:NATS.Client.Msg"/>, or throws 
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Int32,System.Int32,System.Int32)"/> will create an unique inbox for this request, sharing a
            single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="headers">Optional headers to publish with the message.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <returns>A task that represents the asynchronous read operation. The value of the <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[])">
            <summary>
            Asynchronously sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[])"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <returns>A task that represents the asynchronous read operation. The value of the 
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS
            server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.RequestAsync(System.String,NATS.Client.MsgHeader,System.Byte[])">
            <summary>
            Asynchronously sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[])"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="headers">Optional headers to publish with the message.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <returns>A task that represents the asynchronous read operation. The value of the 
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS
            server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Asynchronously sends a sequence of bytes as the request payload and returns the response <see cref="T:NATS.Client.Msg"/>.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Int32,System.Int32)"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <returns>A task that represents the asynchronous read operation. The value of the 
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS
            server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.RequestAsync(System.String,NATS.Client.MsgHeader,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Asynchronously sends a sequence of bytes as the request payload and returns the response <see cref="T:NATS.Client.Msg"/>.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Int32,System.Int32)"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="headers">Optional headers to publish with the message.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <returns>A task that represents the asynchronous read operation. The value of the 
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS
            server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>, or throws
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires, while monitoring for 
            cancellation requests.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Int32,System.Threading.CancellationToken)"/> will create an unique inbox for this
            request, sharing a single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However,
            if <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <param name="token">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous read operation. The value of the
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains  a <see cref="T:NATS.Client.Msg"/> with the response from the NATS
            server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.RequestAsync(System.String,NATS.Client.MsgHeader,System.Byte[],System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>, or throws
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires, while monitoring for 
            cancellation requests.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Int32,System.Threading.CancellationToken)"/> will create an unique inbox for this
            request, sharing a single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However,
            if <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="headers">Optional headers to publish with the message.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <param name="token">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous read operation. The value of the
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains  a <see cref="T:NATS.Client.Msg"/> with the response from the NATS
            server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>, while monitoring for
            cancellation requests.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Threading.CancellationToken)"/> will create an unique inbox for this request,
            sharing a single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="token">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous read operation. The value of the
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS 
            server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.RequestAsync(System.String,NATS.Client.MsgHeader,System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends a request payload and returns the response <see cref="T:NATS.Client.Msg"/>, while monitoring for
            cancellation requests.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Threading.CancellationToken)"/> will create an unique inbox for this request,
            sharing a single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="headers">Optional headers to publish with the message.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="token">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous read operation. The value of the
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS 
            server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends a sequence of bytes as the request payload and returns the response <see cref="T:NATS.Client.Msg"/>,
            while monitoring for cancellation requests.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)"/> will create an unique inbox for this request,
            sharing a single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <param name="token">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous read operation. The value of the
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS 
            server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.RequestAsync(System.String,NATS.Client.MsgHeader,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends a sequence of bytes as the request payload and returns the response <see cref="T:NATS.Client.Msg"/>,
            while monitoring for cancellation requests.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)"/> will create an unique inbox for this request,
            sharing a single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="headers">Optional headers to publish with the message.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the request data to publish
            to the connected NATS server.</param>
            <param name="offset">The zero-based byte offset in <paramref name="data"/> at which to begin publishing
            bytes to the subject.</param>
            <param name="count">The number of bytes to be published to the subject.</param>
            <param name="token">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous read operation. The value of the
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS 
            server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IConnection.RequestAsync(NATS.Client.Msg)">
            <summary>
            Asynchronously sends a request message and returns the response <see cref="T:NATS.Client.Msg"/>.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IConnection.RequestAsync(NATS.Client.Msg)"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="message">A NATS <see cref="T:NATS.Client.Msg"/> that contains the request data to publish
            to the connected NATS server. The reply subject will be overridden.</param>
            <returns>A task that represents the asynchronous read operation. The value of the 
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS
            server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(NATS.Client.Msg)"/>
        </member>
        <member name="M:NATS.Client.IConnection.RequestAsync(NATS.Client.Msg,System.Int32)">
            <summary>
            Asynchronously sends a request message and returns the response <see cref="T:NATS.Client.Msg"/>, or throws 
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IConnection.RequestAsync(NATS.Client.Msg,System.Int32)"/> will create an unique inbox for this request, sharing a
            single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="message">A NATS message <see cref="T:NATS.Client.Msg"/> that contains the request data to publish
            to the connected NATS server. The reply subject will be overridden.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <returns>A task that represents the asynchronous read operation. The value of the <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(NATS.Client.Msg,System.Int32)"/>
        </member>
        <member name="M:NATS.Client.IConnection.RequestAsync(NATS.Client.Msg,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends a request message and returns the response <see cref="T:NATS.Client.Msg"/>, while monitoring for
            cancellation requests.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IConnection.RequestAsync(NATS.Client.Msg,System.Threading.CancellationToken)"/> will create an unique inbox for this request,
            sharing a single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="message">A NATS <see cref="T:NATS.Client.Msg"/> that contains the request data to publish
            to the connected NATS server.  The reply subject will be overridden.</param>
            <param name="token">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous read operation. The value of the
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains a <see cref="T:NATS.Client.Msg"/> with the response from the NATS 
            server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(NATS.Client.Msg)"/>
        </member>
        <member name="M:NATS.Client.IConnection.RequestAsync(NATS.Client.Msg,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends a request message and returns the response <see cref="T:NATS.Client.Msg"/>, or throws
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires, while monitoring for 
            cancellation requests.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IConnection.RequestAsync(NATS.Client.Msg,System.Int32,System.Threading.CancellationToken)"/> will create an unique inbox for this
            request, sharing a single subscription for all replies to this <see cref="T:NATS.Client.Connection"/> instance. However,
            if <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription.
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="message">A NATS <see cref="T:NATS.Client.Msg"/> that contains the request data to publish
            to the connected NATS server.  The reply subject will be overridden.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <param name="token">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous read operation. The value of the
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> parameter contains  a <see cref="T:NATS.Client.Msg"/> with the response from the NATS
            server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(NATS.Client.Msg,System.Int32)"/>
        </member>
        <member name="M:NATS.Client.IConnection.NewInbox">
            <summary>
            Creates an inbox string which can be used for directed replies from subscribers.
            </summary>
            <remarks>
            The returned inboxes are guaranteed to be unique, but can be shared and subscribed
            to by others.
            </remarks>
            <returns>A unique inbox string.</returns>
        </member>
        <member name="M:NATS.Client.IConnection.SubscribeSync(System.String)">
            <summary>
            Expresses interest in the given <paramref name="subject"/> to the NATS Server.
            </summary>
            <param name="subject">The subject on which to listen for messages.
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <returns>An <see cref="T:NATS.Client.ISyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>.</returns>
            <seealso cref="P:NATS.Client.ISubscription.Subject"/>
        </member>
        <member name="M:NATS.Client.IConnection.SubscribeAsync(System.String)">
            <summary>
            Expresses interest in the given <paramref name="subject"/> to the NATS Server.
            </summary>
            <remarks>
            The <see cref="T:NATS.Client.IAsyncSubscription"/> returned will not start receiving messages until
            <see cref="M:NATS.Client.IAsyncSubscription.Start"/> is called.
            </remarks>
            <param name="subject">The subject on which to listen for messages. 
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <returns>An <see cref="T:NATS.Client.IAsyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>.</returns>
            <seealso cref="P:NATS.Client.ISubscription.Subject"/>
        </member>
        <member name="M:NATS.Client.IConnection.SubscribeAsync(System.String,System.EventHandler{NATS.Client.MsgHandlerEventArgs})">
            <summary>
            Expresses interest in the given <paramref name="subject"/> to the NATS Server, and begins delivering
            messages to the given event handler.
            </summary>
            <remarks>The <see cref="T:NATS.Client.IAsyncSubscription"/> returned will start delivering messages
            to the event handler as soon as they are received. The caller does not have to invoke
            <see cref="M:NATS.Client.IAsyncSubscription.Start"/>.</remarks>
            <param name="subject">The subject on which to listen for messages.
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <param name="handler">The <see cref="T:System.EventHandler`1"/> invoked when messages are received 
            on the returned <see cref="T:NATS.Client.IAsyncSubscription"/>.</param>
            <returns>An <see cref="T:NATS.Client.IAsyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>.</returns>
            <seealso cref="P:NATS.Client.ISubscription.Subject"/>
        </member>
        <member name="M:NATS.Client.IConnection.SubscribeSync(System.String,System.String)">
            <summary>
            Creates a synchronous queue subscriber on the given <paramref name="subject"/>.
            </summary>
            <remarks>All subscribers with the same queue name will form the queue group and
            only one member of the group will be selected to receive any given message
            synchronously.</remarks>
            <param name="subject">The subject on which to listen for messages.</param>
            <param name="queue">The name of the queue group in which to participate.</param>
            <returns>An <see cref="T:NATS.Client.ISyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>, as part of 
            the given queue group.</returns>
            <seealso cref="P:NATS.Client.ISubscription.Subject"/>
            <seealso cref="P:NATS.Client.ISubscription.Queue"/>
        </member>
        <member name="M:NATS.Client.IConnection.SubscribeAsync(System.String,System.String)">
            <summary>
            Creates an asynchronous queue subscriber on the given <paramref name="subject"/>.
            </summary>
            <remarks>
            <para>All subscribers with the same queue name will form the queue group and
            only one member of the group will be selected to receive any given message.</para>
            <para>The <see cref="T:NATS.Client.IAsyncSubscription"/> returned will not start receiving messages until
            <see cref="M:NATS.Client.IAsyncSubscription.Start"/> is called.</para>
            </remarks>
            <param name="subject">The subject on which to listen for messages.
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <param name="queue">The name of the queue group in which to participate.</param>
            <returns>An <see cref="T:NATS.Client.IAsyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>.</returns>
            <seealso cref="P:NATS.Client.ISubscription.Subject"/>
            <seealso cref="P:NATS.Client.ISubscription.Queue"/>
        </member>
        <member name="M:NATS.Client.IConnection.SubscribeAsync(System.String,System.String,System.EventHandler{NATS.Client.MsgHandlerEventArgs})">
            <summary>
            Creates an asynchronous queue subscriber on the given <paramref name="subject"/>, and begins delivering
            messages to the given event handler.
            </summary>
            <remarks>
            <para>All subscribers with the same queue name will form the queue group and
            only one member of the group will be selected to receive any given message.</para>
            <para>The <see cref="T:NATS.Client.IAsyncSubscription"/> returned will start delivering messages
            to the event handler as soon as they are received. The caller does not have to invoke
            <see cref="M:NATS.Client.IAsyncSubscription.Start"/>.</para>
            </remarks>
            <param name="subject">The subject on which to listen for messages.
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <param name="queue">The name of the queue group in which to participate.</param>
            <param name="handler">The <see cref="T:System.EventHandler`1"/> invoked when messages are received 
            on the returned <see cref="T:NATS.Client.IAsyncSubscription"/>.</param>
            <returns>An <see cref="T:NATS.Client.IAsyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>.</returns>
            <seealso cref="P:NATS.Client.ISubscription.Subject"/>
            <seealso cref="P:NATS.Client.ISubscription.Queue"/>
        </member>
        <member name="M:NATS.Client.IConnection.Flush(System.Int32)">
            <summary>
            Performs a round trip to the server and returns when it receives the internal reply, or throws
            a <see cref="T:NATS.Client.NATSTimeoutException"/> exception if the NATS Server does not reply in time.
            </summary>
            <param name="timeout">The number of milliseconds to wait.</param>
        </member>
        <member name="M:NATS.Client.IConnection.RTT">
            <summary>
            Calculates the round trip time between this client and the server.
            </summary>
            <returns>A timespan representing the elapsed time.</returns>
        </member>
        <member name="M:NATS.Client.IConnection.Flush">
            <summary>
            Performs a round trip to the server and returns when it receives the internal reply.
            </summary>
        </member>
        <member name="M:NATS.Client.IConnection.FlushBuffer">
            <summary>
            Immediately flushes the underlying connection buffer if the connection is valid.
            </summary>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call while executing the
            request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
        </member>
        <member name="M:NATS.Client.IConnection.Close">
            <summary>
            Closes the <see cref="T:NATS.Client.IConnection"/> and all associated
            subscriptions.
            </summary>
            <seealso cref="M:NATS.Client.IConnection.IsClosed"/>
            <seealso cref="P:NATS.Client.IConnection.State"/>
        </member>
        <member name="M:NATS.Client.IConnection.IsClosed">
            <summary>
            Returns a value indicating whether or not the <see cref="T:NATS.Client.IConnection"/>
            instance is closed.
            </summary>
            <returns><c>true</c> if and only if the <see cref="T:NATS.Client.IConnection"/> is
            closed, otherwise <c>false</c>.</returns>
            <seealso cref="M:NATS.Client.IConnection.Close"/>
            <seealso cref="P:NATS.Client.IConnection.State"/>
        </member>
        <member name="M:NATS.Client.IConnection.IsReconnecting">
            <summary>
            Returns a value indicating whether or not the <see cref="T:NATS.Client.IConnection"/>
            is currently reconnecting.
            </summary>
            <returns><c>true</c> if and only if the <see cref="T:NATS.Client.IConnection"/> is
            reconnecting, otherwise <c>false</c>.</returns>
            <seealso cref="P:NATS.Client.IConnection.State"/>
        </member>
        <member name="P:NATS.Client.IConnection.State">
            <summary>
            Gets the current state of the <see cref="T:NATS.Client.IConnection"/>.
            </summary>
            <seealso cref="T:NATS.Client.ConnState"/>
        </member>
        <member name="P:NATS.Client.IConnection.Stats">
            <summary>
            Gets the statistics tracked for the <see cref="T:NATS.Client.IConnection"/>.
            </summary>
            <seealso cref="M:NATS.Client.IConnection.ResetStats"/>
        </member>
        <member name="M:NATS.Client.IConnection.ResetStats">
            <summary>
            Resets the associated statistics for the <see cref="T:NATS.Client.IConnection"/>.
            </summary>
            <seealso cref="P:NATS.Client.IConnection.Stats"/>
        </member>
        <member name="P:NATS.Client.IConnection.MaxPayload">
            <summary>
            Gets the maximum size in bytes of any payload sent
            to the connected NATS Server.
            </summary>
            <seealso cref="M:NATS.Client.IConnection.Publish(NATS.Client.Msg)"/>
            <seealso cref="M:NATS.Client.IConnection.Publish(System.String,System.Byte[])"/>
            <seealso cref="M:NATS.Client.IConnection.Publish(System.String,System.String,System.Byte[])"/>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[],System.Int32)"/>
            <seealso cref="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[])"/>
            <seealso cref="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Threading.CancellationToken)"/>
            <seealso cref="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Int32)"/>
            <seealso cref="M:NATS.Client.IConnection.RequestAsync(System.String,System.Byte[],System.Int32,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:NATS.Client.IConnection.DrainAsync">
            <summary>
            Drains a connection for graceful shutdown.
            </summary>
            <remarks>
            Drain will put a connection into a drain state. All subscriptions will
            immediately be put into a drain state. Upon completion, the publishers
            will be drained and can not publish any additional messages. Upon draining
            of the publishers, the connection will be closed. Use the 
            <see cref="F:NATS.Client.Options.ClosedEventHandler"/> option to know when the connection
            has moved from draining to closed.
            </remarks>
            <seealso cref="M:NATS.Client.IConnection.Close"/>
            <returns>A task that represents the asynchronous drain operation.</returns>
        </member>
        <member name="M:NATS.Client.IConnection.DrainAsync(System.Int32)">
            <summary>
            Drains a connection for graceful shutdown.
            </summary>
            <remarks>
            Drain will put a connection into a drain state. All subscriptions will
            immediately be put into a drain state. Upon completion, the publishers
            will be drained and can not publish any additional messages. Upon draining
            of the publishers, the connection will be closed. Use the 
            <see cref="F:NATS.Client.Options.ClosedEventHandler"/> option to know when the connection
            has moved from draining to closed.
            </remarks>
            <seealso cref="M:NATS.Client.IConnection.Close"/>
            <param name="timeout">The duration to wait for the drain to complete.</param> 
            <returns>A task that represents the asynchronous drain operation.</returns>
        </member>
        <member name="M:NATS.Client.IConnection.Drain">
            <summary>
            Drains a connection for graceful shutdown.
            </summary>
            <remarks>
            Drain will put a connection into a drain state. All subscriptions will
            immediately be put into a drain state. Upon completion, the publishers
            will be drained and can not publish any additional messages. Upon draining
            of the publishers, the connection will be closed. Use the 
            <see cref="F:NATS.Client.Options.ClosedEventHandler"/> option to know when the connection
            has moved from draining to closed.
            </remarks>
            <seealso cref="M:NATS.Client.IConnection.Close"/>
        </member>
        <member name="M:NATS.Client.IConnection.Drain(System.Int32)">
            <summary>
            Drains a connection for graceful shutdown.
            </summary>
            <remarks>
            Drain will put a connection into a drain state. All subscriptions will
            immediately be put into a drain state. Upon completion, the publishers
            will be drained and can not publish any additional messages. Upon draining
            of the publishers, the connection will be closed. Use the 
            <see cref="F:NATS.Client.Options.ClosedEventHandler"/> option to know when the connection
            has moved from draining to closed.
            </remarks>
            <seealso cref="M:NATS.Client.IConnection.Close"/>
            <param name="timeout">The duration to wait before draining.</param> 
        </member>
        <member name="M:NATS.Client.IConnection.IsDraining">
            <summary>
            Returns a value indicating whether or not the <see cref="T:NATS.Client.IConnection"/>
            connection is draining.
            </summary>
            <returns><c>true</c> if and only if the <see cref="T:NATS.Client.IConnection"/> is
            closed, otherwise <c>false</c>.</returns>
            <seealso cref="M:NATS.Client.IConnection.Close"/>
            <seealso cref="P:NATS.Client.IConnection.State"/>
        </member>
        <member name="P:NATS.Client.IConnection.SubscriptionCount">
            <summary>
            Get the number of active subscriptions.
            </summary>
        </member>
        <member name="M:NATS.Client.IConnection.GetStreamContext(System.String)">
            <summary>
            Get a stream context for a specific stream.
            </summary>
            <param name="streamName">the stream for the context</param>
            <returns>a StreamContext instance.</returns>
            <returns>an IStreamContext instance</returns>
        </member>
        <member name="M:NATS.Client.IConnection.GetStreamContext(System.String,NATS.Client.JetStream.JetStreamOptions)">
            <summary>
            Gets a stream context.
            </summary>
            <param name="streamName">the stream for the context</param>
            <param name="options">JetStream options.</param>
            <returns>an IStreamContext instance</returns>
        </member>
        <member name="M:NATS.Client.IConnection.GetConsumerContext(System.String,System.String)">
            <summary>
            Get a consumer context for a specific named stream and specific named consumer.
            Verifies that the stream and consumer exist.
            </summary>
            <param name="streamName">the name of the stream</param>
            <param name="consumerName">the name of the consumer</param>
            <returns>an IConsumerContext instance</returns>
        </member>
        <member name="M:NATS.Client.IConnection.GetConsumerContext(System.String,System.String,NATS.Client.JetStream.JetStreamOptions)">
            <summary>
            Get a consumer context for a specific named stream and specific named consumer.
            Verifies that the stream and consumer exist.
            </summary>
            <param name="streamName">the name of the stream</param>
            <param name="consumerName">the name of the consumer</param>
            <param name="options">JetStream options.</param>
            <returns>an IConsumerContext instance</returns>
        </member>
        <member name="M:NATS.Client.IConnection.CreateJetStreamContext(NATS.Client.JetStream.JetStreamOptions)">
            <summary>
            Gets a context for publishing and subscribing to subjects
            backed by Jetstream streams and consumers.
            </summary>
            <param name="options">Optional JetStream options.</param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.IConnection.CreateJetStreamManagementContext(NATS.Client.JetStream.JetStreamOptions)">
            <summary>
            Gets a context for administrating JetStream.
            </summary>
            <param name="options">Optional JetStream options.</param>
            <returns>an IJetStreamManagement instance</returns>
        </member>
        <member name="M:NATS.Client.IConnection.CreateKeyValueContext(System.String,NATS.Client.KeyValue.KeyValueOptions)">
            <summary>
            Gets a context for a Key Value bucket 
            </summary>
            <param name="bucketName">The name of the bucket</param>
            <param name="options">Optional KeyValueOptions.</param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.IConnection.CreateKeyValueManagementContext(NATS.Client.KeyValue.KeyValueOptions)">
            <summary>
            Gets a context for administrating Key Value buckets
            </summary>
            <param name="options">Optional KeyValueOptions.</param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.IConnection.CreateObjectStoreContext(System.String,NATS.Client.ObjectStore.ObjectStoreOptions)">
            <summary>
            Gets a context for a Object Store 
            </summary>
            <param name="bucketName">The name of the bucket</param>
            <param name="options">Optional ObjectStoreOptions.</param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.IConnection.CreateObjectStoreManagementContext(NATS.Client.ObjectStore.ObjectStoreOptions)">
            <summary>
            Gets a context for administrating Object Stores
            </summary>
            <param name="options">Optional ObjectStoreOptions.</param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.IConnectionFactory.CreateConnection(System.String,System.Boolean)">
            <summary>
            Attempt to connect to the NATS server referenced by <paramref name="url"/>.
            </summary>
            <remarks>
            <para><paramref name="url"/> can contain username/password semantics.
            Comma seperated arrays are also supported, e.g. <c>&quot;urlA, urlB&quot;</c>.</para>
            </remarks>
            <param name="url">A string containing the URL (or URLs) to the NATS Server. See the Remarks
            section for more information.</param>
            <param name="reconnectOnConnect">if true, the connection will treat the initial connection as any other and attempt reconnects on failure</param>
            <returns>An <see cref="T:NATS.Client.IConnection"/> object connected to the NATS server.</returns>
            <exception cref="T:NATS.Client.NATSNoServersException">No connection to a NATS Server could be established.</exception>
            <exception cref="T:NATS.Client.NATSConnectionException"><para>A timeout occurred connecting to a NATS Server.</para>
            <para>-or-</para>
            <para>An exception was encountered while connecting to a NATS Server. See <see cref="P:System.Exception.InnerException"/> for more
            details.</para></exception>
        </member>
        <member name="M:NATS.Client.IConnectionFactory.CreateConnection(System.String,System.String,System.Boolean)">
            <summary>
            Attempt to connect to the NATS server referenced by <paramref name="url"/> with NATS 2.0 credentials.
            </summary>
            <remarks>
            <para><paramref name="url"/>
            Comma seperated arrays are also supported, e.g. <c>&quot;urlA, urlB&quot;</c>.</para>
            </remarks>
            <param name="url">A string containing the URL (or URLs) to the NATS Server. See the Remarks
            section for more information.</param>
            <param name="credentialsPath">The full path to a chained credentials file.</param>
            <param name="reconnectOnConnect">if true, the connection will treat the initial connection as any other and attempt reconnects on failure</param>
            <returns>An <see cref="T:NATS.Client.IConnection"/> object connected to the NATS server.</returns>
            <exception cref="T:NATS.Client.NATSNoServersException">No connection to a NATS Server could be established.</exception>
            <exception cref="T:NATS.Client.NATSConnectionException"><para>A timeout occurred connecting to a NATS Server.</para>
            <para>-or-</para>
            <para>An exception was encountered while connecting to a NATS Server. See <see cref="P:System.Exception.InnerException"/> for more
            details.</para></exception>
        </member>
        <member name="M:NATS.Client.IConnectionFactory.CreateConnection(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Attempt to connect to the NATS server referenced by <paramref name="url"/> with NATS 2.0 credentials.
            </summary>
            <remarks>
            <para><paramref name="url"/>
            Comma seperated arrays are also supported, e.g. <c>&quot;urlA, urlB&quot;</c>.</para>
            </remarks>
            <param name="url">A string containing the URL (or URLs) to the NATS Server. See the Remarks
            section for more information.</param>
            <param name="jwt">The path to a user's public JWT credentials.</param>
            <param name="privateNkey">The path to a file for user user's private Nkey seed.</param>
            <param name="reconnectOnConnect">if true, the connection will treat the initial connection as any other and attempt reconnects on failure</param>
            <returns>An <see cref="T:NATS.Client.IConnection"/> object connected to the NATS server.</returns>
            <exception cref="T:NATS.Client.NATSNoServersException">No connection to a NATS Server could be established.</exception>
            <exception cref="T:NATS.Client.NATSConnectionException"><para>A timeout occurred connecting to a NATS Server.</para>
            <para>-or-</para>
            <para>An exception was encountered while connecting to a NATS Server. See <see cref="P:System.Exception.InnerException"/> for more
            details.</para></exception>
        </member>
        <member name="M:NATS.Client.IConnectionFactory.CreateConnection(System.Boolean)">
            <summary>
            Create a connection to the NATs server using the default options.
            </summary>
            <param name="reconnectOnConnect">if true, the connection will treat the initial connection as any other and attempt reconnects on failure</param>
            <returns>An <see cref="T:NATS.Client.IConnection"/> object connected to the NATS server.</returns>
            <exception cref="T:NATS.Client.NATSNoServersException">No connection to a NATS Server could be established.</exception>
            <exception cref="T:NATS.Client.NATSConnectionException"><para>A timeout occurred connecting to a NATS Server.</para>
            <para>-or-</para>
            <para>An exception was encountered while connecting to a NATS Server. See <see cref="P:System.Exception.InnerException"/> for more
            details.</para></exception>
            <seealso cref="M:NATS.Client.ConnectionFactory.GetDefaultOptions(System.String)"/>
        </member>
        <member name="M:NATS.Client.IConnectionFactory.CreateConnection(NATS.Client.Options,System.Boolean)">
            <summary>
            Create a connection to a NATS Server defined by the given options.
            </summary>
            <param name="opts">The NATS client options to use for this connection.</param>
            <param name="reconnectOnConnect">if true, the connection will treat the initial connection as any other and attempt reconnects on failure</param>
            <returns>An <see cref="T:NATS.Client.IConnection"/> object connected to the NATS server.</returns>
            <exception cref="T:NATS.Client.NATSNoServersException">No connection to a NATS Server could be established.</exception>
            <exception cref="T:NATS.Client.NATSConnectionException"><para>A timeout occurred connecting to a NATS Server.</para>
            <para>-or-</para>
            <para>An exception was encountered while connecting to a NATS Server. See <see cref="P:System.Exception.InnerException"/> for more
            details.</para></exception>
        </member>
        <member name="M:NATS.Client.IConnectionFactory.CreateSecureConnection(System.String,System.Boolean)">
            <summary>
            Attempt to connect to the NATS server using TLS referenced by <paramref name="url"/>.
            </summary>
            <remarks>
            <para><paramref name="url"/> can contain username/password semantics.
            Comma seperated arrays are also supported, e.g. urlA, urlB.</para>
            </remarks>
            <param name="url">A string containing the URL (or URLs) to the NATS Server. See the Remarks
            <param name="reconnectOnConnect">if true, the connection will treat the initial connection as any other and attempt reconnects on failure</param>
            section for more information.</param>
            <returns>An <see cref="T:NATS.Client.IConnection"/> object connected to the NATS server.</returns>
            <exception cref="T:NATS.Client.NATSNoServersException">No connection to a NATS Server could be established.</exception>
            <exception cref="T:NATS.Client.NATSConnectionException"><para>A timeout occurred connecting to a NATS Server.</para>
            <para>-or-</para>
            <para>An exception was encountered while connecting to a NATS Server. See <see cref="P:System.Exception.InnerException"/> for more
            details.</para></exception>
        </member>
        <member name="M:NATS.Client.IConnectionFactory.CreateEncodedConnection(System.Boolean)">
            <summary>
            Attempt to connect to the NATS server, with an encoded connection, using the default options.
            </summary>
            <param name="reconnectOnConnect">if true, the connection will treat the initial connection as any other and attempt reconnects on failure</param>
            <returns>An <see cref="T:NATS.Client.IEncodedConnection"/> object connected to the NATS server.</returns>
            <seealso cref="M:NATS.Client.ConnectionFactory.GetDefaultOptions(System.String)"/>
            <exception cref="T:NATS.Client.NATSNoServersException">No connection to a NATS Server could be established.</exception>
            <exception cref="T:NATS.Client.NATSConnectionException"><para>A timeout occurred connecting to a NATS Server.</para>
            <para>-or-</para>
            <para>An exception was encountered while connecting to a NATS Server. See <see cref="P:System.Exception.InnerException"/> for more
            details.</para></exception>
        </member>
        <member name="M:NATS.Client.IConnectionFactory.CreateEncodedConnection(System.String,System.Boolean)">
            <summary>
            Attempt to connect to the NATS server, with an encoded connection, referenced by <paramref name="url"/>.
            </summary>
            <remarks>
            <para><paramref name="url"/> can contain username/password semantics.
            Comma seperated arrays are also supported, e.g. urlA, urlB.</para>
            </remarks>
            <param name="url">A string containing the URL (or URLs) to the NATS Server. See the Remarks
            section for more information.</param>
            <param name="reconnectOnConnect">if true, the connection will treat the initial connection as any other and attempt reconnects on failure</param>
            <returns>An <see cref="T:NATS.Client.IEncodedConnection"/> object connected to the NATS server.</returns>
            <exception cref="T:NATS.Client.NATSNoServersException">No connection to a NATS Server could be established.</exception>
            <exception cref="T:NATS.Client.NATSConnectionException"><para>A timeout occurred connecting to a NATS Server.</para>
            <para>-or-</para>
            <para>An exception was encountered while connecting to a NATS Server. See <see cref="P:System.Exception.InnerException"/> for more
            details.</para></exception>
        </member>
        <member name="M:NATS.Client.IConnectionFactory.CreateEncodedConnection(NATS.Client.Options,System.Boolean)">
            <summary>
            Attempt to connect to the NATS server, with an encoded connection, using the given options.
            </summary>
            <param name="opts">The NATS client options to use for this connection.</param>
            <param name="reconnectOnConnect">if true, the connection will treat the initial connection as any other and attempt reconnects on failure</param>
            <returns>An <see cref="T:NATS.Client.IEncodedConnection"/> object connected to the NATS server.</returns>
            <exception cref="T:NATS.Client.NATSNoServersException">No connection to a NATS Server could be established.</exception>
            <exception cref="T:NATS.Client.NATSConnectionException"><para>A timeout occurred connecting to a NATS Server.</para>
            <para>-or-</para>
            <para>An exception was encountered while connecting to a NATS Server. See <see cref="P:System.Exception.InnerException"/> for more
            details.</para></exception>
        </member>
        <member name="T:NATS.Client.IEncodedConnection">
            <summary>
            ENCODED CONNECTIONS, WHILE STILL FUNCTIONAL, WILL NO LONGER BE SUPPORTED
            Represents a connection to a NATS Server which uses a client specified
            encoding scheme.
            </summary>
        </member>
        <member name="P:NATS.Client.IEncodedConnection.Opts">
            <summary>
            Gets the configuration options for this instance.
            </summary>
        </member>
        <member name="P:NATS.Client.IEncodedConnection.ConnectedUrl">
            <summary>
            Gets the URL of the NATS server to which this instance
            is connected, otherwise <c>null</c>.
            </summary>
        </member>
        <member name="P:NATS.Client.IEncodedConnection.ConnectedId">
            <summary>
            Gets the server ID of the NATS server to which this instance
            is connected, otherwise <c>null</c>.
            </summary>
        </member>
        <member name="P:NATS.Client.IEncodedConnection.Servers">
            <summary>
            Gets an array of known server URLs for this instance.
            </summary>
            <remarks><see cref="P:NATS.Client.IEncodedConnection.Servers"/> also includes any additional
            servers discovered after a connection has been established. If
            authentication is enabled, <see cref="P:NATS.Client.Options.User"/> or
            <see cref="P:NATS.Client.Options.Token"/> must be used when connecting with
            these URLs.</remarks>
        </member>
        <member name="P:NATS.Client.IEncodedConnection.DiscoveredServers">
            <summary>
            Gets an array of server URLs that were discovered after this
            instance connected.
            </summary>
            <remarks>If authentication is enabled, <see cref="P:NATS.Client.Options.User"/> or
            <see cref="P:NATS.Client.Options.Token"/> must be used when connecting with
            these URLs.</remarks>
        </member>
        <member name="P:NATS.Client.IEncodedConnection.LastError">
            <summary>
            Gets the last <see cref="T:System.Exception"/> encountered by this instance,
            otherwise <c>null</c>.
            </summary>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.Publish(System.String,System.Object)">
            <summary>
            Publishes the serialized value of <paramref name="obj"/> to the given <paramref name="subject"/>.
            </summary>
            <param name="subject">The subject to publish <paramref name="obj"/> to over
            the current connection.</param>
            <param name="obj">The <see cref="T:System.Object"/> to serialize and publish to the connected NATS server.</param>
            <seealso cref="M:NATS.Client.IConnection.Publish(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.Publish(System.String,System.String,System.Object)">
            <summary>
            Publishes the serialized value of <paramref name="obj"/> to the given <paramref name="subject"/>.
            </summary>
            <param name="subject">The subject to publish <paramref name="obj"/> to over
            the current connection.</param>
            <param name="reply">An optional reply subject.</param>
            <param name="obj">The <see cref="T:System.Object"/> to serialize and publish to the connected NATS server.</param>
            <seealso cref="M:NATS.Client.IConnection.Publish(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.Request(System.String,System.Object,System.Int32)">
            <summary>
            Sends a request payload and returns the deserialized response, or throws
            <see cref="T:NATS.Client.NATSTimeoutException"/> if the <paramref name="timeout"/> expires.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IEncodedConnection.Request(System.String,System.Object,System.Int32)"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.IEncodedConnection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="obj"/> to over
            the current connection.</param>
            <param name="obj">The <see cref="T:System.Object"/> to serialize and publish to the connected NATS server.</param>
            <param name="timeout">The number of milliseconds to wait.</param>
            <returns>A <see cref="T:System.Object"/> with the deserialized response from the NATS server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.Request(System.String,System.Object)">
            <summary>
            Sends a request payload and returns the deserialized response.
            </summary>
            <remarks>
            <see cref="M:NATS.Client.IEncodedConnection.Request(System.String,System.Object)"/> will create an unique inbox for this request, sharing a single
            subscription for all replies to this <see cref="T:NATS.Client.IEncodedConnection"/> instance. However, if 
            <see cref="P:NATS.Client.Options.UseOldRequestStyle"/> is set, each request will have its own underlying subscription. 
            The old behavior is not recommended as it may cause unnecessary overhead on connected NATS servers.
            </remarks>
            <param name="subject">The subject to publish <paramref name="obj"/> to over
            the current connection.</param>
            <param name="obj">The <see cref="T:System.Object"/> to serialize and publish to the connected NATS server.</param>
            <returns>A <see cref="T:System.Object"/> with the deserialized response from the NATS server.</returns>
            <seealso cref="M:NATS.Client.IConnection.Request(System.String,System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.NewInbox">
            <summary>
            Creates an inbox string which can be used for directed replies from subscribers.
            </summary>
            <remarks>
            The returned inboxes are guaranteed to be unique, but can be shared and subscribed
            to by others.
            </remarks>
            <returns>A unique inbox string.</returns>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.SubscribeAsync(System.String,System.EventHandler{NATS.Client.EncodedMessageEventArgs})">
            <summary>
            Expresses interest in the given <paramref name="subject"/> to the NATS Server, and begins delivering
            messages to the given event handler.
            </summary>
            <remarks>The <see cref="T:NATS.Client.IAsyncSubscription"/> returned will start delivering messages
            to the event handler as soon as they are received. The caller does not have to invoke
            <see cref="M:NATS.Client.IAsyncSubscription.Start"/>.</remarks>
            <param name="subject">The subject on which to listen for messages.
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <param name="handler">The <see cref="T:System.EventHandler`1"/> invoked when messages are received 
            on the returned <see cref="T:NATS.Client.IAsyncSubscription"/>.</param>
            <returns>An <see cref="T:NATS.Client.IAsyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>.</returns>
            <seealso cref="P:NATS.Client.ISubscription.Subject"/>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.SubscribeAsync(System.String,System.String,System.EventHandler{NATS.Client.EncodedMessageEventArgs})">
            <summary>
            Creates an asynchronous queue subscriber on the given <paramref name="subject"/>, and begins delivering
            messages to the given event handler.
            </summary>
            <remarks>The <see cref="T:NATS.Client.IAsyncSubscription"/> returned will start delivering messages
            to the event handler as soon as they are received. The caller does not have to invoke
            <see cref="M:NATS.Client.IAsyncSubscription.Start"/>.</remarks>
            <param name="subject">The subject on which to listen for messages.
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <param name="queue">The name of the queue group in which to participate.</param>
            <param name="handler">The <see cref="T:System.EventHandler`1"/> invoked when messages are received 
            on the returned <see cref="T:NATS.Client.IAsyncSubscription"/>.</param>
            <returns>An <see cref="T:NATS.Client.IAsyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>.</returns>
            <seealso cref="P:NATS.Client.ISubscription.Subject"/>
            <seealso cref="P:NATS.Client.ISubscription.Queue"/>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.Flush(System.Int32)">
            <summary>
            Performs a round trip to the server and returns when it receives the internal reply, or throws
            a <see cref="T:NATS.Client.NATSTimeoutException"/> exception if the NATS Server does not reply in time.
            </summary>
            <param name="timeout">The number of milliseconds to wait.</param>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.Flush">
            <summary>
            Performs a round trip to the server and returns when it receives the internal reply.
            </summary>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.FlushBuffer">
            <summary>
            Immediately flushes the underlying connection buffer if the connection is valid.
            </summary>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The <see cref="T:NATS.Client.Connection"/> is closed.</exception>
            <exception cref="T:NATS.Client.NATSException">There was an unexpected exception performing an internal NATS call while executing the
            request. See <see cref="P:System.Exception.InnerException"/> for more details.</exception>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.Close">
            <summary>
            Closes the <see cref="T:NATS.Client.IConnection"/> and all associated
            subscriptions.
            </summary>
            <seealso cref="M:NATS.Client.IEncodedConnection.IsClosed"/>
            <seealso cref="P:NATS.Client.IEncodedConnection.State"/>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.IsClosed">
            <summary>
            Returns a value indicating whether or not the <see cref="T:NATS.Client.IConnection"/>
            instance is closed.
            </summary>
            <returns><c>true</c> if and only if the <see cref="T:NATS.Client.IConnection"/> is
            closed, otherwise <c>false</c>.</returns>
            <seealso cref="M:NATS.Client.IEncodedConnection.Close"/>
            <seealso cref="P:NATS.Client.IEncodedConnection.State"/>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.IsReconnecting">
            <summary>
            Returns a value indicating whether or not the <see cref="T:NATS.Client.IConnection"/>
            is currently reconnecting.
            </summary>
            <returns><c>true</c> if and only if the <see cref="T:NATS.Client.IConnection"/> is
            reconnecting, otherwise <c>false</c>.</returns>
            <seealso cref="P:NATS.Client.IEncodedConnection.State"/>
        </member>
        <member name="P:NATS.Client.IEncodedConnection.State">
            <summary>
            Gets the current state of the <see cref="T:NATS.Client.IConnection"/>.
            </summary>
            <seealso cref="T:NATS.Client.ConnState"/>
        </member>
        <member name="P:NATS.Client.IEncodedConnection.Stats">
            <summary>
            Gets the statistics tracked for the <see cref="T:NATS.Client.IConnection"/>.
            </summary>
            <seealso cref="M:NATS.Client.IEncodedConnection.ResetStats"/>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.ResetStats">
            <summary>
            Resets the associated statistics for the <see cref="T:NATS.Client.IConnection"/>.
            </summary>
            <seealso cref="P:NATS.Client.IEncodedConnection.Stats"/>
        </member>
        <member name="P:NATS.Client.IEncodedConnection.MaxPayload">
            <summary>
            Gets the maximum size in bytes of any payload sent
            to the connected NATS Server.
            </summary>
            <seealso cref="M:NATS.Client.IEncodedConnection.Publish(System.String,System.Object)"/>
            <seealso cref="M:NATS.Client.IEncodedConnection.Publish(System.String,System.String,System.Object)"/>
            <seealso cref="M:NATS.Client.IEncodedConnection.Request(System.String,System.Object)"/>
            <seealso cref="M:NATS.Client.IEncodedConnection.Request(System.String,System.Object,System.Int32)"/>
        </member>
        <member name="P:NATS.Client.IEncodedConnection.OnSerialize">
            <summary>
            Gets or sets the method which is called to serialize
            objects sent as a message payload.
            </summary>
        </member>
        <member name="P:NATS.Client.IEncodedConnection.OnDeserialize">
            <summary>
            Gets or sets the method which is called to deserialize
            objects from a message payload.
            </summary>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.DrainAsync">
            <summary>
            Drains a connection for graceful shutdown.
            </summary>
            <remarks>
            Drain will put a connection into a drain state. All subscriptions will
            immediately be put into a drain state. Upon completion, the publishers
            will be drained and can not publish any additional messages. Upon draining
            of the publishers, the connection will be closed. Use the 
            <see cref="F:NATS.Client.Options.ClosedEventHandler"/> option to know when the connection
            has moved from draining to closed.
            </remarks>
            <seealso cref="M:NATS.Client.IEncodedConnection.Close"/>
            <returns>A task that represents the asynchronous drain operation.</returns>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.DrainAsync(System.Int32)">
            <summary>
            Drains a connection for graceful shutdown.
            </summary>
            <remarks>
            Drain will put a connection into a drain state. All subscriptions will
            immediately be put into a drain state. Upon completion, the publishers
            will be drained and can not publish any additional messages. Upon draining
            of the publishers, the connection will be closed. Use the 
            <see cref="F:NATS.Client.Options.ClosedEventHandler"/> option to know when the connection
            has moved from draining to closed.
            </remarks>
            <seealso cref="M:NATS.Client.IEncodedConnection.Close"/>
            <param name="timeout">The duration to wait before draining.</param> 
            <returns>A task that represents the asynchronous drain operation.</returns>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.Drain">
            <summary>
            Drains a connection for graceful shutdown.
            </summary>
            <remarks>
            Drain will put a connection into a drain state. All subscriptions will
            immediately be put into a drain state. Upon completion, the publishers
            will be drained and can not publish any additional messages. Upon draining
            of the publishers, the connection will be closed. Use the 
            <see cref="F:NATS.Client.Options.ClosedEventHandler"/> option to know when the connection
            has moved from draining to closed.
            </remarks>
            <seealso cref="M:NATS.Client.IEncodedConnection.Close"/>
        </member>
        <member name="M:NATS.Client.IEncodedConnection.Drain(System.Int32)">
            <summary>
            Drains a connection for graceful shutdown.
            </summary>
            <remarks>
            Drain will put a connection into a drain state. All subscriptions will
            immediately be put into a drain state. Upon completion, the publishers
            will be drained and can not publish any additional messages. Upon draining
            of the publishers, the connection will be closed. Use the 
            <see cref="F:NATS.Client.Options.ClosedEventHandler"/> option to know when the connection
            has moved from draining to closed.
            </remarks>
            <seealso cref="M:NATS.Client.IEncodedConnection.Close"/>
            <param name="timeout">The duration to wait before draining.</param> 
        </member>
        <member name="M:NATS.Client.IEncodedConnection.IsDraining">
            <summary>
            Returns a value indicating whether or not the <see cref="T:NATS.Client.IConnection"/>
            connection is draining.
            </summary>
            <returns><c>true</c> if and only if the <see cref="T:NATS.Client.IConnection"/> is
            closed, otherwise <c>false</c>.</returns>
            <seealso cref="M:NATS.Client.IEncodedConnection.Close"/>
            <seealso cref="P:NATS.Client.IEncodedConnection.State"/>
        </member>
        <member name="P:NATS.Client.IEncodedConnection.SubscriptionCount">
            <summary>
            Get the number of active subscriptions.
            </summary>
        </member>
        <member name="P:NATS.Client.Internals.Duration.Nanos">
            <summary>
            Gets the value of the duration in nanoseconds
            </summary>
        </member>
        <member name="P:NATS.Client.Internals.Duration.Millis">
            <summary>
            Gets the value of the duration in milliseconds, truncating any nano portion
            </summary>
        </member>
        <member name="M:NATS.Client.Internals.Duration.OfNanos(System.Int64)">
            <summary>
            Create a Duration from nanoseconds
            </summary>
        </member>
        <member name="M:NATS.Client.Internals.Duration.OfMillis(System.Int64)">
            <summary>
            Create a Duration from milliseconds
            </summary>
        </member>
        <member name="M:NATS.Client.Internals.Duration.OfSeconds(System.Int64)">
            <summary>
            Create a Duration from seconds
            </summary>
        </member>
        <member name="M:NATS.Client.Internals.Duration.OfMinutes(System.Int64)">
            <summary>
            Create a Duration from minutes
            </summary>
        </member>
        <member name="M:NATS.Client.Internals.Duration.OfHours(System.Int64)">
            <summary>
            Create a Duration from hours
            </summary>
        </member>
        <member name="M:NATS.Client.Internals.Duration.OfDays(System.Int64)">
            <summary>
            Create a Duration from days
            </summary>
        </member>
        <member name="M:NATS.Client.Internals.Duration.IsZero">
            <summary>
            Is the value equal to 0
            </summary>
            <returns>true if value is 0</returns>
        </member>
        <member name="M:NATS.Client.Internals.Duration.IsNegative">
            <summary>
            Is the value negative (less than zero)
            </summary>
            <returns>true if value is negative</returns>
        </member>
        <member name="M:NATS.Client.Internals.Duration.IsPositive">
            <summary>
            Is the value positive (greater than zero)
            </summary>
            <returns>true if value is positive</returns>
        </member>
        <member name="M:NATS.Client.Internals.HeaderStatusReader.#ctor(System.Byte[],System.Int32)">
            <summary>
            Parses for MsgHeader and MsgStatus
            </summary>
            <param name="bytes">A byte array of a serialized MsgStatus/MsgHeader class.</param>
            <param name="byteCount">Count of bytes in the serialized array.</param>
        </member>
        <member name="T:NATS.Client.Internals.InFlightRequest">
            <summary>
            Represents an in-flight request/reply operation.
            </summary>
            <remarks>
            This class is not used when using the legacy request/reply
            pattern (see <see cref="P:NATS.Client.Options.UseOldRequestStyle"/>).
            </remarks>
        </member>
        <member name="M:NATS.Client.Internals.InFlightRequest.#ctor(System.String,System.Threading.CancellationToken,System.Int32,System.Action{System.String})">
            <summary>
            Initializes a new instance of <see cref="T:NATS.Client.Internals.InFlightRequest"/> class.
            </summary>
            <param name="id">The id associated with the request.</param>
            <param name="token">The cancellation token used to cancel the request.</param>
            <param name="timeout">A timeout (ms) after which the request is canceled.</param>
            <param name="onCompleted">The delegate that will be executed after the request ended.</param>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">Thrown if the request is cancelled by <paramref name="token"/> before receiving a response.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">Thrown if the request is cancelled because <paramref name="timeout"/> period has elapsed before receiving a response.</exception>
        </member>
        <member name="M:NATS.Client.Internals.InFlightRequest.Dispose">
            <summary>
            Releases all resources used by the current instance of the <see cref="T:NATS.Client.Internals.InFlightRequest"/>
            class and invokes the <c>onCompleted</c> delegate.
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.MaxPullSize">
            <summary>
            Maximum Pull Size for Pull subscriptions.
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.MaxHistoryPerKey">
            <summary>
            The Max History Per Key KV key
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.PrefixDollarJsDot">
            <summary>
            The standard JetStream Prefix prefix 
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.PrefixApiDot">
            <summary>
            The standard JetStream Prefix suffix 
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.PrefixApi">
            <summary>
            The standard JetStream Prefix suffix without the dot at the end 
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.DefaultApiPrefix">
            <summary>
            The standard JetStream Prefix
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.JsAckSubjectPrefix">
            <summary>
            The standard JetStream API Prefix
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.JsapiAccountInfo">
            <summary>
            JSAPI_ACCOUNT_INFO is for obtaining general information about JetStream.
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.JsapiConsumerCreate">
            <summary>
            JSAPI_CONSUMER_CREATE is used to create consumers.
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.JsapiDurableCreate">
            <summary>
            JSAPI_DURABLE_CREATE is used to create durable consumers.
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.JsapiConsumerInfo">
            <summary>
            JSAPI_CONSUMER_INFO is used to create consumers.
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.JsapiConsumerMsgNext">
            <summary>
            JSAPI_CONSUMER_MSG_NEXT is the prefix for the request next message(s) for a consumer in worker/pull mode.
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.JsapiConsumerDelete">
            <summary>
            JSAPI_CONSUMER_DELETE is used to delete consumers.
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.JsapiConsumerPause">
            <summary>
            JSAPI_CONSUMER_PAUSE is used to delete consumers.
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.JsapiConsumerNames">
            <summary>
            JSAPI_CONSUMER_NAMES is used to return a list of consumer names
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.JsapiConsumerList">
            <summary>
            JSAPI_CONSUMER_LIST is used to return all detailed consumer information
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.JsapiStreamNames">
            <summary>
            JSAPI_STREAMS can lookup a stream by subject.
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.JsapiStreamCreate">
            <summary>
            JSAPI_STREAM_CREATE is the endpoint to create new streams.
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.JsapiStreamInfo">
            <summary>
            JSAPI_STREAM_INFO is the endpoint to get information on a stream.
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.JsapiStreamUpdate">
            <summary>
            JSAPI_STREAM_UPDATE is the endpoint to update existing streams.
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.JsapiStreamDelete">
            <summary>
            JSAPI_STREAM_DELETE is the endpoint to delete streams.
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.JsapiStreamPurge">
            <summary>
            JSAPI_STREAM_PURGE is the endpoint to purge streams.
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.JsapiStreamList">
            <summary>
            JSAPI_STREAM_LIST is the endpoint that will return all detailed stream information
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.JsapiMsgGet">
            <summary>
            JSAPI_MSG_GET is the endpoint to get a message.
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.JsapiDirectGet">
            <summary>
            JSAPI_DIRECT_GET is the endpoint to directly get a message.
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.JsapiMsgDelete">
            <summary>
            JSAPI_MSG_DELETE is the endpoint to remove a message.
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.MsgIdHeader">
            <summary>
            JetStream expected message ID header name.
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.ExpStreamHeader">
            <summary>
            JetStream expected stream header name.
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.ExpLastSeqHeader">
            <summary>
            JetStream expected last sequence header name.
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.ExpLastIdHeader">
            <summary>
            JetStream expected last message ID header Name.
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JetStreamConstants.ExpLastSubjectSeqHeader">
            <summary>
            JetStream expected last sequence header name.
            </summary>
        </member>
        <member name="F:NATS.Client.Internals.JwtUtils.NatsUserJwtFormat">
            <summary>
            Format string with `%s` placeholder for the JWT token followed
            by the user NKey seed. This can be directly used as such:
            <pre>
            NKey userKey = NKey.createUser(new SecureRandom());
            NKey signingKey = loadFromSecretStore();
            string jwt = IssueUserJWT(signingKey, accountId, userKey.EncodedPublicKey);
            string.format(JwtUtils.NatsUserJwtFormat, jwt, userKey.EncodedSeed);
            </pre>
            </summary>
        </member>
        <member name="M:NATS.Client.Internals.JwtUtils.IssueUserJWT(NATS.Client.NkeyPair,System.String,System.String)">
            <summary>
            Issue a user JWT from a scoped signing key. See <a href="https://docs.nats.io/nats-tools/nsc/signing_keys">Signing Keys</a>
            </summary>
            <param name="signingKey">a mandatory account nkey pair to sign the generated jwt.</param>
            <param name="accountId">a mandatory public account nkey. Will throw error when not set or not account nkey.</param>
            <param name="publicUserKey">a mandatory public user nkey. Will throw error when not set or not user nkey.</param>
            <returns>a JWT</returns>
        </member>
        <member name="M:NATS.Client.Internals.JwtUtils.IssueUserJWT(NATS.Client.NkeyPair,System.String,System.String,System.String)">
            <summary>
            Issue a user JWT from a scoped signing key. See <a href="https://docs.nats.io/nats-tools/nsc/signing_keys">Signing Keys</a>
            </summary>
            <param name="signingKey">a mandatory account nkey pair to sign the generated jwt.</param>
            <param name="accountId">a mandatory public account nkey. Will throw error when not set or not account nkey.</param>
            <param name="publicUserKey">a mandatory public user nkey. Will throw error when not set or not user nkey.</param>
            <param name="name">optional human-readable name. When absent, default to publicUserKey.</param>
            <returns>a JWT</returns>
        </member>
        <member name="M:NATS.Client.Internals.JwtUtils.IssueUserJWT(NATS.Client.NkeyPair,System.String,System.String,System.String,NATS.Client.Internals.Duration,System.String[])">
            <summary>
            Issue a user JWT from a scoped signing key. See <a href="https://docs.nats.io/nats-tools/nsc/signing_keys">Signing Keys</a>
            </summary>
            <param name="signingKey">a mandatory account nkey pair to sign the generated jwt.</param>
            <param name="accountId">a mandatory public account nkey. Will throw error when not set or not account nkey.</param>
            <param name="publicUserKey">a mandatory public user nkey. Will throw error when not set or not user nkey.</param>
            <param name="name">optional human-readable name. When absent, default to publicUserKey.</param>
            <param name="expiration">optional but recommended duration, when the generated jwt needs to expire. If not set, JWT will not expire.</param>
            <param name="tags">optional list of tags to be included in the JWT.</param>
            <returns>a JWT</returns>
        </member>
        <member name="M:NATS.Client.Internals.JwtUtils.IssueUserJWT(NATS.Client.NkeyPair,System.String,System.String,System.String,NATS.Client.Internals.Duration,System.String[],System.Int64)">
            <summary>
            Issue a user JWT from a scoped signing key. See <a href="https://docs.nats.io/nats-tools/nsc/signing_keys">Signing Keys</a>
            </summary>
            <param name="signingKey">a mandatory account nkey pair to sign the generated jwt.</param>
            <param name="accountId">a mandatory public account nkey. Will throw error when not set or not account nkey.</param>
            <param name="publicUserKey">a mandatory public user nkey. Will throw error when not set or not user nkey.</param>
            <param name="name">optional human-readable name. When absent, default to publicUserKey.</param>
            <param name="expiration">optional but recommended duration, when the generated jwt needs to expire. If not set, JWT will not expire.</param>
            <param name="tags">optional list of tags to be included in the JWT.</param>
            <param name="issuedAt">the current epoch seconds.</param>
            <returns>a JWT</returns>
        </member>
        <member name="M:NATS.Client.Internals.JwtUtils.IssueUserJWT(NATS.Client.NkeyPair,System.String,System.String,System.String,NATS.Client.Internals.Duration,System.String[],System.Int64,System.String)">
            <summary>
            Issue a user JWT from a scoped signing key. See <a href="https://docs.nats.io/nats-tools/nsc/signing_keys">Signing Keys</a>
            </summary>
            <param name="signingKey">a mandatory account nkey pair to sign the generated jwt.</param>
            <param name="accountId">a mandatory public account nkey. Will throw error when not set or not account nkey.</param>
            <param name="publicUserKey">a mandatory public user nkey. Will throw error when not set or not user nkey.</param>
            <param name="name">optional human-readable name. When absent, default to publicUserKey.</param>
            <param name="expiration">optional but recommended duration, when the generated jwt needs to expire. If not set, JWT will not expire.</param>
            <param name="tags">optional list of tags to be included in the JWT.</param>
            <param name="issuedAt">the current epoch seconds.</param>
            <param name="audience">optional audience</param>
            <returns>a JWT</returns>
        </member>
        <member name="M:NATS.Client.Internals.JwtUtils.IssueUserJWT(NATS.Client.NkeyPair,System.String,System.String,NATS.Client.Internals.Duration,System.Int64,System.String,NATS.Client.Internals.UserClaim)">
            <summary>
            Issue a user JWT from a scoped signing key. See <a href="https://docs.nats.io/nats-tools/nsc/signing_keys">Signing Keys</a>
            </summary>
            <param name="signingKey">a mandatory account nkey pair to sign the generated jwt.</param>
            <param name="publicUserKey">a mandatory public user nkey. Will throw error when not set or not user nkey.</param>
            <param name="name">optional human-readable name. When absent, default to publicUserKey.</param>
            <param name="expiration">optional but recommended duration, when the generated jwt needs to expire. If not set, JWT will not expire.</param>
            <param name="issuedAt">the current epoch seconds.</param>
            <param name="audience">optional audience</param>
            <param name="nats">the user claim</param>
            <returns>a JWT</returns>
        </member>
        <member name="M:NATS.Client.Internals.JwtUtils.issueJWT(NATS.Client.NkeyPair,System.String,System.String,NATS.Client.Internals.Duration,System.Int64,System.String,System.String,NATS.Client.JetStream.JsonSerializable)">
            <summary>
            Issue a JWT
            </summary>
            <param name="signingKey">account nkey pair to sign the generated jwt.</param>
            <param name="publicUserKey">a mandatory public user nkey.</param>
            <param name="name">optional human-readable name.</param>
            <param name="expiration">optional but recommended duration, when the generated jwt needs to expire. If not set, JWT will not expire.</param>
            <param name="issuedAt">the current epoch seconds.</param>
            <param name="accSigningKeyPub">the account signing key</param>
            <param name="audience">optional audience</param>
            <param name="nats">the generic nats claim</param>
            <returns>a JWT</returns>
        </member>
        <member name="M:NATS.Client.Internals.JwtUtils.GetClaimBody(System.String)">
            <summary>
            Get the claim body from a JWT
            </summary>
            <param name="jwt">the encoded jwt</param>
            <returns>the claim body json</returns>
        </member>
        <member name="M:NATS.Client.Internals.Nuid.#ctor(System.Security.Cryptography.RandomNumberGenerator,System.Nullable{System.UInt64},System.Nullable{System.UInt32})">
            <summary>
            Initializes a new instance of <see cref="T:NATS.Client.Internals.Nuid"/>.
            </summary>
            <remarks>
            This constructor is intended to be used from unit tests and
            benchmarks only. For production use use <see cref="M:NATS.Client.Internals.Nuid.#ctor"/> instead.
            </remarks>
            <param name="rng">A cryptographically strong random number generator.</param>
            <param name="sequential">The initial sequential.</param>
            <param name="increment">The initial increment.</param>
        </member>
        <member name="M:NATS.Client.Internals.Nuid.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:NATS.Client.Internals.Nuid"/>.
            </summary>
        </member>
        <member name="M:NATS.Client.Internals.Nuid.GetNext">
            <summary>
            Returns a random Nuid string.
            </summary>
            <remarks>
            A Nuid is a 132 bit pseudo-random integer encoded as a base64 string
            </remarks>
            <returns>The Nuid</returns>
        </member>
        <member name="M:NATS.Client.Internals.Nuid.GetNextSequence">
            <summary>
            Returns the sequence portion of a random Nuid string.
            </summary>
            <remarks>
            A Nuid is a 132 bit pseudo-random integer encoded as a base64 string
            </remarks>
            <returns>The Nuid</returns>
        </member>
        <member name="M:NATS.Client.Internals.Nuid.NextGlobal">
            <summary>
            Returns the next NUID from the global instance.
            </summary>
        </member>
        <member name="M:NATS.Client.Internals.Nuid.NextGlobalSequence">
            <summary>
            Returns the sequence portion from the next NUID from the global instance.
            </summary>
        </member>
        <member name="F:NATS.Client.Base32.InByteSize">
            <summary>
            Size of the regular byte in bits
            </summary>
        </member>
        <member name="F:NATS.Client.Base32.OutByteSize">
            <summary>
            Size of converted byte in bits
            </summary>
        </member>
        <member name="F:NATS.Client.Base32.Base32Alphabet">
            <summary>
            Alphabet
            </summary>
        </member>
        <member name="M:NATS.Client.Base32.ToBase32String(System.Byte[])">
            <summary>
            Convert byte array to Base32 format
            </summary>
            <param name="bytes">An array of bytes to convert to Base32 format</param>
            <returns>Returns a string representing byte array</returns>
        </member>
        <member name="M:NATS.Client.Base32.FromBase32String(System.String)">
            <summary>
            Convert base32 string to array of bytes
            </summary>
            <param name="base32String">Base32 string to convert</param>
            <returns>Returns a byte array converted from the string</returns>
        </member>
        <member name="T:NATS.Client.IStatistics">
            <summary>
            Tracks various statistics received and sent on an <see cref="T:NATS.Client.IConnection"/>.
            </summary>
        </member>
        <member name="P:NATS.Client.IStatistics.InMsgs">
            <summary>
            Gets the number of inbound messages received.
            </summary>
        </member>
        <member name="P:NATS.Client.IStatistics.OutMsgs">
            <summary>
            Gets the number of messages sent.
            </summary>
        </member>
        <member name="P:NATS.Client.IStatistics.InBytes">
            <summary>
            Gets the number of incoming bytes.
            </summary>
        </member>
        <member name="P:NATS.Client.IStatistics.OutBytes">
            <summary>
            Gets the outgoing number of bytes.
            </summary>
        </member>
        <member name="P:NATS.Client.IStatistics.Reconnects">
            <summary>
            Gets the number of reconnections.
            </summary>
        </member>
        <member name="T:NATS.Client.ISubscription">
            <summary>
            Represents interest in a NATS topic.
            </summary>
            <remarks>
            <para>Subscriptions represent interest in a topic on a NATS Server or cluster of
            NATS Servers. Subscriptions can be exact or include wildcards. A subscriber can
            process a NATS message synchronously (<see cref="T:NATS.Client.ISyncSubscription"/>) or asynchronously
            (<see cref="T:NATS.Client.IAsyncSubscription"/>).</para>
            </remarks>
            <seealso cref="T:NATS.Client.ISyncSubscription"/>
            <seealso cref="T:NATS.Client.IAsyncSubscription"/>
        </member>
        <member name="P:NATS.Client.ISubscription.Sid">
            <summary>
            the id associated with the subscription, used by the connection when processing an incoming
            </summary>
        </member>
        <member name="P:NATS.Client.ISubscription.Subject">
            <summary>
            Gets the subject for this subscription.
            </summary>
            <remarks><para>Subject names, including reply subject (INBOX) names, are case-sensitive
            and must be non-empty alphanumeric strings with no embedded whitespace, and optionally
            token-delimited using the dot character (<c>.</c>), e.g.: <c>FOO</c>, <c>BAR</c>,
            <c>foo.BAR</c>, <c>FOO.BAR</c>, and <c>FOO.BAR.BAZ</c> are all valid subject names, while:
            <c>FOO. BAR</c>, <c>foo. .bar</c> and <c>foo..bar</c> are <em>not</em> valid subject names.</para>
            <para>NATS supports the use of wildcards in subject subscriptions.</para>
            <list>
            <item>The asterisk character (<c>*</c>) matches any token at any level of the subject.</item>
            <item>The greater than symbol (<c>&gt;</c>), also known as the <em>full wildcard</em>, matches
            one or more tokens at the tail of a subject, and must be the last token. The wildcard subject
            <c>foo.&gt;</c> will match <c>foo.bar</c> or <c>foo.bar.baz.1</c>, but not <c>foo</c>.</item>
            <item>Wildcards must be separate tokens (<c>foo.*.bar</c> or <c>foo.&gt;</c> are syntactically
            valid; <c>foo*.bar</c>, <c>f*o.b*r</c> and <c>foo&gt;</c> are not).</item>
            </list>
            <para>For example, the wildcard subscriptions <c>foo.*.quux</c> and <c>foo.&gt;</c> both match
            <c>foo.bar.quux</c>, but only the latter matches <c>foo.bar.baz</c>. With the full wildcard,
            it is also possible to express interest in every subject that may exist in NATS (<c>&gt;</c>).</para>
            </remarks>
        </member>
        <member name="P:NATS.Client.ISubscription.Queue">
            <summary>
            Gets the optional queue group name.
            </summary>
            <remarks>
            <para>If present, all subscriptions with the same name will form a distributed queue, and each message will only
            be processed by one member of the group. Although queue groups have multiple subscribers,
            each message is consumed by only one.</para>
            </remarks>
        </member>
        <member name="P:NATS.Client.ISubscription.Connection">
            <summary>
            Gets the <see cref="T:NATS.Client.Connection"/> associated with this instance.
            </summary>
        </member>
        <member name="P:NATS.Client.ISubscription.IsValid">
            <summary>
            Gets a value indicating whether or not the <see cref="T:NATS.Client.ISubscription"/> is still valid.
            </summary>
        </member>
        <member name="M:NATS.Client.ISubscription.Unsubscribe">
            <summary>
            Removes interest in the <see cref="P:NATS.Client.ISubscription.Subject"/>.
            </summary>
        </member>
        <member name="M:NATS.Client.ISubscription.AutoUnsubscribe(System.Int32)">
            <summary>
            Issues an automatic call to <see cref="M:NATS.Client.ISubscription.Unsubscribe"/> when <paramref name="max"/> messages have been
            received.
            </summary>
            <remarks>This can be useful when sending a request to an unknown number of subscribers.
            <see cref="P:NATS.Client.ISubscription.Connection"/>'s Request methods use this functionality.</remarks>
            <param name="max">The maximum number of messages to receive on the subscription before calling
            <see cref="M:NATS.Client.ISubscription.Unsubscribe"/>. Values less than or equal to zero (<c>0</c>) unsubscribe immediately.</param>
        </member>
        <member name="P:NATS.Client.ISubscription.QueuedMessageCount">
            <summary>
            Gets the number of messages remaining in the delivery queue.
            </summary>
        </member>
        <member name="M:NATS.Client.ISubscription.SetPendingLimits(System.Int64,System.Int64)">
            <summary>
            Sets the limits for pending messages and bytes for this instance.
            </summary>
            <remarks>Zero (<c>0</c>) is not allowed. Negative values indicate that the
            given metric is not limited.</remarks>
            <param name="messageLimit">The maximum number of pending messages.</param>
            <param name="bytesLimit">The maximum number of pending bytes of payload.</param>
        </member>
        <member name="P:NATS.Client.ISubscription.PendingByteLimit">
            <summary>
            Gets or sets the maximum allowed count of pending bytes.
            </summary>
            <value>The limit must not be zero (<c>0</c>). Negative values indicate there is no
            limit on the number of pending bytes.</value>
        </member>
        <member name="P:NATS.Client.ISubscription.PendingMessageLimit">
            <summary>
            Gets or sets the maximum allowed count of pending messages.
            </summary>
            <value>The limit must not be zero (<c>0</c>). Negative values indicate there is no
            limit on the number of pending messages.</value>
        </member>
        <member name="M:NATS.Client.ISubscription.GetPending(System.Int64@,System.Int64@)">
            <summary>
            Returns the pending byte and message counts.
            </summary>
            <param name="pendingBytes">When this method returns, <paramref name="pendingBytes"/> will
            contain the count of bytes not yet processed on the <see cref="T:NATS.Client.ISubscription"/>.</param>
            <param name="pendingMessages">When this method returns, <paramref name="pendingMessages"/> will
            contain the count of messages not yet processed on the <see cref="T:NATS.Client.ISubscription"/>.</param>
        </member>
        <member name="P:NATS.Client.ISubscription.PendingBytes">
            <summary>
            Gets the number of bytes not yet processed on this instance.
            </summary>
        </member>
        <member name="P:NATS.Client.ISubscription.PendingMessages">
            <summary>
            Gets the number of messages not yet processed on this instance.
            </summary>
        </member>
        <member name="M:NATS.Client.ISubscription.GetMaxPending(System.Int64@,System.Int64@)">
            <summary>
            Returns the maximum number of pending bytes and messages during the life of the <see cref="T:NATS.Client.Subscription"/>.
            </summary>
            <param name="maxPendingBytes">When this method returns, <paramref name="maxPendingBytes"/>
            will contain the current maximum pending bytes.</param>
            <param name="maxPendingMessages">When this method returns, <paramref name="maxPendingBytes"/>
            will contain the current maximum pending messages.</param>
        </member>
        <member name="P:NATS.Client.ISubscription.MaxPendingBytes">
            <summary>
            Gets the maximum number of pending bytes seen so far by this instance.
            </summary>
        </member>
        <member name="P:NATS.Client.ISubscription.MaxPendingMessages">
            <summary>
            Gets the maximum number of messages seen so far by this instance.
            </summary>
        </member>
        <member name="M:NATS.Client.ISubscription.ClearMaxPending">
            <summary>
            Clears the maximum pending bytes and messages statistics.
            </summary>
        </member>
        <member name="P:NATS.Client.ISubscription.Delivered">
            <summary>
            Gets the number of delivered messages for this instance.
            </summary>
        </member>
        <member name="P:NATS.Client.ISubscription.Dropped">
            <summary>
            Gets the number of known dropped messages for this instance.
            </summary>
            <remarks>
            This will correspond to the messages dropped by violations of
            <see cref="P:NATS.Client.ISubscription.PendingByteLimit"/> and/or <see cref="P:NATS.Client.ISubscription.PendingMessageLimit"/>.
            If the NATS server declares the connection a slow consumer, the count
            may not be accurate.
            </remarks>
        </member>
        <member name="M:NATS.Client.ISubscription.Drain">
            <summary>
            Drains a subscription for gracefully unsubscribing.
            </summary>
            <remarks>
            This method unsubscribes the subscriber and drains all
            remaining messages.
            </remarks>
            <seealso cref="M:NATS.Client.ISubscription.Unsubscribe"/>
        </member>
        <member name="M:NATS.Client.ISubscription.Drain(System.Int32)">
            <summary>
            Drains a subscription for gracefully unsubscribing.
            </summary>
            <param name="timeout">The duration in milliseconds to wait while draining.</param>    
            /// <seealso cref="M:NATS.Client.ISubscription.Unsubscribe"/>
        </member>
        <member name="M:NATS.Client.ISubscription.DrainAsync">
            <summary>
            Drains a subscription for gracefully unsubscribing.
            </summary>
            <remarks>
            This method unsubscribes the subscriber and drains all
            remaining messages.
            </remarks>
            <seealso cref="M:NATS.Client.ISubscription.Unsubscribe"/>
            <returns>A task that represents the asynchronous drain operation.</returns>
        </member>
        <member name="M:NATS.Client.ISubscription.DrainAsync(System.Int32)">
            <summary>
            Drains a subscription for gracefully unsubscribing.
            </summary>
            <param name="timeout">The duration in milliseconds to wait while draining.</param>    
            /// <seealso cref="M:NATS.Client.ISubscription.Unsubscribe"/>
            <returns>A task that represents the asynchronous drain operation.</returns>
        </member>
        <member name="T:NATS.Client.ISyncSubscription">
            <summary>
            <see cref="T:NATS.Client.ISyncSubscription"/> provides messages for a subject through calls
            to <see cref="M:NATS.Client.ISyncSubscription.NextMessage"/> and <see cref="M:NATS.Client.ISyncSubscription.NextMessage(System.Int32)"/>.
            </summary>
        </member>
        <member name="M:NATS.Client.ISyncSubscription.NextMessage">
            <summary>
            Returns the next <see cref="T:NATS.Client.Msg"/> available to a synchronous
            subscriber, blocking until one is available.
            </summary>
            <returns>The next <see cref="T:NATS.Client.Msg"/> available to a subscriber.</returns>
        </member>
        <member name="M:NATS.Client.ISyncSubscription.NextMessage(System.Int32)">
            <summary>
            Returns the next <see cref="T:NATS.Client.Msg"/> available to a synchronous
            subscriber, or block up to a given timeout until the next one is available.
            Timeout less than zero means block until a message is available
            </summary>
            <param name="timeout">The amount of time, in milliseconds, to wait for
            the next message.</param>
            <returns>The next <see cref="T:NATS.Client.Msg"/> available to a subscriber.</returns>
            <exception cref="T:NATS.Client.NATSTimeoutException">When the call times out</exception>
        </member>
        <member name="P:NATS.Client.JetStream.AccountLimits.MaxMemory">
            <summary>
            The maximum amount of Memory storage Stream Messages may consume.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.AccountLimits.MaxStorage">
            <summary>
            The maximum amount of File storage Stream Messages may consume.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.AccountLimits.MaxStreams">
            <summary>
            The maximum number of Streams an account can create.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.AccountLimits.MaxConsumers">
            <summary>
            The maximum number of Consumers an account can create.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.AccountLimits.MaxAckPending">
            <summary>
            The maximum number of outstanding ACKs any consumer may configure.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.AccountLimits.MemoryMaxStreamBytes">
            <summary>
            The maximum size any single memory stream may be.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.AccountLimits.StorageMaxStreamBytes">
            <summary>
            The maximum size any single storage based stream may be.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.AccountLimits.MaxBytesRequired">
            <summary>
            Indicates if streams created in this account requires the max_bytes property set.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.AccountStatistics.Memory">
            <summary>
            Gets the amount of memory storage used by the JetStream deployment.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.AccountStatistics.Storage">
            <summary>
            Gets the amount of file storage used by the JetStream deployment.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.AccountStatistics.Streams">
            <summary>
            Gets the number of streams used by the JetStream deployment.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.AccountStatistics.Consumers">
            <summary>
            Gets the number of consumers used by the JetStream deployment.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.AccountStatistics.Limits">
            <summary>
            Gets the Account Limits object. If the account has tiers,
            the object will be present but all values will be zero.
            See the Account Limits for the specific tier.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.AccountStatistics.Domain">
            <summary>
            Gets the account domain
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.AccountStatistics.Api">
            <summary>
            Gets the account api stats
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.AccountTier.Memory">
            <summary>
            Memory Storage being used for Stream Message storage in this tier.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.AccountTier.Storage">
            <summary>
            File Storage being used for Stream Message storage in this tier.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.AccountTier.Streams">
            <summary>
            Number of active streams in this tier.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.AccountTier.Consumers">
            <summary>
            Number of active consumers in this tier.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.AccountTier.Limits">
            <summary>
            The limits of this tier.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.ApiStats.Total">
            <summary>
            Total number of API requests received for this account.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.ApiStats.Errors">
            <summary>
            API requests that resulted in an error response.
            </summary>
        </member>
        <member name="T:NATS.Client.JetStream.BaseConsumeOptions">
            <summary>
            Base Consume Options are provided to customize the way the consume and 
            fetch operate. It is the base class for ConsumeOptions and FetchConsumeOptions.
            </summary>
        </member>
        <member name="F:NATS.Client.JetStream.BaseConsumeOptions.DefaultMessageCount">
            <summary>500</summary>
        </member>
        <member name="F:NATS.Client.JetStream.BaseConsumeOptions.DefaultMessageCountWhenBytes">
            <summary>1_000_000</summary>
        </member>
        <member name="F:NATS.Client.JetStream.BaseConsumeOptions.DefaultThresholdPercent">
            <summary>25</summary>
        </member>
        <member name="F:NATS.Client.JetStream.BaseConsumeOptions.DefaultExpiresInMillis">
            <summary>30_000</summary>
        </member>
        <member name="F:NATS.Client.JetStream.BaseConsumeOptions.MinExpiresMills">
            <summary>1000</summary>
        </member>
        <member name="F:NATS.Client.JetStream.BaseConsumeOptions.MaxHearbeatMillis">
            <summary>30_000</summary>
        </member>
        <member name="F:NATS.Client.JetStream.BaseConsumeOptions.MaxIdleHeartbeatPercent">
            <summary>50</summary>
        </member>
        <member name="M:NATS.Client.JetStream.BaseConsumeOptions.BaseConsumeOptionsBuilder`2.WithExpiresIn(System.Int32)">
            <summary>
            In Fetch, sets the maximum amount of time to wait to reach the batch size or max byte.
            In Consume, sets the maximum amount of time for an individual pull to be open
            before issuing a replacement pull.
            Zero or less will default to  <inheritdoc cref="F:NATS.Client.JetStream.BaseConsumeOptions.DefaultExpiresInMillis"/>,
            otherwise, cannot be less than <inheritdoc cref="F:NATS.Client.JetStream.BaseConsumeOptions.MinExpiresMills"/>.
            </summary>
            <param name="expiresInMillis">the expiration time in milliseconds</param>
            <returns>the builder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.BaseConsumeOptions.BaseConsumeOptionsBuilder`2.WithThresholdPercent(System.Int32)">
            <summary>
            Set the threshold percent of max bytes (if max bytes is specified) or messages
            that will trigger issuing pull requests to keep messages flowing.
            <para>Only applies to endless consumes</para>
            <para>For instance if the batch size is 100 and the re-pull percent is 25,
            the first pull will be for 100, and then when 25 messages have been received
            another 75 will be requested, keeping the number of messages in transit always at 100.</para>
            <para>Must be between 1 and 100 inclusive.
            Less than 1 will assume the default of <inheritdoc cref="F:NATS.Client.JetStream.BaseConsumeOptions.DefaultThresholdPercent"/>.
            Greater than 100 will assume 100.</para>
            </summary>
            <param name="thresholdPercent">the threshold percent</param>
            <returns>the builder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.BaseConsumeOptions.BaseConsumeOptionsBuilder`2.Build">
            <summary>
            Build the options.
            </summary>
            <returns>the built options</returns>
        </member>
        <member name="T:NATS.Client.JetStream.ConsumeOptions">
            <summary>
            Consume Options are provided to customize the consume operation. 
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.ConsumeOptions.BatchSize">
            <summary>
            The initial batch size in messages.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.ConsumeOptions.BatchBytes">
            <summary>
            The initial batch size in bytes.
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumeOptions.Builder">
            <summary>
            Gets the ConsumeOptions builder.
            </summary>
            <returns>The builder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumeOptions.ConsumeOptionsBuilder.WithBatchSize(System.Int32)">
            <summary>
            Set the initial batch size in messages and remove any previously set batch byte constraint.
            <para>Less than 1 will assume the default of <inheritdoc cref="F:NATS.Client.JetStream.BaseConsumeOptions.DefaultMessageCount"/> when bytes are not specified.
            When bytes are specified, the batch messages size is set to prioritize the batch byte amount.</para>
            </summary>
            <param name="batchSize">the batch size in messages</param>
            <returns>the builder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumeOptions.ConsumeOptionsBuilder.WithBatchBytes(System.Int64)">
            <summary>
            Set the initial batch size in bytes and remove any previously set batch message constraint.
            Less than 1 removes any previously set batch byte constraint.
            <para>When setting bytes to non-zero, the batch messages size is set to prioritize the batch byte size.</para>
            <para>Also, it is important to set the byte size greater than your largest message payload, plus some amount
            to account for overhead, otherwise the consume process will stall if there are no messages that fit the criteria.</para>
            See <see cref="P:NATS.Client.Msg.ConsumeByteCount"/>
            </summary>
            <param name="batchBytes">the batch size in bytes</param>
            <returns>the builder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumeOptions.ConsumeOptionsBuilder.Build">
            <summary>
            Build the ConsumeOptions
            </summary>
            <returns>a ConsumeOptions instance</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithDescription(System.String)">
            <summary>
            Sets the description.
            </summary>
            <param name="description">the description</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithDurable(System.String)">
            <summary>
            Sets the name of the durable consumer.
            Null or empty clears the field
            </summary>
            <param name="durable">name of the durable consumer.</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithName(System.String)">
            <summary>
            Sets the name of the consumer.
            Null or empty clears the field
            </summary>
            <param name="name">name of the consumer.</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithDeliverPolicy(System.Nullable{NATS.Client.JetStream.DeliverPolicy})">
            <summary>
            Sets the delivery policy of the ConsumerConfiguration.
            </summary>
            <param name="policy">the delivery policy.</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithDeliverSubject(System.String)">
            <summary>
            Sets the subject to deliver messages to.
            </summary>
            <param name="deliverSubject">the delivery subject.</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithDeliverGroup(System.String)">
            <summary>
            Sets the group to deliver messages to.
            </summary>
            <param name="group">the delivery group.</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithStartSequence(System.Nullable{System.UInt64})">
            <summary>
            Sets the start sequence of the ConsumerConfiguration.
            </summary>
            <param name="sequence">the start sequence</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithStartTime(System.DateTime)">
            <summary>
            Sets the start time of the ConsumerConfiguration.
            </summary>
            <param name="startTime">the start time</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithPauseUntil(System.Nullable{System.DateTime})">
            <summary>
            Sets the time to pause the consumer until
            </summary>
            <param name="pauseUntil">the time to pause the consumer until</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithAckPolicy(System.Nullable{NATS.Client.JetStream.AckPolicy})">
            <summary>
            Sets the acknowledgement policy of the ConsumerConfiguration.
            </summary>
            <param name="policy">the acknowledgement policy.</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithAckWait(NATS.Client.Internals.Duration)">
            <summary>
            Sets the acknowledgement wait duration of the ConsumerConfiguration.
            </summary>
            <param name="timeout">the wait timeout as a duration</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithAckWait(System.Int64)">
            <summary>
            Sets the acknowledgement wait duration of the ConsumerConfiguration.
            </summary>
            <param name="timeoutMillis">the wait timeout as millis</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithMaxDeliver(System.Nullable{System.Int64})">
            <summary>
            Sets the maximum delivery amount of the ConsumerConfiguration.
            </summary>
            <param name="maxDeliver">the maximum delivery amount</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithFilterSubject(System.String)">
            <summary>
            Sets the filter subject of the ConsumerConfiguration.
            Replaces any other filter subjects set in the builder 
            </summary>
            <param name="filterSubject">the filter subject</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithFilterSubjects(System.String[])">
            <summary>
            Sets the filter subject of the ConsumerConfiguration.
            Replaces any other filter subjects set in the builder 
            </summary>
            <param name="filterSubjects">one or more filter subjects</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithFilterSubjects(System.Collections.Generic.IList{System.String})">
            <summary>
            Sets the filter subject of the ConsumerConfiguration.
            Replaces any other filter subjects set in the builder 
            </summary>
            <param name="filterSubjects">one or more filter subjects</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithReplayPolicy(System.Nullable{NATS.Client.JetStream.ReplayPolicy})">
            <summary>
            Sets the replay policy of the ConsumerConfiguration.
            </summary>
            <param name="policy">the replay policy.</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithSampleFrequency(System.String)">
            <summary>
            Sets the sample frequency of the ConsumerConfiguration.
            </summary>
            <param name="frequency">the frequency</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithRateLimit(System.Nullable{System.Int64})">
            <summary>
            Set the rate limit of the ConsumerConfiguration.
            </summary>
            <param name="bitsPerSecond">bits per second to deliver</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithRateLimitBps(System.Nullable{System.UInt64})">
            <summary>
            Set the rate limit of the ConsumerConfiguration.
            </summary>
            <param name="bitsPerSecond">bits per second to deliver</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithMaxAckPending(System.Nullable{System.Int64})">
            <summary>
            Sets the maximum ack pending.
            </summary>
            <param name="maxAckPending">maximum pending acknowledgements.</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithIdleHeartbeat(NATS.Client.Internals.Duration)">
            <summary>
            Sets the idle heart beat wait time.
            </summary>
            <param name="idleHeartbeat">the wait timeout as a Duration</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithIdleHeartbeat(System.Int64)">
            <summary>
            Sets the idle heart beat wait time.
            </summary>
            <param name="idleHeartbeatMillis">the wait timeout as milliseconds</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithFlowControl(NATS.Client.Internals.Duration)">
            <summary>
            Set the flow control on and set the idle heartbeat
            </summary>
            <param name="idleHeartbeat">the idle heart beat as a Duration</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithFlowControl(System.Int64)">
            <summary>
            Set the flow control on and set the idle heartbeat
            </summary>
            <param name="idleHeartbeatMillis">the idle heart beat as milliseconds</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithMaxExpires(NATS.Client.Internals.Duration)">
            <summary>
            Set the max amount of expire time for the server to allow on pull requests.
            </summary>
            <param name="maxExpires">the max amount of expire as a Duration</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithMaxExpires(System.Int64)">
            <summary>
            Set the max amount of expire time for the server to allow on pull requests.
            </summary>
            <param name="maxExpiresMillis">the max amount of expire as milliseconds</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithInactiveThreshold(NATS.Client.Internals.Duration)">
            <summary>
            Set the amount of time before the ephemeral consumer is deemed inactive.
            </summary>
            <param name="inactiveThreshold">the max amount of expire as a Duration</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithInactiveThreshold(System.Int64)">
            <summary>
            Set the amount of time before the ephemeral consumer is deemed inactive.
            </summary>
            <param name="inactiveThresholdMillis">the max amount of expire as milliseconds</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithMaxPullWaiting(System.Nullable{System.Int64})">
            <summary>
            Sets the maximum pull waiting.
            </summary>
            <param name="maxPullWaiting">the maximum delivery amount</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithMaxBatch(System.Nullable{System.Int64})">
            <summary>
            Sets the max batch size for the server to allow on pull requests.
            </summary>
            <param name="maxBatch">the maximum batch size</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithMaxBytes(System.Nullable{System.Int64})">
            <summary>
            Sets the max bytes size for the server to allow on pull requests.
            </summary>
            <param name="maxBytes">the maximum bytes size</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithNumReplicas(System.Nullable{System.Int32})">
            <summary>
            Sets the number of replicas for the consumer. When set do not inherit the
            replica count from the stream but specifically set it to this amount.
            </summary>
            <param name="numReplicas">number of replicas for the consumer</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithHeadersOnly(System.Nullable{System.Boolean})">
            <summary>
            Sets the headers only flag
            </summary>
            <param name="headersOnly">true to enable flow control.</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithMemStorage(System.Nullable{System.Boolean})">
            <summary>
            Sets the mem storage flag to force the consumer state to be kept
            in memory rather than inherit the setting from the stream
            </summary>
            <param name="memStorage">true to enable flow control.</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithBackoff(NATS.Client.Internals.Duration[])">
            <summary>
            Sets the list of backoff
            </summary>
            <param name="backoffs">zero or more backoff durations or an array of backoffs</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithBackoff(System.Int64[])">
            <summary>
            Sets the list of backoff
            </summary>
            <param name="backoffsMillis">zero or more backoff in millis or an array of backoffsMillis</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.WithMetadata(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Sets the metadata for the configuration 
            </summary>
            <param name="metadata">the metadata dictionary</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.Build">
            <summary>
            Builds the ConsumerConfiguration
            </summary>
            <returns>The ConsumerConfiguration</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.BuildPushSubscribeOptions">
            <summary>
            Builds the PushSubscribeOptions with this configuration
            </summary>
            <returns>The PushSubscribeOptions</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.BuildPullSubscribeOptions">
            <summary>
            Builds the PullSubscribeOptions with this configuration
            </summary>
            <returns>The PullSubscribeOptions</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerConfiguration.ConsumerConfigurationBuilder.BuildPullSubscribeOptions(System.String)">
            <summary>
            Builds the PullSubscribeOptions with this configuration
            </summary>
            <param name="streamName">the stream for this consumer</param>
            <returns>The PullSubscribeOptions</returns>
        </member>
        <member name="T:NATS.Client.JetStream.ConsumerContext">
            <summary>
            Implementation of IConsumerContext
            </summary>
        </member>
        <member name="T:NATS.Client.JetStream.ConsumerLimits">
            <summary>
            ConsumerLimits options for a stream
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerLimits.Builder">
            <summary>
            Creates a builder for a ConsumerLimits object. 
            </summary>
            <returns>The Builder</returns>
        </member>
        <member name="T:NATS.Client.JetStream.ConsumerLimits.ConsumerLimitsBuilder">
            <summary>
            ConsumerLimits can be created using a ConsumerLimitsBuilder. 
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerLimits.ConsumerLimitsBuilder.WithInactiveThreshold(NATS.Client.Internals.Duration)">
            <summary>
            Set the amount of time before the ephemeral consumer is deemed inactive.
            </summary>
            <param name="inactiveThreshold">the max amount of expire as a Duration</param>
            <returns>The ConsumerLimitsBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerLimits.ConsumerLimitsBuilder.WithInactiveThreshold(System.Int64)">
            <summary>
            Set the amount of time before the ephemeral consumer is deemed inactive.
            </summary>
            <param name="inactiveThresholdMillis">the max amount of expire as milliseconds</param>
            <returns>The ConsumerLimitsBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerLimits.ConsumerLimitsBuilder.WithMaxAckPending(System.Nullable{System.Int64})">
            <summary>
            Sets the maximum ack pending.
            </summary>
            <param name="maxAckPending">maximum pending acknowledgements.</param>
            <returns>The ConsumerLimitsBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.ConsumerLimits.ConsumerLimitsBuilder.Build">
            <summary>
            Build a ConsumerLimits object
            </summary>
            <returns>The ConsumerLimits</returns>
        </member>
        <member name="T:NATS.Client.JetStream.External">
            <summary>
            Configuration referencing a stream source in another account or JetStream domain
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.External.Api">
            <summary>
            The subject prefix that imports the other account/domain $JS.API.CONSUMER.> subjects
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.External.Deliver">
            <summary>
            The delivery subject to use for the push consumer
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.External.#ctor(System.String,System.String)">
            <summary>
            Construct the External configuration
            </summary>
            <param name="api">The api prefix</param>
            <param name="deliver">The deliver subject</param>
        </member>
        <member name="M:NATS.Client.JetStream.External.Builder">
            <summary>
            Creates a builder for an External object. 
            </summary>
            <returns>The Builder</returns>
        </member>
        <member name="T:NATS.Client.JetStream.External.ExternalBuilder">
            <summary>
            External can be created using a ExternalBuilder. 
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.External.ExternalBuilder.WithApi(System.String)">
            <summary>
            Set the api string.
            </summary>
            <param name="api">the api</param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.JetStream.External.ExternalBuilder.WithDeliver(System.String)">
            <summary>
            Set the deliver string.
            </summary>
            <param name="deliver">the deliver</param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.JetStream.External.ExternalBuilder.Build">
            <summary>
            Build a External object
            </summary>
            <returns>The External</returns>
        </member>
        <member name="P:NATS.Client.JetStream.FeatureOptions.JSOptions">
            <summary>
            Gets the JetStreamOptions
            </summary>
        </member>
        <member name="T:NATS.Client.JetStream.FetchConsumeOptions">
            <summary>
            Consume Options are provided to customize the consume operation. 
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.FetchConsumeOptions.MaxMessages">
            <summary>
            The maximum number of messages to fetch.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.FetchConsumeOptions.MaxBytes">
            <summary>
            The maximum number of bytes to fetch.
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.FetchConsumeOptions.Builder">
            <summary>
            Gets the FetchConsumeOptions builder.
            </summary>
            <returns>The builder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.FetchConsumeOptions.FetchConsumeOptionsBuilder.WithMaxMessages(System.Int32)">
            <summary>
            Set the maximum number of messages to fetch and remove any previously set {@link #maxBytes(long)} constraint.
            The number of messages fetched will also be constrained by the expiration time.
            <para>Less than 1 means default of <see cref="F:NATS.Client.JetStream.BaseConsumeOptions.DefaultMessageCount"/>.</para>
            </summary>
            <param name="maxMessages">the number of messages. Must be greater than 0</param>
            <returns>the builder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.FetchConsumeOptions.FetchConsumeOptionsBuilder.WithMaxBytes(System.Int32)">
            <summary>
            Set maximum number of bytes to fetch and remove any previously set maxMessages constraint
            The number of bytes fetched will also be constrained by the expiration time.
            <para>Less than 1 removes any previously set max bytes constraint.</para>
            <para>It is important to set the byte size greater than your largest message payload, plus some amount
            to account for overhead, otherwise the consume process will stall if there are no messages that fit the criteria.</para>
            See <see cref="P:NATS.Client.Msg.ConsumeByteCount"/> 
            </summary>
            <param name="maxBytes">the maximum bytes</param>
            <returns>the builder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.FetchConsumeOptions.FetchConsumeOptionsBuilder.WithMax(System.Int32,System.Int32)">
            <summary>
            Set maximum number of bytes or messages to fetch.
            The number of messages/bytes fetched will be constrained by whichever constraint, messages or bytes is reached first.
            The number of bytes fetched will also be constrained by the expiration time.
            <para>Less than 1 max bytes removes any previously set max bytes constraint.</para>
            <para>Less than 1 max messages removes any previously set max messages constraint.</para>
            <para>It is important to set the byte size greater than your largest message payload, plus some amount
            to account for overhead, otherwise the consume process will stall if there are no messages that fit the criteria.</para>
            See <see cref="P:NATS.Client.Msg.ConsumeByteCount"/> 
            </summary>
            <param name="maxBytes">the maximum bytes</param>
            <param name="maxMessages">the maximum number of messages</param>
            <returns>the builder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.FetchConsumeOptions.FetchConsumeOptionsBuilder.Build">
            <summary>
            Build the FetchConsumeOptions
            </summary>
            <returns>a FetchConsumeOptions instance</returns>
        </member>
        <member name="T:NATS.Client.JetStream.FetchConsumer">
            <summary>
            Implementation of IFetchConsumer
            </summary>
        </member>
        <member name="T:NATS.Client.JetStream.IBaseConsumerContext">
            <summary>
            Base class for IConsumerContext implementations
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.IBaseConsumerContext.ConsumerName">
            <summary>
            Gets the consumer name that was used to create the context.
            </summary>
            <returns>the consumer name</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IBaseConsumerContext.Next(System.Int32)">
            <summary>
            Read the next message with optional provided max wait
            </summary>
            <param name="maxWaitMillis">optional max wait value in milliseconds. Defaults to {@value BaseConsumeOptions#DEFAULT_EXPIRES_IN_MS}</param>
            <returns>the next message or null if the max wait expires</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IBaseConsumerContext.FetchMessages(System.Int32)">
            <summary>
            Start a one use Fetch Consumer using all defaults other than the number of messages. <see cref="T:NATS.Client.JetStream.IFetchConsumer"/>
            </summary>
            <param name="maxMessages">the maximum number of message to consume</param>
            <returns>the IFetchConsumer instance</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IBaseConsumerContext.FetchBytes(System.Int32)">
            <summary>
            Start a one use Fetch Consumer using all defaults other than the number of bytes. <see cref="T:NATS.Client.JetStream.IFetchConsumer"/>
            </summary>
            <param name="maxBytes">the maximum number of bytes to consume</param>
            <returns>the IFetchConsumer instance</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IBaseConsumerContext.Fetch(NATS.Client.JetStream.FetchConsumeOptions)">
            <summary>
            Start a one use Fetch Consumer with complete custom consume options. <see cref="T:NATS.Client.JetStream.IFetchConsumer"/>
            </summary>
            <param name="fetchConsumeOptions">the custom fetch consume options. See FetchConsumeOptions</param>
            <returns>the IFetchConsumer instance</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IBaseConsumerContext.Iterate(NATS.Client.JetStream.ConsumeOptions)">
            <summary>
            Start a long-running IterableConsumer with optional custom ConsumeOptions.<see cref="T:NATS.Client.JetStream.IIterableConsumer"/> and <see cref="T:NATS.Client.JetStream.ConsumeOptions"/>
            IIterableConsumer requires the developer call nextMessage.
            </summary>
            <param name="consumeOptions">optional custom consume options</param>
            <returns>the IIterableConsumer instance</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IBaseConsumerContext.Consume(System.EventHandler{NATS.Client.MsgHandlerEventArgs},NATS.Client.JetStream.ConsumeOptions)">
            <summary>
            Start a long-running MessageConsumer with a handler and optional custom ConsumeOptions.<see cref="T:NATS.Client.JetStream.IIterableConsumer"/> and <see cref="T:NATS.Client.JetStream.ConsumeOptions"/>
            </summary>
            <param name="handler">the MessageHandler used for receiving messages.</param>
            <param name="consumeOptions">optional custom consume options</param>
            <returns>the IMessageConsumer instance</returns>
        </member>
        <member name="T:NATS.Client.JetStream.IConsumerContext">
            <summary>
            The Consumer Context provides a convenient interface around a defined JetStream Consumer
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.IConsumerContext.GetConsumerInfo">
            <summary>
            Gets information about the consumer behind this subscription.
            </summary>
            <returns>consumer information</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IConsumerContext.GetCachedConsumerInfo">
            <summary>
            Gets information about the consumer behind this subscription.
            This returns the last read version of Consumer Info, which could technically be out of date.
            </summary>
            <returns>consumer information</returns>
        </member>
        <member name="T:NATS.Client.JetStream.IFetchConsumer">
            <summary>
            Interface definition for a Fetch Consumer
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.IFetchConsumer.NextMessage">
            <summary>
            Read the next message. Return null if the fetch has been fulfilled either
            because max messages or bytes max bytes have been reached,
            or because the fetch was not fulfilled in the timeout set byt the fetch options.
            @return the next message for this subscriber or null if there is a timeout
            </summary>
            <returns>the next message or null if there is a timeout</returns>
        </member>
        <member name="T:NATS.Client.JetStream.IIterableConsumer">
            <summary>
            Interface definition for a Iterable Consumer
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.IIterableConsumer.NextMessage(System.Int32)">
            <summary>
            Read the next message. Return null if the calls times out.
            Use a timeout of 0 to wait indefinitely. This could still be interrupted if
            the subscription is unsubscribed or the client connection is closed.
            </summary>
            <param name="timeoutMillis">the maximum time to wait</param>
            <returns>the next message for this subscriber.</returns>
        </member>
        <member name="T:NATS.Client.JetStream.IJetStream">
            <summary>
            This is the JetStream context for creation and access to persistent
            streams and consumers.
            </summary>
            <remarks>
            A JetStream context is created by the IConnect.JetStreamContext() API.
            </remarks>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStream.Publish(System.String,System.Byte[])">
            <summary>
            Send a message to the specified subject and waits for a response
            from Jetstream. The message body will not be copied.
            </summary>
            <remarks>
            The expected usage with string content is something like:
            <code>
            nc = Nats.connect()
            IJetStream js = nc.JetStream()
            js.Publish("destination", "message".getBytes("UTF-8"), publishOptions)
            </code>
            where the sender creates a byte array immediately before calling publish.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the data to publish
            to the connected NATS server.</param>
            <returns>PublishAck</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStream.Publish(System.String,NATS.Client.MsgHeader,System.Byte[])">
            <summary>
            Send a message to the specified subject and waits for a response
            from Jetstream. The message body will not be copied.
            </summary>
            <remarks>
            The expected usage with string content is something like:
            <code>
            nc = Nats.connect()
            IJetStream js = nc.JetStream()
            MsgHeader h = new MsgHeader { { "foo", "bar" } };
            js.Publish("destination", h, "message".getBytes("UTF-8"), publishOptions)
            </code>
            where the sender creates a byte array immediately before calling publish.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="headers">Optional headers to publish with the message.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the data to publish
            to the connected NATS server.</param>
            <returns>PublishAck</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStream.Publish(System.String,System.Byte[],NATS.Client.JetStream.PublishOptions)">
            <summary>
            Send a message to the specified subject and waits for a response
            from Jetstream. The message body will not be copied.
            </summary>
            <remarks>
            The expected usage with string content is something like:
            <code>
            nc = Nats.connect()
            IJetStream js = nc.JetStream
            js.Publish("destination", "message".getBytes("UTF-8"), publishOptions)
            </code>
            where the sender creates a byte array immediately before calling publish.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the data to publish
            to the connected NATS server.</param>
            <param name="publishOptions">Options for publishing.</param>
            <returns>PublishAck</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStream.Publish(System.String,NATS.Client.MsgHeader,System.Byte[],NATS.Client.JetStream.PublishOptions)">
            <summary>
            Send a message to the specified subject and waits for a response
            from Jetstream. The message body will not be copied.
            </summary>
            <remarks>
            The expected usage with string content is something like:
            <code>
            nc = Nats.connect()
            IJetStream js = nc.JetStream
            MsgHeader h = new MsgHeader { { "foo", "bar" } };
            js.Publish("destination", h, "message".getBytes("UTF-8"), publishOptions)
            </code>
            where the sender creates a byte array immediately before calling publish.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="headers">Optional headers to publish with the message.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the data to publish
            to the connected NATS server.</param>
            <param name="publishOptions">Options for publishing.</param>
            <returns>PublishAck</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStream.Publish(NATS.Client.Msg)">
            <summary>
            Send a message and waits for a response from JetStream.
            </summary>
            <param name="message">A <see cref="T:NATS.Client.Msg"/> that contains the request data to publish
            to the connected NATS server.  Any reply subject will be ignored.</param>
            <returns>A publish acknowledgement</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStream.Publish(NATS.Client.Msg,NATS.Client.JetStream.PublishOptions)">
            <summary>
            Send a message and waits for a response from JetStream.
            </summary>
            <param name="message">A <see cref="T:NATS.Client.Msg"/> that contains the request data to publish
            to the connected NATS server.  Any reply subject will be ignored.</param>
            <param name="publishOptions">Options for publishing.</param>
            <returns>A publish acknowledgement.</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStream.PublishAsync(System.String,System.Byte[])">
            <summary>
            Asynchronously sends a message to the specified subject and waits for a response
            from Jetstream. The message body will not be copied.
            </summary>
            <remarks>
            The expected usage with string content is something like:
            <code>
            nc = Nats.connect()
            IJetStream js = nc.JetStream()
            js.Publish("destination", "message".getBytes("UTF-8"), publishOptions)
            </code>
            where the sender creates a byte array immediately before calling publish.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the data to publish
            to the connected NATS server.</param>
            <returns>PublishAck</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStream.PublishAsync(System.String,NATS.Client.MsgHeader,System.Byte[])">
            <summary>
            Asynchronously sends a message to the specified subject and waits for a response
            from Jetstream. The message body will not be copied.
            </summary>
            <remarks>
            The expected usage with string content is something like:
            <code>
            nc = Nats.connect()
            IJetStream js = nc.JetStream()
            MsgHeader h = new MsgHeader { { "foo", "bar" } };
            js.Publish("destination", h, "message".getBytes("UTF-8"), publishOptions)
            </code>
            where the sender creates a byte array immediately before calling publish.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="headers">Optional headers to publish with the message.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the data to publish
            to the connected NATS server.</param>
            <returns>PublishAck</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStream.PublishAsync(System.String,System.Byte[],NATS.Client.JetStream.PublishOptions)">
            <summary>
            Asynchronously sends data to the specified subject. The message
            body will not be copied.
            </summary>
            <remarks>
            The expected usage with string content is something like:
            <code>
            nc = Nats.connect()
            IJetStream js = nc.JetStream
            js.Publish("destination", "message".getBytes("UTF-8"), publishOptions)
            </code>
            where the sender creates a byte array immediately before calling publish.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the data to publish
            to the connected NATS server.</param>
            <param name="publishOptions">Options for publishing.</param>
            <returns>PublishAck</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStream.PublishAsync(System.String,NATS.Client.MsgHeader,System.Byte[],NATS.Client.JetStream.PublishOptions)">
            <summary>
            Asynchronously sends data to the specified subject. The message
            body will not be copied.
            </summary>
            <remarks>
            The expected usage with string content is something like:
            <code>
            nc = Nats.connect()
            IJetStream js = nc.JetStream
            MsgHeader h = new MsgHeader { { "foo", "bar" } };
            js.Publish("destination", h, "message".getBytes("UTF-8"), publishOptions)
            </code>
            where the sender creates a byte array immediately before calling publish.
            </remarks>
            <param name="subject">The subject to publish <paramref name="data"/> to over
            the current connection.</param>
            <param name="headers">Optional headers to publish with the message.</param>
            <param name="data">An array of type <see cref="T:System.Byte"/> that contains the data to publish
            to the connected NATS server.</param>
            <param name="publishOptions">Options for publishing.</param>
            <returns>PublishAck</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStream.PublishAsync(NATS.Client.Msg)">
            FIX Comments for rest of async
            <summary>
            Asynchronously sends a message to JetStream.
            </summary>
            <param name="message">A <see cref="T:NATS.Client.Msg"/> that contains the request data to publish
            to the connected NATS server.  Any reply subject will be ignored.</param>
            <returns>A publish acknowledgement</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStream.PublishAsync(NATS.Client.Msg,NATS.Client.JetStream.PublishOptions)">
            <summary>
            Asynchronously sends a message to JetStream with options.
            </summary>
            <param name="message">A <see cref="T:NATS.Client.Msg"/> that contains the request data to publish
            to the connected NATS server.  Any reply subject will be ignored.</param>
            <param name="publishOptions">Options for publishing.</param>
            <returns>A publish acknowledgement.</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStream.PullSubscribe(System.String,NATS.Client.JetStream.PullSubscribeOptions)">
            <summary>
            Creates a JetStream pull subscription. Pull subscriptions fetch messages
            from the server in batches.
            </summary>
            <param name="subject">The subject on which to listen for messages.
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <param name="options">Pull Subscribe options for this subscription.</param>
            <returns>An IJetStreamPullSubscription</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStream.PullSubscribeAsync(System.String,System.EventHandler{NATS.Client.MsgHandlerEventArgs},NATS.Client.JetStream.PullSubscribeOptions)">
            <summary>
            Creates a JetStream pull subscription with an eventHandler. Pull subscriptions fetch messages
            from the server in batches.
            </summary>
            <param name="subject">The subject on which to listen for messages.
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <param name="handler">The <see cref="T:System.EventHandler`1"/> invoked when messages are received 
            on the returned <see cref="T:NATS.Client.IAsyncSubscription"/>.</param>
            <param name="options">Pull Subscribe options for this subscription.</param>
            <returns>An IJetStreamPullSubscription</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStream.PushSubscribeAsync(System.String,System.EventHandler{NATS.Client.MsgHandlerEventArgs},System.Boolean)">
            <summary>
            Creates a push subscriber on the given <paramref name="subject"/>, and begins delivering
            messages to the given event handler.
            </summary>
            <remarks>
            <para>All subscribers with the same queue name will form the queue group and
            only one member of the group will be selected to receive any given message.</para>
            <para>The <see cref="T:NATS.Client.JetStream.IJetStreamSubscription"/> returned will start delivering messages
            to the event handler as soon as they are received.</para>
            </remarks>
            <param name="subject">The subject on which to listen for messages.
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <param name="handler">The <see cref="T:System.EventHandler`1"/> invoked when messages are received 
            on the returned <see cref="T:NATS.Client.IAsyncSubscription"/>.</param>
            <param name="autoAck">Whether or not to auto ack the message</param>
            <returns>An <see cref="T:NATS.Client.JetStream.IJetStreamPushAsyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>.</returns>
            <seealso cref="P:NATS.Client.ISubscription.Subject"/>
            <returns>A JetStream push subscription</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStream.PushSubscribeAsync(System.String,System.EventHandler{NATS.Client.MsgHandlerEventArgs},System.Boolean,NATS.Client.JetStream.PushSubscribeOptions)">
            <summary>
            Creates a push subscriber on the given <paramref name="subject"/>, and begins delivering
            messages to the given event handler.
            </summary>
            <remarks>
            <para>All subscribers with the same queue name will form the queue group and
            only one member of the group will be selected to receive any given message.</para>
            <para>The <see cref="T:NATS.Client.JetStream.IJetStreamSubscription"/> returned will start delivering messages
            to the event handler as soon as they are received.</para>
            </remarks>
            <param name="subject">The subject on which to listen for messages.
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <param name="handler">The <see cref="T:System.EventHandler`1"/> invoked when messages are received 
            on the returned <see cref="T:NATS.Client.JetStream.IJetStreamPushAsyncSubscription"/>.</param>
            <param name="autoAck">Whether or not to auto ack the message</param>
            <param name="options">Pull Subscribe options for this subscription.</param>
            <returns>An <see cref="T:NATS.Client.JetStream.IJetStreamPushAsyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>.</returns>
            <seealso cref="P:NATS.Client.ISubscription.Subject"/>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStream.PushSubscribeAsync(System.String,System.String,System.EventHandler{NATS.Client.MsgHandlerEventArgs},System.Boolean)">
            <summary>
            Creates an subscriber on the given <paramref name="subject"/>, and begins delivering
            messages to the given event handler.
            </summary>
            <remarks>
            <para>All subscribers with the same queue name will form the queue group and
            only one member of the group will be selected to receive any given message.</para>
            <para>The <see cref="T:NATS.Client.JetStream.IJetStreamSubscription"/> returned will start delivering messages
            to the event handler as soon as they are received.</para>
            </remarks>
            <param name="subject">The subject on which to listen for messages.
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <param name="queue">The name of the queue group in which to participate.</param>
            <param name="handler">The <see cref="T:System.EventHandler`1"/> invoked when messages are received 
            on the returned <see cref="T:NATS.Client.IAsyncSubscription"/>.</param>
            <param name="autoAck">Whether or not to auto ack the message</param>
            <returns>An <see cref="T:NATS.Client.IAsyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>.</returns>
            <seealso cref="P:NATS.Client.ISubscription.Subject"/>
            <seealso cref="P:NATS.Client.ISubscription.Queue"/>
            <returns>An IJetStreamPushAsyncSubscription</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStream.PushSubscribeAsync(System.String,System.String,System.EventHandler{NATS.Client.MsgHandlerEventArgs},System.Boolean,NATS.Client.JetStream.PushSubscribeOptions)">
            <summary>
            Creates an subscriber on the given <paramref name="subject"/>, and begins delivering
            messages to the given event handler.
            </summary>
            <remarks>
            <para>All subscribers with the same queue name will form the queue group and
            only one member of the group will be selected to receive any given message.</para>
            <para>The <see cref="T:NATS.Client.JetStream.IJetStreamSubscription"/> returned will start delivering messages
            to the event handler as soon as they are received.</para>
            </remarks>
            <param name="subject">The subject on which to listen for messages.
            The subject can have wildcards (partial: <c>*</c>, full: <c>&gt;</c>).</param>
            <param name="queue">The name of the queue group in which to participate.</param>
            <param name="handler">The <see cref="T:System.EventHandler`1"/> invoked when messages are received 
            on the returned <see cref="T:NATS.Client.IAsyncSubscription"/>.</param>
            <returns>An <see cref="T:NATS.Client.IAsyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>.</returns>
            <seealso cref="P:NATS.Client.ISubscription.Subject"/>
            <seealso cref="P:NATS.Client.ISubscription.Queue"/>
            <param name="autoAck">Whether or not to auto ack the message</param>
            <param name="options">JetStream push subscription options.</param>
            <returns>An IJetStreamPushAsyncSubscription</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStream.PushSubscribeSync(System.String)">
            <summary>
            Creates a synchronous JetStream subscriber on the given <paramref name="subject"/>.
            </summary>
            <param name="subject">The subject on which to listen for messages.</param>
            <returns>An <see cref="T:NATS.Client.JetStream.IJetStreamPushSyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>, as part of 
            the given queue group.</returns>
            <seealso cref="P:NATS.Client.ISubscription.Subject"/>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStream.PushSubscribeSync(System.String,NATS.Client.JetStream.PushSubscribeOptions)">
            <summary>
            Creates a synchronous JetStream subscriber on the given <paramref name="subject"/>.
            </summary>
            <param name="subject">The subject on which to listen for messages.</param>
            <param name="options">JetStream subscription options.</param>
            <returns>An <see cref="T:NATS.Client.JetStream.IJetStreamPushSyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>, as part of 
            the given queue group.</returns>
            <seealso cref="P:NATS.Client.ISubscription.Subject"/>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStream.PushSubscribeSync(System.String,System.String)">
            <summary>
            Creates a synchronous JetStream queue subscriber on the given <paramref name="subject"/>.
            </summary>
            <remarks>All subscribers with the same queue name will form the queue group and
            only one member of the group will be selected to receive any given message
            synchronously.</remarks>
            <param name="subject">The subject on which to listen for messages.</param>
            <param name="queue">The name of the queue group in which to participate.</param>
            <returns>An <see cref="T:NATS.Client.JetStream.IJetStreamPushSyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>, as part of 
            the given queue group.</returns>
            <seealso cref="P:NATS.Client.ISubscription.Subject"/>
            <seealso cref="P:NATS.Client.ISubscription.Queue"/>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStream.PushSubscribeSync(System.String,System.String,NATS.Client.JetStream.PushSubscribeOptions)">
            <summary>
            Creates a synchronous JetStream queue subscriber on the given <paramref name="subject"/>.
            </summary>
            <remarks>All subscribers with the same queue name will form the queue group and
            only one member of the group will be selected to receive any given message
            synchronously.</remarks>
            <param name="subject">The subject on which to listen for messages.</param>
            <param name="queue">The name of the queue group in which to participate.</param>
            <param name="options">JetStream subscription options.</param>
            <returns>An <see cref="T:NATS.Client.JetStream.IJetStreamPushSyncSubscription"/> to use to read any messages received
            from the NATS Server on the given <paramref name="subject"/>, as part of 
            the given queue group.</returns>
            <seealso cref="P:NATS.Client.ISubscription.Subject"/>
            <seealso cref="P:NATS.Client.ISubscription.Queue"/>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStream.GetStreamContext(System.String)">
            <summary>
            Create a stream context for a specific named stream. Verifies that the stream exists.
            </summary>
            <param name="streamName">the name of the stream</param>
            <returns>an IStreamContext instance</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStream.GetConsumerContext(System.String,System.String)">
            <summary>
            Create a consumer context for a specific named stream and specific named consumer.
            Verifies that the stream and consumer exist.
            </summary>
            <param name="streamName">the name of the stream</param>
            <param name="consumerName">the name of the consumer</param>
            <returns>an IConsumerContext instance</returns>
        </member>
        <member name="T:NATS.Client.JetStream.IJetStreamManagement">
            <summary>
            This is the JetStream management API to programatically create, delete,
            and update various JetStream objects.
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamManagement.GetAccountStatistics">
            <summary>
            Gets the account statistics for the logged in account.
            <returns>account statistics</returns>
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamManagement.AddStream(NATS.Client.JetStream.StreamConfiguration)">
            <summary>
            Loads or creates a stream.
            </summary>
            <param name="config">The stream configuration to use.</param>
            <returns>Stream information</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamManagement.UpdateStream(NATS.Client.JetStream.StreamConfiguration)">
            <summary>
            Updates an existing stream.
            </summary>
            <param name="config">The stream configuration to use.</param>
            <returns>Stream information</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamManagement.DeleteStream(System.String)">
            <summary>
            Deletes an existing stream.
            </summary>
            <param name="streamName">The name of the stream.</param>
            <returns>true if the delete succeeded. Usually throws a NATSJetStreamException otherwise</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamManagement.GetStreamInfo(System.String)">
            <summary>
            Get information about a stream.
            Does not retrieve any optional data.
            See the overloaded version that accepts StreamInfoOptions
            </summary>
            <param name="streamName">The name of the stream.</param>
            <returns>Stream information</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamManagement.GetStreamInfo(System.String,NATS.Client.JetStream.StreamInfoOptions)">
            <summary>
            Get information about a stream, and include optional information
            as defined in the StreamInfoOptions.
            </summary>
            <param name="streamName">The name of the stream.</param>
            <param name="options">the stream info options. If null, request will not return any optional data.</param>
            <returns>Stream information</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamManagement.PurgeStream(System.String)">
            <summary>
            Purges all messages in a stream.
            </summary>
            <param name="streamName">The name of the stream.</param>
            <returns>The result of the purge.</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamManagement.PurgeStream(System.String,NATS.Client.JetStream.PurgeOptions)">
            <summary>
            Purges all messages in a stream.
            </summary>
            <param name="streamName">The name of the stream.</param>
            <param name="options">The purge options.</param>
            <returns>The result of the purge.</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamManagement.AddOrUpdateConsumer(System.String,NATS.Client.JetStream.ConsumerConfiguration)">
            <summary>
            Adds or updates a consumer.
            </summary>
            <param name="streamName">The name of the stream the consumer is attached to.</param>
            <param name="config">The consumer configuration to use.</param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamManagement.CreateConsumer(System.String,NATS.Client.JetStream.ConsumerConfiguration)">
            <summary>
            Creates a consumer. Must not already exist.
            </summary>
            <param name="streamName">The name of the stream the consumer is attached to.</param>
            <param name="config">The consumer configuration to use.</param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamManagement.UpdateConsumer(System.String,NATS.Client.JetStream.ConsumerConfiguration)">
            <summary>
            Updates an existing consumer. Must already exist.
            </summary>
            <param name="streamName">The name of the stream the consumer is attached to.</param>
            <param name="config">The consumer configuration to use.</param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamManagement.DeleteConsumer(System.String,System.String)">
            <summary>
            Deletes a consumer.
            </summary>
            <param name="streamName">The name of the stream the consumer is attached to.</param>
            <param name="consumer">The name of the consumer.</param>
            <returns>True if the consumer was deleted.</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamManagement.PauseConsumer(System.String,System.String,System.DateTime)">
            <summary>
            Pauses a consumer.
            </summary>
            <param name="streamName">The name of the stream the consumer is attached to.</param>
            <param name="consumer">The name of the consumer.</param>
            <param name="pauseUntil">Consumer is paused until this time.</param>
            <returns>ConsumerPauseResponse.</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamManagement.ResumeConsumer(System.String,System.String)">
            <summary>
            Resumes a consumer.
            </summary>
            <param name="streamName">The name of the stream the consumer is attached to.</param>
            <param name="consumer">The name of the consumer.</param>
            <returns>True if the resume succeeded.</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamManagement.GetConsumerInfo(System.String,System.String)">
            <summary>
            Gets information for an existing consumer.
            </summary>
            <param name="streamName">The name of the stream the consumer is attached to.</param>
            <param name="consumer">The name of the consumer.</param>
            <returns>Consumer information</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamManagement.GetConsumerNames(System.String)">
            <summary>
            Gets all consumers attached to a stream.
            </summary>
            <param name="streamName">The name of the stream.</param>
            <returns>An array of consumer names.</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamManagement.GetConsumers(System.String)">
            <summary>
            Get consumer information for all consumers on a stream.
            </summary>
            <param name="streamName">The name of the stream.</param>
            <returns>An array of consumer information objects.</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamManagement.GetStreamNames">
            <summary>
            Gets the names of all streams.
            </summary>
            <returns>An array of stream names.</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamManagement.GetStreamNames(System.String)">
            <summary>
            Get a list of stream names that have subjects matching the subject filter.
            </summary>
            <param name="subjectFilter">The subject. Wildcards are allowed.</param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamManagement.GetStreams">
            <summary>
            Gets stream information about all streams.
            </summary>
            <returns>An array of stream information objects.</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamManagement.GetStreams(System.String)">
            <summary>
            Gets stream information about all streams that have subjects matching the filter.
            </summary>
            <returns>An array of stream information objects.</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamManagement.GetMessage(System.String,System.UInt64)">
            <summary>
            Get MessageInfo for the message with the exact sequence in the stream.
            </summary>
            <param name="streamName">The name of the stream.</param>
            <param name="sequence">The stream sequence number of the message.</param>
            <returns>Message information.</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamManagement.GetLastMessage(System.String,System.String)">
            <summary>
            Get MessageInfo for the last message of the subject.
            </summary>
            <param name="streamName">The name of the stream.</param>
            <param name="subject">The subject to get the last message for.</param>
            <returns>Message information.</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamManagement.GetFirstMessage(System.String,System.String)">
            <summary>
            Get MessageInfo for the first message of the subject.
            </summary>
            <param name="streamName">The name of the stream.</param>
            <param name="subject">The subject to get the first message for.</param>
            <returns>Message information.</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamManagement.GetNextMessage(System.String,System.UInt64,System.String)">
            <summary>
            Get MessageInfo for the message of the message sequence
            is equal to or greater the requested sequence for the subject.
            </summary>
            <param name="streamName">The name of the stream.</param>
            <param name="sequence">The first possible sequence number of the message.</param>
            <param name="subject">The subject to get the next message for.</param>
            <returns>Message information.</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamManagement.DeleteMessage(System.String,System.UInt64)">
            <summary>
            Deletes a message, overwriting the message data with garbage
            This can be considered an expensive (time consuming) operation, but is more secure.
            </summary>
            <param name="streamName">The name of the stream.</param>
            <param name="sequence">The stream sequence number of the message.</param>
            <returns>True if the message was deleted.</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamManagement.DeleteMessage(System.String,System.UInt64,System.Boolean)">
            <summary>
            Deletes a message, optionally erasing the content of the message.
            </summary>
            <param name="streamName">The name of the stream.</param>
            <param name="sequence">The stream sequence number of the message.</param>
            <param name="erase">Whether to erase the message (overwriting with garbage) or only mark it as erased.</param>
            <returns>True if the message was deleted.</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamManagement.GetJetStreamContext">
            <summary>
            Gets a context for publishing and subscribing to subjects
            backed by Jetstream streams and consumers, using the same connection and JetStreamOptions as the management.
            </summary>
            <returns>The JetStream Context</returns>
        </member>
        <member name="P:NATS.Client.JetStream.IJetStreamSubscription.Context">
            <summary>
            The JetStream Context
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.IJetStreamSubscription.Stream">
            <summary>
            The Stream Name
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.IJetStreamSubscription.Consumer">
            <summary>
            The Consumer Name
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.IJetStreamSubscription.DeliverSubject">
            <summary>
            The Deliver Subject
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamSubscription.GetConsumerInformation">
            <summary>
            Gets the ConsumerInformation for this Subscription.
            </summary>
        </member>
        <member name="T:NATS.Client.JetStream.IJetStreamPushSyncSubscription">
            <summary>
            Push Subscription on a JetStream context.
            </summary>
        </member>
        <member name="T:NATS.Client.JetStream.IJetStreamPushAsyncSubscription">
            <summary>
            Async Push Subscription on a JetStream context.
            </summary>
        </member>
        <member name="T:NATS.Client.JetStream.IJetStreamPullSubscription">
            <summary>
            Pull Subscription on a JetStream context.
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamPullSubscription.Fetch(System.Int32,System.Int32)">
            <summary>
            Fetch a list of messages up to the batch size, waiting no longer than maxWait.
            </summary>
            <remarks>
            This uses <code>pullExpiresIn</code> under the covers, and manages all responses
            from<code> sub.NextMessage(...)</code> to only return regular JetStream messages.
            </remarks>
            <param name="batchSize">the size of the batch</param>
            <param name="maxWaitMillis">The maximum time to wait for the first message.</param>
            <returns>A list of messages</returns>
        </member>
        <member name="T:NATS.Client.JetStream.IJetStreamPullAsyncSubscription">
            <summary>
            Async Pull Subscription on a JetStream context.
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamPullApiSubscription.Pull(System.Int32)">
            <summary>
            Initiate pull with the specified batch size.
            </summary>
            <remarks>
            Primitive API for ADVANCED use only, officially not supported. Prefer Fetch 
            </remarks>
            <param name="batchSize">the size of the batch</param>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamPullApiSubscription.Pull(NATS.Client.JetStream.PullRequestOptions)">
            <summary>
            Initiate pull with the specified request options.
            </summary>
            <remarks>
            Primitive API for ADVANCED use only, officially not supported. Prefer Fetch 
            </remarks>
            <param name="pullRequestOptions">the options object</param>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamPullApiSubscription.PullNoWait(System.Int32)">
            <summary>
            Do a pull in noWait mode with the specified batch size.
            </summary>
            <remarks>
            Primitive API for ADVANCED use only, officially not supported. Prefer Fetch 
            </remarks>
            <param name="batchSize">the size of the batch</param>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamPullApiSubscription.PullNoWait(System.Int32,System.Int32)">
            <summary>
            Do a pull in noWait + expire mode with the specified batch size.
            </summary>
            <remarks>
            Primitive API for ADVANCED use only, officially not supported. Prefer Fetch 
            </remarks>
            <param name="batchSize">the size of the batch</param>
            <param name="expiresInMillis">how long from now the server should expire this request</param>
        </member>
        <member name="M:NATS.Client.JetStream.IJetStreamPullApiSubscription.PullExpiresIn(System.Int32,System.Int32)">
            <summary>
            Initiate pull for all messages available before expiration.
            </summary>
            <remarks>
            Primitive API for ADVANCED use only, officially not supported. Prefer Fetch 
            </remarks>
            <param name="batchSize">the size of the batch</param>
            <param name="expiresInMillis">how long from now the server should expire this request</param>
        </member>
        <member name="T:NATS.Client.JetStream.IMessageConsumer">
            <summary>
            Interface definition for a Message Consumer
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.IMessageConsumer.GetConsumerName">
            <summary>
            Gets the consumer name associated with the subscription.
            Some simplified consumer types do not support this, so it might be null.
            </summary>
            <returns>the consumer name</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IMessageConsumer.GetConsumerInformation">
            <summary>
            Gets information about the consumer behind this subscription.
            </summary>
            <returns>consumer information</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IMessageConsumer.GetCachedConsumerInformation">
            <summary>
            Gets information about the consumer behind this subscription.
            This returns the last read version of Consumer Info, which could technically be out of date.
            </summary>
            <returns>consumer information</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IMessageConsumer.Stop">
            <summary>
            Stop the MessageConsumer from asking for any more messages from the server.
            The consumer will finish all pull request already in progress, but will not start any new ones.
            </summary>
        </member>
        <member name="T:NATS.Client.JetStream.IOrderedConsumerContext">
            <summary>
            The Ordered Consumer and it's context provide a simplification interface to the ordered consumer behavior.
            </summary>
        </member>
        <member name="T:NATS.Client.JetStream.IStreamContext">
            <summary>
            The Stream Context provide a set of operations for managing the stream
            and its contents and for managing consumers.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.IStreamContext.StreamName">
            <summary>
            Gets the stream name that was used to create the context.
            </summary>
            <returns>the stream name</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IStreamContext.GetStreamInfo">
            <summary>
            Gets information about the stream for this context.
            Does not retrieve any optional data.
            See the overloaded version that accepts StreamInfoOptions
            </summary>
            <returns>stream information</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IStreamContext.GetStreamInfo(NATS.Client.JetStream.StreamInfoOptions)">
            <summary>
            Gets information about the stream for this context.
            </summary>
            <param name="options">the stream info options. If null, request will not return any optional data.</param>
            <returns>stream information</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IStreamContext.Purge">
            <summary>
            Purge stream messages
            </summary>
            <returns>PurgeResponse the purge response</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IStreamContext.Purge(NATS.Client.JetStream.PurgeOptions)">
            <summary>
            Purge messages for a specific subject
            </summary>
            <param name="options">the purge options</param>
            <returns>PurgeResponse the purge response</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IStreamContext.GetConsumerContext(System.String)">
            <summary>
            Create a consumer context for on the context's stream and specific named consumer.
            Verifies that the consumer exists.
            </summary>
            <param name="consumerName">the name of the consumer</param>
            <returns>an instance of IConsumerContext</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IStreamContext.CreateOrUpdateConsumer(NATS.Client.JetStream.ConsumerConfiguration)">
            <summary>
            Create an ordered consumer context for the context's stream.
            </summary>
            <param name="config">the configuration for the ordered consumer</param>
            <returns>an instance of IConsumerContext</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IStreamContext.CreateOrderedConsumer(NATS.Client.JetStream.OrderedConsumerConfiguration)">
            <summary>
            Management function to creates a consumer on this stream.
            </summary>
            <param name="config">the consumer configuration to use.</param>
            <returns>consumer information.</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IStreamContext.DeleteConsumer(System.String)">
            <summary>
            Management function to deletes a consumer.
            </summary>
            <param name="consumerName">the name of the consumer.</param>
            <returns>true if the delete succeeded</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IStreamContext.GetConsumerInfo(System.String)">
            <summary>
            Gets the info for an existing consumer.
            </summary>
            <param name="consumerName">the name of the consumer.</param>
            <returns>consumer information</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IStreamContext.GetConsumerNames">
            <summary>
            Return a list of consumers by name
            </summary>
            <returns>The list of names</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IStreamContext.GetConsumers">
            <summary>
            Return a list of ConsumerInfo objects.
            </summary>
            <returns>The list of ConsumerInfo</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IStreamContext.GetMessage(System.UInt64)">
            <summary>
            Get MessageInfo for the message with the exact sequence in the stream.
            </summary>
            <param name="seq">the sequence number of the message</param>
            <returns>The MessageInfo</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IStreamContext.GetLastMessage(System.String)">
            <summary>
            Get MessageInfo for the last message of the subject.
            </summary>
            <param name="subject">the subject to get the last message for.</param>
            <returns>The MessageInfo</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IStreamContext.GetFirstMessage(System.String)">
            <summary>
            Get MessageInfo for the first message of the subject.
            </summary>
            <param name="subject">the subject to get the first message for.</param>
            <returns>The MessageInfo</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IStreamContext.GetNextMessage(System.UInt64,System.String)">
            <summary>
            Get MessageInfo for the message of the message sequence
            is equal to or greater the requested sequence for the subject.
            </summary>
            <param name="seq">the first possible sequence number of the message</param>
            <param name="subject">the subject to get the next message for.</param>
            <returns>The MessageInfo</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IStreamContext.DeleteMessage(System.UInt64)">
            <summary>
            Deletes a message, overwriting the message data with garbage
            This can be considered an expensive (time-consuming) operation, but is more secure.
            </summary>
            <param name="seq">the sequence number of the message</param>
            <returns>true if the delete succeeded</returns>
        </member>
        <member name="M:NATS.Client.JetStream.IStreamContext.DeleteMessage(System.UInt64,System.Boolean)">
            <summary>
            Deletes a message, optionally erasing the content of the message.
            </summary>
            <param name="seq">the sequence number of the message</param>
            <param name="erase">whether to erase the message (overwriting with garbage) or only mark it as erased.</param>
            <returns>true if the delete succeeded</returns>
        </member>
        <member name="T:NATS.Client.JetStream.IterableConsumer">
            <summary>
            Implementation for IIterableConsumer
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.JetStreamMsg.MetaData">
            <summary>
            Gets the metadata associated with a JetStream message.
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.JetStreamMsg.Ack">
            <summary>
            Acknowledges a JetStream messages received from a Consumer,
            indicating the message will not be resent.
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.JetStreamMsg.AckSync(System.Int32)">
            <summary>
            Acknowledges a JetStream messages received from a Consumer,
            indicating the message should not be received again later.
            A timeout of zero does not confirm the acknowledgement.
            </summary>
            <param name="timeout">the duration to wait for an ack in milliseconds
            confirmation</param>
        </member>
        <member name="M:NATS.Client.JetStream.JetStreamMsg.Nak">
            <summary>
            Acknowledges a JetStream message has been received but indicates
            that the message is not completely processed and should be sent
            again later.
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.JetStreamMsg.NakWithDelay(NATS.Client.Internals.Duration)">
            <summary>
            Acknowledges a JetStream message has been received but indicates
            that the message is not completely processed and should be sent
            again later, after at least the delay amount.
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.JetStreamMsg.NakWithDelay(System.Int64)">
            <summary>
            Acknowledges a JetStream message has been received but indicates
            that the message is not completely processed and should be sent
            again later, after at least the delay amount.
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.JetStreamMsg.Term">
            <summary>
            Prevents this message from ever being delivered regardless of
            maxDeliverCount.
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.JetStreamMsg.InProgress">
            <summary>
            Indicates that this message is being worked on and reset redelivery timer in the server.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.JetStreamMsg.IsJetStream">
            <summary>
            Checks if a message is from JetStream or is a standard message.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NATS.Client.JetStream.JetStreamMsg.Reply">
            <summary>
            A JetStream message does not have a reply that is presented
            to the application.
            </summary>
        </member>
        <member name="T:NATS.Client.JetStream.MetaData">
            <summary>
            JetStream message MetaData
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.MetaData.Prefix">
            <summary>
            Gets the prefix.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.MetaData.Stream">
            <summary>
            Gets the stream name.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.MetaData.Domain">
            <summary>
            Gets the domain name.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.MetaData.Consumer">
            <summary>
            Gets the consumer name.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.MetaData.NumDelivered">
            <summary>
            Number of delivered messages
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.MetaData.StreamSequence">
            <summary>
            Gets the Stream sequence number.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.MetaData.ConsumerSequence">
            <summary>
            Gets the Consumer sequence number.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.MetaData.Timestamp">
            <summary>
            Gets the timestamp of the message.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.MetaData.TimestampNanos">
            <summary>
            Gets the raw nanosecond timestamp of the message.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.MetaData.NumPending">
            <summary>
            Number of pending messages
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.JetStreamOptions.Prefix">
            <summary>
            Gets the prefix.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.JetStreamOptions.RequestTimeout">
            <summary>
            Gets the request timeout
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.JetStreamOptions.IsPublishNoAck">
            <summary>
            Gets is publish should be done in no ack (core) style
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.JetStreamOptions.IsDefaultPrefix">
            <summary>
            True if the prefix for this options is the default prefix.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.JetStreamOptions.IsOptOut290ConsumerCreate">
            <summary>
            Gets whether the opt-out of the server v2.9.0 consumer create api is set
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.JetStreamOptions.Builder">
            <summary>
            Gets the JetStreamOptions builder.
            </summary>
            <returns>
            The builder
            </returns>
        </member>
        <member name="M:NATS.Client.JetStream.JetStreamOptions.Builder(NATS.Client.JetStream.JetStreamOptions)">
            <summary>
            Gets the JetStreamOptions builder based on an existing JetStreamOptions object.
            </summary>
            <param name="jso">an existing JetStreamOptions object</param>
            <returns>The builder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.JetStreamOptions.JetStreamOptionsBuilder.#ctor">
            <summary>
            Construct a builder
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.JetStreamOptions.JetStreamOptionsBuilder.#ctor(NATS.Client.JetStream.JetStreamOptions)">
            <summary>
            Construct a builder from an existing JetStreamOptions object
            </summary>
            <param name="jso">an existing JetStreamOptions object</param>
        </member>
        <member name="M:NATS.Client.JetStream.JetStreamOptions.JetStreamOptionsBuilder.WithPrefix(System.String)">
            <summary>
            Sets the prefix for JetStream subjects. A prefix can be used in conjunction with
            user permissions to restrict access to certain JetStream instances.  This must
            match the prefix used in the server.
            </summary>
            <param name="prefix">The prefix.</param>
            <returns>The JetStreamOptionsBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.JetStreamOptions.JetStreamOptionsBuilder.WithDomain(System.String)">
            <summary>
            Sets the domain for JetStream subjects. A domain can be used in conjunction with
            user permissions to restrict access to certain JetStream instances.  This must
            match the domain used in the server.
            </summary>
            <param name="domain">The domain.</param>
            <returns>The JetStreamOptionsBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.JetStreamOptions.JetStreamOptionsBuilder.WithRequestTimeout(NATS.Client.Internals.Duration)">
            <summary>
            Sets the request timeout
            </summary>
            <param name="requestTimeout">The request timeout as Duration.</param>
            <returns>The JetStreamOptionsBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.JetStreamOptions.JetStreamOptionsBuilder.WithRequestTimeout(System.Int64)">
            <summary>
            Sets the request timeout
            </summary>
            <param name="requestTimeoutMillis">The request timeout in millis.</param>
            <returns>The JetStreamOptionsBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.JetStreamOptions.JetStreamOptionsBuilder.WithPublishNoAck(System.Boolean)">
            <summary>
            Sets the Publish No Ack Flag
            </summary>
            <returns>The JetStreamOptionsBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.JetStreamOptions.JetStreamOptionsBuilder.WithOptOut290ConsumerCreate(System.Boolean)">
            <summary>
            Sets whether to opt-out of the server v2.9.0 consumer create api. Default is false (opt-in)
            </summary>
            <param name="optOut"></param>
            <returns>The JetStreamOptionsBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.JetStreamOptions.JetStreamOptionsBuilder.Build">
            <summary>
            Builds the JetStreamOptions
            </summary>
            <returns>The JetStreamOptions object.</returns>
        </member>
        <member name="T:NATS.Client.JetStream.MessageConsumer">
            <summary>
            Interface definition for a Message Consumer
            </summary>
        </member>
        <member name="T:NATS.Client.JetStream.MessageConsumerBase">
            <summary>
            Base class for Message Consumer implementations
            </summary>
        </member>
        <member name="T:NATS.Client.JetStream.Mirror">
            <summary>
            Information about a mirror.
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.Mirror.#ctor(System.String,System.UInt64,System.DateTime,System.String,NATS.Client.JetStream.External,System.Collections.Generic.IList{NATS.Client.JetStream.SubjectTransform})">
            <summary>
            Construct a Mirror object
            </summary>
            <param name="name">the mirror stream name</param>
            <param name="startSeq">the start sequence</param>
            <param name="startTime">the start time</param>
            <param name="filterSubject">the filter subject</param>
            <param name="external">the external reference</param>
            <param name="subjectTransforms">the subject transforms, defaults to none</param>
        </member>
        <member name="M:NATS.Client.JetStream.Mirror.Builder">
            <summary>
            Creates a builder for a mirror object. 
            </summary>
            <returns>The Builder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.Mirror.Builder(NATS.Client.JetStream.Mirror)">
            <summary>
            Creates a builder for a mirror object based on an existing mirror object.
            </summary>
            <returns>The Builder</returns>
        </member>
        <member name="T:NATS.Client.JetStream.Mirror.MirrorBuilder">
            <summary>
            Mirror can be created using a MirrorBuilder. 
            </summary>
        </member>
        <member name="T:NATS.Client.JetStream.NATSJetStreamException">
            <summary>
            The exception thrown when there is an error with JetStream.
            </summary>
        </member>
        <member name="F:NATS.Client.JetStream.NATSJetStreamException.ErrorCodeUnspecified">
            <summary>
            Unspecified error code.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.NATSJetStreamException.ErrorCode">
            <summary>
            Gets the error code returned by JetStream.  Returns ErrorCodeUnspecified
            if the error is local.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.NATSJetStreamException.ApiErrorCode">
            <summary>
            Gets the error code returned by JetStream.  Returns ErrorCodeUnspecified
            if the error is local.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.NATSJetStreamException.ErrorDescription">
            <summary>
            Returns the description of the error.
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.NATSJetStreamException.#ctor(NATS.Client.JetStream.ApiResponse)">
            <summary>
            Construct a NATSJetStreamException from an ApiResponse that is an Error
            </summary>
            <param name="apiResponse"></param>
        </member>
        <member name="M:NATS.Client.JetStream.NATSJetStreamException.#ctor(NATS.Client.JetStream.Error)">
            <summary>
            Construct a NATSJetStreamException directly from an Error
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:NATS.Client.JetStream.NATSJetStreamException.#ctor(System.String)">
            <summary>
            Construct a NATSJetStreamException from a string.
            </summary>
            <param name="s">The exception message.</param>
        </member>
        <member name="M:NATS.Client.JetStream.OrderedConsumerConfiguration.#ctor">
            <summary>
            OrderedConsumerConfiguration creation works like a builder.
            The builder supports chaining and will create a default set of options if
            no methods are calls, including setting the filter subject to "&gt;"
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.OrderedConsumerConfiguration.WithFilterSubject(System.String)">
            <summary>
            Sets the filter subject of the OrderedConsumerConfiguration.
            </summary>
            <param name="filterSubject">the filter subject</param>
            <returns>Builder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.OrderedConsumerConfiguration.WithFilterSubjects(System.String[])">
            <summary>
            Sets the filter subject of the OrderedConsumerConfiguration.
            </summary>
            <param name="filterSubjects">one or more filter subjects</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.OrderedConsumerConfiguration.WithFilterSubjects(System.Collections.Generic.IList{System.String})">
            <summary>
            Sets the filter subject of the OrderedConsumerConfiguration.
            </summary>
            <param name="filterSubjects">one or more filter subjects</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.OrderedConsumerConfiguration.WithDeliverPolicy(System.Nullable{NATS.Client.JetStream.DeliverPolicy})">
            <summary>
            Sets the delivery policy of the OrderedConsumerConfiguration.
            </summary>
            <param name="deliverPolicy">the delivery policy.</param>
            <returns>Builder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.OrderedConsumerConfiguration.WithStartSequence(System.UInt64)">
            <summary>
            Sets the start sequence of the OrderedConsumerConfiguration.
            </summary>
            <param name="startSequence">the start sequence</param>
            <returns>Builder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.OrderedConsumerConfiguration.WithStartTime(System.DateTime)">
            <summary>
            Sets the start time of the OrderedConsumerConfiguration.
            </summary>
            <param name="startTime">the start time</param>
            <returns>Builder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.OrderedConsumerConfiguration.WithReplayPolicy(System.Nullable{NATS.Client.JetStream.ReplayPolicy})">
            <summary>
            Sets the replay policy of the OrderedConsumerConfiguration.
            </summary>
            <param name="replayPolicy">the replay policy.</param>
            <returns>Builder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.OrderedConsumerConfiguration.WithHeadersOnly(System.Nullable{System.Boolean})">
            <summary>
            set the headers only flag saying to deliver only the headers of
            messages in the stream and not the bodies
            </summary>
            <param name="headersOnly">the flag</param>
            <returns>Builder</returns>
        </member>
        <member name="T:NATS.Client.JetStream.OrderedConsumerContext">
            <summary>
            Implementation for the IOrderedConsumerContext
            </summary>
        </member>
        <member name="T:NATS.Client.JetStream.Placement">
            <summary>
            Placement requirements for a stream
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.Placement.Cluster">
            <summary>
            The desired cluster name to place the stream
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.Placement.Tags">
            <summary>
            Tags required on servers hosting this stream
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.Placement.#ctor(System.String)">
            <summary>
            Construct the Placement object
            </summary>
            <param name="cluster">The cluster name</param>
        </member>
        <member name="M:NATS.Client.JetStream.Placement.#ctor(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Construct the Placement object
            </summary>
            <param name="cluster">The cluster name</param>
            <param name="tags">The list of tags. May be null or empty</param>
        </member>
        <member name="M:NATS.Client.JetStream.Placement.#ctor(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Construct the Placement object
            </summary>
            <param name="cluster">The cluster name</param>
            <param name="tags">The list of tags. May be null or empty</param>
        </member>
        <member name="M:NATS.Client.JetStream.Placement.#ctor(System.Collections.Generic.IList{System.String})">
            <summary>
            Construct the Placement object
            </summary>
            <param name="tags">The list of tags. May be null or empty</param>
        </member>
        <member name="M:NATS.Client.JetStream.Placement.Builder">
            <summary>
            Creates a builder for a placements object. 
            </summary>
            <returns>The Builder</returns>
        </member>
        <member name="T:NATS.Client.JetStream.Placement.PlacementBuilder">
            <summary>
            Placement can be created using a PlacementBuilder. 
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.Placement.PlacementBuilder.WithCluster(System.String)">
            <summary>
            Set the cluster string.
            </summary>
            <param name="cluster">the cluster</param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.JetStream.Placement.PlacementBuilder.WithTags(System.Collections.Generic.IList{System.String})">
            <summary>
            Set the tags 
            </summary>
            <param name="tags">tags the list of tags</param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.JetStream.Placement.PlacementBuilder.WithTags(System.String[])">
            <summary>
            Set the tags 
            </summary>
            <param name="tags">tags the list of tags</param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.JetStream.Placement.PlacementBuilder.Build">
            <summary>
            Build a Placement object
            </summary>
            <returns>The Placement</returns>
        </member>
        <member name="F:NATS.Client.JetStream.PublishOptions.DefaultTimeout">
            <summary>
            The default timeout (2000ms)
            </summary>
        </member>
        <member name="F:NATS.Client.JetStream.PublishOptions.DefaultStream">
            <summary>
            The default stream name (unset)
            </summary>
        </member>
        <member name="F:NATS.Client.JetStream.PublishOptions.DefaultLastSequence">
            <summary>
            Default Last Sequence Number (unset)
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.PublishOptions.Stream">
            <summary>
            The stream name.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.PublishOptions.StreamTimeout">
            <summary>
            The stream timeout.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.PublishOptions.ExpectedStream">
            <summary>
            The Expected Stream.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.PublishOptions.ExpectedLastMsgId">
            <summary>
            The Expected Last Message Id.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.PublishOptions.ExpectedLastSeq">
            <summary>
            The Expected Last Sequence.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.PublishOptions.ExpectedLastSubjectSeq">
            <summary>
            The Expected Last Sequence.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.PublishOptions.MessageId">
            <summary>
            The Expected Message Id.
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.PublishOptions.Builder">
            <summary>
            Gets the publish options builder.
            </summary>
            <returns>
            The builder
            </returns>
        </member>
        <member name="T:NATS.Client.JetStream.PublishOptions.PublishOptionsBuilder">
            <summary>
            The PublishOptionsBuilder builds PublishOptions
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.PublishOptions.PublishOptionsBuilder.WithStream(System.String)">
            <summary>
            Set the stream name.
            </summary>
            <param name="stream">Name of the stream</param>
            <returns>The Builder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PublishOptions.PublishOptionsBuilder.WithTimeout(NATS.Client.Internals.Duration)">
            <summary>
            Set the stream timeout with a Duration
            </summary>
            <param name="timeout">The publish acknowledgement timeout as a Duration.</param>
            <returns>The PublishOptionsBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PublishOptions.PublishOptionsBuilder.WithTimeout(System.Int64)">
            <summary>
            Set the stream timeout in milliseconds
            </summary>
            <param name="timeoutMillis">The publish acknowledgement timeout as millis</param>
            <returns>The PublishOptionsBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PublishOptions.PublishOptionsBuilder.WithMessageId(System.String)">
            <summary>
            Set the message id.
            </summary>
            <param name="msgId">The message ID of these options.</param>
            <returns>The PublishOptionsBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PublishOptions.PublishOptionsBuilder.WithExpectedStream(System.String)">
            <summary>
            Set the expected stream name.
            </summary>
            <param name="stream">The expected stream name.</param>
            <returns>The PublishOptionsBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PublishOptions.PublishOptionsBuilder.WithExpectedLastMsgId(System.String)">
            <summary>
            Set the expected last message ID.
            </summary>
            <param name="lastMessageId">The expected last message ID.</param>
            <returns>The PublishOptionsBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PublishOptions.PublishOptionsBuilder.WithExpectedLastSequence(System.UInt64)">
            <summary>
            Set the expected sequence.
            </summary>
            <param name="sequence">The expected sequence.</param>
            <returns>The PublishOptionsBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PublishOptions.PublishOptionsBuilder.WithExpectedLastSubjectSequence(System.UInt64)">
            <summary>
            Set the expected subject sequence.
            </summary>
            <param name="sequence">The expected subject sequence.</param>
            <returns>The PublishOptionsBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PublishOptions.PublishOptionsBuilder.ClearExpected">
            <summary>
            Clears the expected so the build can be re-used.
            Clears the expectedLastId, expectedLastSequence and messageId fields.
            </summary>
            <returns>The PublishOptionsBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PublishOptions.PublishOptionsBuilder.Build">
            <summary>
            Builds the PublishOptions
            </summary>
            <returns>The PublishOptions object.</returns>
        </member>
        <member name="T:NATS.Client.JetStream.PullRequestOptions">
            <summary>
            The PullRequestOptions class specifies the options for pull requests
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.PullRequestOptions.BatchSize">
            <summary>
            The size of the batch
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.PullRequestOptions.MaxBytes">
            <summary>
            The maximum number of bytes in the batch
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.PullRequestOptions.NoWait">
            <summary>
            The no wait flag
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.PullRequestOptions.ExpiresIn">
            <summary>
            The expires in setting
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.PullRequestOptions.IdleHeartbeat">
            <summary>
            The idle heartbeat time
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.PullRequestOptions.Builder(System.Int32)">
            <summary>
            Creates a builder for the pull options, with batch size since it's always required
            </summary>
            <param name="batchSize">the size of the batch. Must be greater than 0</param>
            <returns>The builder</returns>
        </member>
        <member name="T:NATS.Client.JetStream.PullRequestOptions.PullRequestOptionsBuilder">
            <summary>
            The PullRequestOptionsBuilder builds PullRequestOptions
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.PullRequestOptions.PullRequestOptionsBuilder.WithBatchSize(System.Int32)">
            <summary>
            Set the batch size for the pull
            </summary>
            <param name="batchSize">The size of the batch. Must be greater than 0</param>
            <returns>The builder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PullRequestOptions.PullRequestOptionsBuilder.WithMaxBytes(System.Int64)">
            <summary>
            Set the maximum bytes for the pull
            </summary>
            <param name="maxBytes">The maximum bytes</param>
            <returns>The builder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PullRequestOptions.PullRequestOptionsBuilder.WithNoWait">
            <summary>
            Set the no wait to true
            </summary>
            <returns>The builder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PullRequestOptions.PullRequestOptionsBuilder.WithNoWait(System.Boolean)">
            <summary>
            Set the no wait flag
            </summary>
            <param name="noWait">The flag</param>
            <returns>The builder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PullRequestOptions.PullRequestOptionsBuilder.WithExpiresIn(System.Int64)">
            <summary>
            Set the expires duration time in millis
            </summary>
            <param name="expiresInMillis">The millis</param>
            <returns>The builder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PullRequestOptions.PullRequestOptionsBuilder.WithExpiresIn(NATS.Client.Internals.Duration)">
            <summary>
            Set the expires duration
            </summary>
            <param name="expiresIn">The duration</param>
            <returns>The builder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PullRequestOptions.PullRequestOptionsBuilder.WithIdleHeartbeat(System.Int64)">
            <summary>
            Set the idle heartbeat time in millis
            </summary>
            <param name="idleHeartbeatMillis">The millis</param>
            <returns>The builder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PullRequestOptions.PullRequestOptionsBuilder.WithIdleHeartbeat(NATS.Client.Internals.Duration)">
            <summary>
            Set the idle heartbeat duration
            </summary>
            <param name="idleHeartbeat">The duration</param>
            <returns>The builder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PullRequestOptions.PullRequestOptionsBuilder.Build">
            <summary>
            Builds the PullRequestOptions
            </summary>
            <returns>The PullRequestOptions object.</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PullSubscribeOptions.BindTo(System.String,System.String)">
            <summary>
            Create PullSubscribeOptions where you are binding to
            a specific stream, specific durable and are using bind mode
            </summary>
            <param name="stream">the stream name to bind to</param>
            <param name="name">the consumer name, commonly the durable name</param>
            <returns>the PullSubscribeOptions</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PullSubscribeOptions.FastBindTo(System.String,System.String)">
            <summary>
            Create PullSubscribeOptions where you are fast-binding to
            a specific stream and consumer by name.
            The client does not validate that the provided consumer configuration
            is consistent with the server version or that
            consumer type (push versus pull) matches the subscription type.
            An inconsistent consumer configuration for instance can result in
            receiving messages from unexpected subjects.
            A consumer type mismatch will result in an error from the server.
            </summary>
            <param name="stream">the stream name to bind to</param>
            <param name="name">the consumer name, commonly the durable name</param>
            <returns>the PushSubscribeOptions</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PullSubscribeOptions.Builder">
            <summary>
            Gets the PullSubscribeOptions builder.
            </summary>
            <returns>The PullSubscribeOptionsBuilder</returns>
        </member>
        <member name="T:NATS.Client.JetStream.PullSubscribeOptions.PullSubscribeOptionsSubscribeOptionsBuilder">
            <summary>
            PullSubscribeOptionsSubscribeOptionsBuilder was a naming type. Please use the simpler PullSubscribeOptionsBuilder
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.PullSubscribeOptions.PullSubscribeOptionsSubscribeOptionsBuilder.WithFastBind(System.Boolean)">
            <summary>
            Specify binding to an existing consumer via name.
            The client does not validate that the provided consumer configuration
            is consistent with the server version or that
            consumer type (push versus pull) matches the subscription type.
            An inconsistent consumer configuration for instance can result in
            receiving messages from unexpected subjects.
            A consumer type mismatch will result in an error from the server.
            </summary>
            <param name="isFastBind">whether to fast bind or not</param>
            <returns>The builder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PullSubscribeOptions.PullSubscribeOptionsSubscribeOptionsBuilder.Build">
            <summary>
            Builds the PullSubscribeOptions
            </summary>
            <returns>The PullSubscribeOptions object.</returns>
        </member>
        <member name="P:NATS.Client.JetStream.PurgeOptions.Subject">
            <summary>
            The subject to purge
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.PurgeOptions.Sequence">
            <summary>
            The upper-bound sequence for messages to be deleted
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.PurgeOptions.Keep">
            <summary>
            The max number of messages to keep
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.PurgeOptions.Builder">
            <summary>
            Gets the purge options builder.
            </summary>
            <returns>
            The builder
            </returns>
        </member>
        <member name="M:NATS.Client.JetStream.PurgeOptions.WithSubject(System.String)">
            <summary>
            Gets the purge options with a subject.
            </summary>
            <returns>
            The purge options
            </returns>
        </member>
        <member name="T:NATS.Client.JetStream.PurgeOptions.PurgeOptionsBuilder">
            <summary>
            The PurgeOptionsBuilder builds PurgeOptions
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.PurgeOptions.PurgeOptionsBuilder.WithSubject(System.String)">
            <summary>
            Set the subject to filter the purge. Wildcards allowed.
            </summary>
            <param name="subject">The subject</param>
            <returns>The Builder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PurgeOptions.PurgeOptionsBuilder.WithSequence(System.UInt64)">
            <summary>
            Set upper-bound sequence for messages to be deleted
            </summary>
            <param name="sequence">The upper-bound sequence.</param>
            <returns>The PurgeOptionsBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PurgeOptions.PurgeOptionsBuilder.WithKeep(System.UInt64)">
            <summary>
            Set the max number of messages to keep.
            </summary>
            <param name="keep">The max number of messages to keep.</param>
            <returns>The PurgeOptionsBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PurgeOptions.PurgeOptionsBuilder.Build">
            <summary>
            Builds the PurgeOptions
            </summary>
            <returns>The PurgeOptions object.</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PushSubscribeOptions.ForStream(System.String)">
            <summary>
            Create PushSubscribeOptions where you are binding to
            a specific stream, which could be a stream or a mirror
            </summary>
            <param name="stream">the stream name to bind to</param>
            <returns>the PushSubscribeOptions</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PushSubscribeOptions.BindTo(System.String,System.String)">
            <summary>
            Create PushSubscribeOptions where you are binding to
            a specific stream, specific durable and are using bind to mode
            </summary>
            <param name="stream">the stream name to bind to</param>
            <param name="durable">the durable name</param>
            <returns>the PushSubscribeOptions</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PushSubscribeOptions.Builder">
            <summary>
            Gets the PushSubscribeOptions builder.
            </summary>
            <returns>
            The builder
            </returns>
        </member>
        <member name="M:NATS.Client.JetStream.PushSubscribeOptions.PushSubscribeOptionsBuilder.WithOrdered(System.Boolean)">
            <summary>
            Set the ordered consumer flag. FOR FUTURE BEHAVIOR. TODO / NOT YET USED.
            </summary>
            <param name="ordered">flag indicating whether this subscription should be ordered</param>
            <returns>The PushSubscribeOptionsBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PushSubscribeOptions.PushSubscribeOptionsBuilder.WithDeliverSubject(System.String)">
            <summary>
            Set the deliver subject 
            </summary>
            <param name="deliverSubject">the deliver subject value</param>
            <returns>The PushSubscribeOptionsBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PushSubscribeOptions.PushSubscribeOptionsBuilder.WithDeliverGroup(System.String)">
            <summary>
            Set the deliver group 
            </summary>
            <param name="deliverGroup">the deliver group value</param>
            <returns>The PushSubscribeOptionsBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PushSubscribeOptions.PushSubscribeOptionsBuilder.WithPendingMessageLimit(System.Int64)">
            <summary>
            Set the maximum number of messages that push subscriptions can hold
            in the internal (pending) message queue. Defaults to 512 * 1024  (Nats.SubPendingMsgsLimit)
            </summary>
            <param name="pendingMessageLimit">the number of messages</param>
            <returns>The PushSubscribeOptionsBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PushSubscribeOptions.PushSubscribeOptionsBuilder.WithPendingByteLimit(System.Int64)">
            <summary>
            Set the maximum number of bytes that push subscriptions can hold
            in the internal (pending) message queue. Defaults to 64 * 1024 * 1024  (Nats.SubPendingBytesLimit)
            </summary>
            <param name="pendingByteLimit">the number of bytes</param>
            <returns>The PushSubscribeOptionsBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.PushSubscribeOptions.PushSubscribeOptionsBuilder.Build">
            <summary>
            Builds the PushSubscribeOptions
            </summary>
            <returns>The PushSubscribeOptions object.</returns>
        </member>
        <member name="T:NATS.Client.JetStream.Republish">
            <summary>
            Republish options for a stream
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.Republish.Source">
            <summary>
            The Published Subject-matching filter
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.Republish.Destination">
            <summary>
            The RePublish Subject template
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.Republish.HeadersOnly">
            <summary>
            Whether to RePublish only headers (no body)
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.Republish.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Construct the Republish object
            </summary>
            <param name="source">the Published Subject-matching filter</param>
            <param name="destination">the RePublish Subject template</param>
            <param name="headersOnly">Whether to RePublish only headers (no body)</param>
        </member>
        <member name="M:NATS.Client.JetStream.Republish.Builder">
            <summary>
            Creates a builder for a republish object. 
            </summary>
            <returns>The Builder</returns>
        </member>
        <member name="T:NATS.Client.JetStream.Republish.RepublishBuilder">
            <summary>
            Republish can be created using a RepublishBuilder. 
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.Republish.RepublishBuilder.WithSource(System.String)">
            <summary>
            Set the Published Subject-matching filter.
            </summary>
            <param name="source">the source</param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.JetStream.Republish.RepublishBuilder.WithDestination(System.String)">
            <summary>
            Set the RePublish Subject template
            </summary>
            <param name="destination">the destination</param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.JetStream.Republish.RepublishBuilder.WithHeadersOnly(System.Boolean)">
            <summary>
            Set Whether to RePublish only headers (no body)
            </summary>
            <param name="headersOnly">the headers only flag</param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.JetStream.Republish.RepublishBuilder.Build">
            <summary>
            Build a Republish object
            </summary>
            <returns>The Republish</returns>
        </member>
        <member name="P:NATS.Client.JetStream.SequenceInfo.LastActive">
            <summary>
            The last time a message was delivered or acknowledged (for ack_floor)
            </summary>
        </member>
        <member name="T:NATS.Client.JetStream.Source">
            <summary>
            Information about an upstream stream source in a mirror
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.Source.#ctor(System.String,System.UInt64,System.DateTime,System.String,NATS.Client.JetStream.External,System.Collections.Generic.IList{NATS.Client.JetStream.SubjectTransform})">
            <summary>
            Construct a Source object
            </summary>
            <param name="name">the source stream name</param>
            <param name="startSeq">the start sequence</param>
            <param name="startTime">the start time</param>
            <param name="filterSubject">the filter subject</param>
            <param name="external">the external reference</param>
            <param name="subjectTransforms">the subject transforms, defaults to none</param>
        </member>
        <member name="M:NATS.Client.JetStream.Source.Builder">
            <summary>
            Creates a builder for a source object. 
            </summary>
            <returns>The Builder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.Source.Builder(NATS.Client.JetStream.Source)">
            <summary>
            Creates a builder for a source object based on an existing source object.
            </summary>
            <returns>The Builder</returns>
        </member>
        <member name="T:NATS.Client.JetStream.Source.SourceBuilder">
            <summary>
            Source can be created using a SourceBuilder. 
            </summary>
        </member>
        <member name="T:NATS.Client.JetStream.SourceBase">
            <summary>
            Information about an upstream stream source or a mirror
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.SourceBase.Name">
            <summary>
            Source stream name.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.SourceBase.StartSeq">
            <summary>
            The sequence to start replicating from.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.SourceBase.StartTime">
            <summary>
            The time stamp to start replicating from.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.SourceBase.FilterSubject">
            <summary>
            The subject filter to replicate
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.SourceBase.External">
            <summary>
            External stream reference
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.SourceBase.SubjectTransforms">
            <summary>
            The subject transforms
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.SourceBase.SourceBaseBuilder`2.WithName(System.String)">
            <summary>
            Set the source name.
            </summary>
            <param name="name">the name</param>
            <returns>The Builder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.SourceBase.SourceBaseBuilder`2.WithStartSeq(System.UInt64)">
            <summary>
            Set the start sequence.
            </summary>
            <param name="startSeq">the start sequence</param>
            <returns>The Builder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.SourceBase.SourceBaseBuilder`2.WithStartTime(System.DateTime)">
            <summary>
            Set the start time.
            </summary>
            <param name="startTime">the start time</param>
            <returns>The Builder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.SourceBase.SourceBaseBuilder`2.WithFilterSubject(System.String)">
            <summary>
            Set the filter subject.
            </summary>
            <param name="filterSubject">the filterSubject</param>
            <returns>The Builder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.SourceBase.SourceBaseBuilder`2.WithExternal(NATS.Client.JetStream.External)">
            <summary>
            Set the external reference.
            </summary>
            <param name="external">the external</param>
            <returns>The Builder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.SourceBase.SourceBaseBuilder`2.WithDomain(System.String)">
            <summary>
            Set the external reference by using a domain based prefix.
            </summary>
            <param name="domain">the domain</param>
            <returns>The Builder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.SourceBase.SourceBaseBuilder`2.WithSubjectTransforms(NATS.Client.JetStream.SubjectTransform[])">
            <summary>
            Set the subject transforms.
            </summary>
            <param name="subjectTransforms">the subjectTransforms</param>
            <returns>The Builder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.SourceBase.SourceBaseBuilder`2.WithSubjectTransforms(System.Collections.Generic.IList{NATS.Client.JetStream.SubjectTransform})">
            <summary>
            Set the subject transforms.
            </summary>
            <param name="subjectTransforms">the subjectTransforms</param>
            <returns>The Builder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.SourceBase.SourceBaseBuilder`2.Build">
            <summary>
            Build a Source object
            </summary>
            <returns>The Source</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithName(System.String)">
            <summary>
            Sets the name of the stream.
            </summary>
            <param name="name">name of the stream.</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithDescription(System.String)">
            <summary>
            Sets the description.
            </summary>
            <param name="description">the description</param>
            <returns>The ConsumerConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithSubjects(System.String[])">
            <summary>
            Sets the subjects in the StreamConfiguration.
            </summary>
            <param name="subjects">the stream's subjects</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithSubjects(System.Collections.Generic.List{System.String})">
            <summary>
            Sets the subjects in the StreamConfiguration.
            </summary>
            <param name="subjects">the stream's subjects</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.AddSubjects(System.String[])">
            <summary>
            Add the subjects in the StreamConfiguration.
            </summary>
            <param name="subjects">the stream's subjects</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.AddSubjects(System.Collections.Generic.List{System.String})">
            <summary>
            Add the subjects in the StreamConfiguration.
            </summary>
            <param name="subjects">the stream's subjects</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithRetentionPolicy(System.Nullable{NATS.Client.JetStream.RetentionPolicy})">
            <summary>
            Sets the retention policy in the StreamConfiguration.
            </summary>
            <param name="policy">the retention policy of the StreamConfiguration</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithCompressionOption(System.Nullable{NATS.Client.JetStream.CompressionOption})">
            <summary>
            Sets the compression option in the StreamConfiguration.
            </summary>
            <param name="option">the compression option of the StreamConfiguration</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithMaxConsumers(System.Int64)">
            <summary>
            Sets the maximum number of consumers in the StreamConfiguration.
            </summary>
            <param name="maxConsumers">the maximum number of consumers</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithMaxMessages(System.Int64)">
            <summary>
            Sets the maximum number of messages in the StreamConfiguration.
            </summary>
            <param name="maxMsgs">the maximum number of messages</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithMaxMessagesPerSubject(System.Int64)">
            <summary>
            Sets the maximum number of message per subject in the StreamConfiguration.
            </summary>
            <param name="maxMsgsPerSubject">the maximum number of messages</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithMaxBytes(System.Int64)">
            <summary>
            Sets the maximum number of bytes in the StreamConfiguration.
            </summary>
            <param name="maxBytes">the maximum number of bytes</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithMaxAge(NATS.Client.Internals.Duration)">
            <summary>
            Sets the maximum age in the StreamConfiguration.
            </summary>
            <param name="maxAge">the maximum message age as a Duration</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithMaxAge(System.Int64)">
            <summary>
            Sets the maximum age in the StreamConfiguration.
            </summary>
            <param name="maxAgeMillis">the maximum message age as millis</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithMaxMsgSize(System.Int64)">
            <summary>
            Sets the maximum message size in the StreamConfiguration.
            </summary>
            <param name="maxMsgSize">the maximum message size</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithMaximumMessageSize(System.Int32)">
            <summary>
            Sets the maximum message size in the StreamConfiguration.
            </summary>
            <param name="maxMsgSize">the maximum message size</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithStorageType(System.Nullable{NATS.Client.JetStream.StorageType})">
            <summary>
            Sets the storage type in the StreamConfiguration.
            </summary>
            <param name="storageType">the storage type</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithReplicas(System.Int32)">
            <summary>
            Sets the number of replicas a message must be stored on in the StreamConfiguration.
            </summary>
            <param name="replicas">the number of replicas to store this message on</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithNoAck(System.Boolean)">
            <summary>
            Sets the acknowledgement mode of the StreamConfiguration.  if no acknowledgements are
            set, then acknowledgements are not sent back to the client.  The default is false.
            </summary>
            <param name="noAck">true to disable acknowledgements.</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithTemplateOwner(System.String)">
            <summary>
            Sets the template a stream in the form of raw JSON.
            </summary>
            <param name="templateOwner">the stream template of the stream.</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithDiscardPolicy(System.Nullable{NATS.Client.JetStream.DiscardPolicy})">
            <summary>
            Sets the discard policy in the StreamConfiguration.
            </summary>
            <param name="policy">the discard policy of the StreamConfiguration</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithDuplicateWindow(NATS.Client.Internals.Duration)">
            <summary>
            Sets the duplicate checking window in the the StreamConfiguration.  A Duration.Zero
            disables duplicate checking.  Duplicate checking is disabled by default.
            </summary>
            <param name="window">duration to hold message ids for duplicate checking.</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithDuplicateWindow(System.Int64)">
            <summary>
            Sets the duplicate checking window in the the StreamConfiguration.  A Duration.Zero
            disables duplicate checking.  Duplicate checking is disabled by default.
            </summary>
            <param name="windowMillis">duration to hold message ids for duplicate checking.</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithPlacement(NATS.Client.JetStream.Placement)">
            <summary>
            Sets the placement directive object
            </summary>
            <param name="placement">the placement directive object</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithRepublish(NATS.Client.JetStream.Republish)">
            <summary>
            Sets the republish object
            </summary>
            <param name="republish">the republish object</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithSubjectTransform(NATS.Client.JetStream.SubjectTransform)">
            <summary>
            Sets the subjectTransform object
            </summary>
            <param name="subjectTransform">the subjectTransform object</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithConsumerLimits(NATS.Client.JetStream.ConsumerLimits)">
            <summary>
            Sets the consumerLimits object
            </summary>
            <param name="consumerLimits">the consumerLimits object</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithMirror(NATS.Client.JetStream.Mirror)">
            <summary>
            Sets the mirror  object
            </summary>
            <param name="mirror">the mirror object</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithSources(NATS.Client.JetStream.Source[])">
            <summary>
            Sets the sources in the StreamConfiguration.
            </summary>
            <param name="sources">the stream's sources</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithSources(System.Collections.Generic.List{NATS.Client.JetStream.Source})">
            <summary>
            Sets the sources in the StreamConfiguration.
            </summary>
            <param name="sources">the stream's sources</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.AddSources(NATS.Client.JetStream.Source[])">
            <summary>
            Sets the sources in the StreamConfiguration.
            </summary>
            <param name="sources">the stream's sources</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.AddSources(System.Collections.Generic.List{NATS.Client.JetStream.Source})">
            <summary>
            Sets the sources in the StreamConfiguration.
            </summary>
            <param name="sources">the stream's sources</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.AddSource(NATS.Client.JetStream.Source)">
            <summary>
            Add a source into the StreamConfiguration.
            </summary>
            <param name="source"></param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithAllowRollup(System.Boolean)">
            <summary>
            Sets the Allow Rollup mode of the StreamConfiguration.
            </summary>
            <param name="allowRollup">true to allow rollup.</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithAllowDirect(System.Boolean)">
            <summary>
            Set whether to allow direct message access for a stream
            </summary>
            <param name="allowDirect">the allow direct setting.</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithMirrorDirect(System.Boolean)">
            <summary>
            Set whether to allow unified direct access for mirrors
            </summary>
            <param name="mirrorDirect">the mirror direct setting.</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithDenyDelete(System.Boolean)">
            <summary>
            Sets the Deny Delete mode of the StreamConfiguration.
            </summary>
            <param name="denyDelete">true to deny delete.</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithDenyPurge(System.Boolean)">
            <summary>
            Sets the Deny Purge mode of the StreamConfiguration.
            </summary>
            <param name="denyPurge">true to deny purge.</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithDiscardNewPerSubject(System.Boolean)">
            <summary>
            Set whether discard policy new with max message per subject applies to existing subjects, not just new subjects.
            </summary>
            <param name="discardNewPerSubject">true to deny purge.</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithFirstSequence(System.UInt64)">
            <summary>
            Sets the first sequence to be used. 1 is the default. 0 is treated as 1.
            </summary>
            <param name="firstSequence">specify the first_seq in the stream config when creating the stream.</param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.Seal">
            <summary>
            Set this stream to be sealed. This is irreversible.
            </summary>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.WithMetadata(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Sets the metadata for the configuration 
            </summary>
            <param name="metadata">the metadata dictionary</param>
            <returns>The StreamConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.StreamConfiguration.StreamConfigurationBuilder.Build">
            <summary>
            Builds the ConsumerConfiguration
            </summary>
            <returns>The StreamConfiguration</returns>
        </member>
        <member name="T:NATS.Client.JetStream.StreamContext">
            <summary>
            Implementation for IStreamContext
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.StreamInfoOptions.Builder">
            <summary>
            Gets the stream info options builder.
            </summary>
            <returns>
            The builder
            </returns>
        </member>
        <member name="T:NATS.Client.JetStream.SubjectTransform">
            <summary>
            SubjectTransform options for a stream
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.SubjectTransform.Source">
            <summary>
            The Published subject matching filter
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.SubjectTransform.Destination">
            <summary>
            The SubjectTransform Subject template
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.SubjectTransform.#ctor(System.String,System.String)">
            <summary>
            Construct the SubjectTransform object
            </summary>
            <param name="source">the Published subject matching filter</param>
            <param name="destination">the SubjectTransform Subject template</param>
        </member>
        <member name="M:NATS.Client.JetStream.SubjectTransform.Builder">
            <summary>
            Creates a builder for a SubjectTransform object. 
            </summary>
            <returns>The Builder</returns>
        </member>
        <member name="T:NATS.Client.JetStream.SubjectTransform.SubjectTransformBuilder">
            <summary>
            SubjectTransform can be created using a SubjectTransformBuilder. 
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.SubjectTransform.SubjectTransformBuilder.WithSource(System.String)">
            <summary>
            Set the Published subject matching filter.
            </summary>
            <param name="source">the source</param>
            <returns>The SubjectTransformBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.SubjectTransform.SubjectTransformBuilder.WithDestination(System.String)">
            <summary>
            Set the SubjectTransform Subject template
            </summary>
            <param name="destination">the destination</param>
            <returns>The SubjectTransformBuilder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.SubjectTransform.SubjectTransformBuilder.Build">
            <summary>
            Build a SubjectTransform object
            </summary>
            <returns>The SubjectTransform object</returns>
        </member>
        <member name="T:NATS.Client.JetStream.SubscribeOptions">
            <summary>
            The base class for all Subscribe Options containing a stream and
            consumer configuration.
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.SubscribeOptions.Durable">
            <summary>
            Gets the durable name
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.SubscribeOptions.DeliverSubject">
            <summary>
            Gets the deliver subject
            </summary>
        </member>
        <member name="P:NATS.Client.JetStream.SubscribeOptions.DeliverGroup">
            <summary>
            Gets the deliver group
            </summary>
        </member>
        <member name="M:NATS.Client.JetStream.SubscribeOptions.SubscribeOptionsBuilder`2.WithStream(System.String)">
            <summary>
            Set the stream name
            </summary>
            <param name="stream">the stream name</param>
            <returns>The builder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.SubscribeOptions.SubscribeOptionsBuilder`2.WithDurable(System.String)">
            <summary>
            Sets the durable name for the consumer.
            Null or empty clears the field
            </summary>
            <param name="durable">the durable value</param>
            <returns>The B</returns>
        </member>
        <member name="M:NATS.Client.JetStream.SubscribeOptions.SubscribeOptionsBuilder`2.WithName(System.String)">
            <summary>
            Sets the name for the consumer.
            Null or empty clears the field
            </summary>
            <param name="name">the durable value</param>
            <returns>The B</returns>
        </member>
        <member name="M:NATS.Client.JetStream.SubscribeOptions.SubscribeOptionsBuilder`2.WithBind(System.Boolean)">
            <summary>
            Specify binding to an existing consumer via name.
            The client validates regular (non-fast)
            binds to ensure that provided consumer configuration
            is consistent with the server version and that
            consumer type (push versus pull) matches the subscription type.
            </summary>
            <param name="isBind">the bind flag</param>
            <returns>The builder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.SubscribeOptions.SubscribeOptionsBuilder`2.WithConfiguration(NATS.Client.JetStream.ConsumerConfiguration)">
            <summary>
            Set the ConsumerConfiguration
            </summary>
            <param name="configuration">the ConsumerConfiguration object</param>
            <returns>The builder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.SubscribeOptions.SubscribeOptionsBuilder`2.WithMessageAlarmTime(System.Int32)">
            <summary>
            Set the total amount of time to not receive any messages or heartbeats
            before calling the ErrorListener heartbeatAlarm 
            </summary>
            <param name="messageAlarmTime"> the time</param>
            <returns>The builder</returns>
        </member>
        <member name="M:NATS.Client.JetStream.SubscribeOptions.SubscribeOptionsBuilder`2.Build">
            <summary>
            Builds the SubscribeOptions
            </summary>
            <returns>The SubscribeOptions object.</returns>
        </member>
        <member name="P:NATS.Client.KeyValue.IKeyValue.BucketName">
            <summary>
            The name of the bucket
            </summary>
        </member>
        <member name="M:NATS.Client.KeyValue.IKeyValue.Get(System.String)">
            <summary>
            Get the entry for a key
            when the key exists and is live (not deleted and not purged)
            </summary>
            <param name="key">the key</param>
            <returns>The entry</returns>
        </member>
        <member name="M:NATS.Client.KeyValue.IKeyValue.Get(System.String,System.UInt64)">
            <summary>
            Get the specific revision of an entry for a key
            when the key exists and is live (not deleted and not purged)
            </summary>
            <param name="key">the key</param>
            <param name="revision">the specific revision</param>
            <returns>The entry</returns>
        </member>
        <member name="M:NATS.Client.KeyValue.IKeyValue.Put(System.String,System.Byte[])">
            <summary>
            Put a byte[] as the value for a key
            </summary>
            <param name="key">the key</param>
            <param name="value">the bytes of the value</param>
            <returns>the revision number for the key</returns>
        </member>
        <member name="M:NATS.Client.KeyValue.IKeyValue.Put(System.String,System.String)">
            <summary>
            Put a string as the value for a key
            </summary>
            <param name="key">the key</param>
            <param name="value">the UTF-8 string</param>
            <returns>the revision number for the key</returns>
        </member>
        <member name="M:NATS.Client.KeyValue.IKeyValue.Put(System.String,System.Int64)">
             <summary>
            Put a long as the value for a key
             </summary>
             <param name="key">the key</param>
             <param name="value">the number</param>
             <returns>the revision number for the key</returns>
        </member>
        <member name="M:NATS.Client.KeyValue.IKeyValue.Create(System.String,System.Byte[])">
            <summary>
            Put as the value for a key iff the key does not exist (there is no history)
            or is deleted (history shows the key is deleted)
            </summary>
            <param name="key">the key</param>
            <param name="value">the bytes of the value</param>
            <returns>the revision number for the key</returns>
        </member>
        <member name="M:NATS.Client.KeyValue.IKeyValue.Update(System.String,System.Byte[],System.UInt64)">
            <summary>
            Put as the value for a key iff the key exists and its last revision matches the expected
            </summary>
            <param name="key">the key</param>
            <param name="value">the bytes of the value</param>
            <param name="expectedRevision"></param>
            <returns>the revision number for the key</returns>
        </member>
        <member name="M:NATS.Client.KeyValue.IKeyValue.Delete(System.String)">
            <summary>
            Soft deletes the key by placing a delete marker. 
            </summary>
            <param name="key">the key</param>
        </member>
        <member name="M:NATS.Client.KeyValue.IKeyValue.Delete(System.String,System.UInt64)">
            <summary>
            Soft deletes the key by placing a delete marker iff the key exists and its last revision matches the expected.
            </summary>
            <param name="key">the key</param>
            <param name="expectedRevision">the expected last revision</param>
        </member>
        <member name="M:NATS.Client.KeyValue.IKeyValue.Purge(System.String)">
            <summary>
            Purge all values/history from the specific key. 
            </summary>
            <param name="key">the key</param>
        </member>
        <member name="M:NATS.Client.KeyValue.IKeyValue.Purge(System.String,System.UInt64)">
            <summary>
            Purge all values/history from the specific key iff the key exists and its last revision matches the expected. 
            </summary>
            <param name="key">the key</param>
            <param name="expectedRevision">the expected last revision</param>
        </member>
        <member name="M:NATS.Client.KeyValue.IKeyValue.Watch(System.String,NATS.Client.KeyValue.IKeyValueWatcher,NATS.Client.KeyValue.KeyValueWatchOption[])">
            <summary>
            Watch updates for a specific key.
            </summary>
            <param name="key">the key</param>
            <param name="watcher">the watcher</param>
            <param name="watchOptions">the watch options to apply. If multiple conflicting options are supplied, the last options wins.</param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.KeyValue.IKeyValue.Watch(System.String,NATS.Client.KeyValue.IKeyValueWatcher,System.UInt64,NATS.Client.KeyValue.KeyValueWatchOption[])">
            <summary>
            Watch updates for a specific key, starting from a specific revision.
            </summary>
            <param name="key">the key</param>
            <param name="watcher">the watcher</param>
            <param name="fromRevision">the revision to start from</param>
            <param name="watchOptions">the watch options to apply. If multiple conflicting options are supplied, the last options wins.</param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.KeyValue.IKeyValue.Watch(System.Collections.Generic.IList{System.String},NATS.Client.KeyValue.IKeyValueWatcher,NATS.Client.KeyValue.KeyValueWatchOption[])">
            <summary>
            Watch updates for a specific keys.
            </summary>
            <param name="keys">the keys</param>
            <param name="watcher">the watcher</param>
            <param name="watchOptions">the watch options to apply. If multiple conflicting options are supplied, the last options wins.</param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.KeyValue.IKeyValue.Watch(System.Collections.Generic.IList{System.String},NATS.Client.KeyValue.IKeyValueWatcher,System.UInt64,NATS.Client.KeyValue.KeyValueWatchOption[])">
            <summary>
            Watch updates for a specific keys, starting from a specific revision.
            </summary>
            <param name="keys">the keys</param>
            <param name="watcher">the watcher</param>
            <param name="fromRevision">the revision to start from</param>
            <param name="watchOptions">the watch options to apply. If multiple conflicting options are supplied, the last options wins.</param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.KeyValue.IKeyValue.WatchAll(NATS.Client.KeyValue.IKeyValueWatcher,NATS.Client.KeyValue.KeyValueWatchOption[])">
            <summary>
            Watch updates for all keys
            </summary>
            <param name="watcher">the watcher</param>
            <param name="watchOptions">the watch options to apply. If multiple conflicting options are supplied, the last options wins.</param>
            <returns>The KeyValueWatchSubscription</returns>
        </member>
        <member name="M:NATS.Client.KeyValue.IKeyValue.WatchAll(NATS.Client.KeyValue.IKeyValueWatcher,System.UInt64,NATS.Client.KeyValue.KeyValueWatchOption[])">
            <summary>
            Watch updates for all keys, starting from a specific revision
            </summary>
            <param name="watcher">the watcher</param>
            <param name="fromRevision">the revision to start from</param>
            <param name="watchOptions">the watch options to apply. If multiple conflicting options are supplied, the last options wins.</param>
            <returns>The KeyValueWatchSubscription</returns>
        </member>
        <member name="M:NATS.Client.KeyValue.IKeyValue.Keys">
            <summary>
            Get a list of the keys in a bucket.
            </summary>
            <returns>The list of keys</returns>
        </member>
        <member name="M:NATS.Client.KeyValue.IKeyValue.Keys(System.String)">
            <summary>
            Get a list of the keys in a bucket filtered by a
            subject-like string, for instance "key" or "key.foo.*" or "key.&gt;"
            </summary>
            <param name="filter">the subject like key filter</param>
            <returns>The list of keys</returns>
        </member>
        <member name="M:NATS.Client.KeyValue.IKeyValue.Keys(System.Collections.Generic.IList{System.String})">
            <summary>
            Get a list of the keys in a bucket filtered by
            subject-like strings, for instance "aaa.*", "bbb.*;"
            </summary>
            <param name="filters">the subject like key filters</param>
            <returns>The list of keys</returns>
        </member>
        <member name="M:NATS.Client.KeyValue.IKeyValue.History(System.String)">
            <summary>
            Get the history (list of KeyValueEntry) for a key
            </summary>
            <param name="key">the key</param>
            <returns>The list of KeyValueEntry</returns>
        </member>
        <member name="M:NATS.Client.KeyValue.IKeyValue.PurgeDeletes">
            <summary>
            Remove history from all keys that currently are deleted or purged,
            using a default KeyValuePurgeOptions
            </summary>
        </member>
        <member name="M:NATS.Client.KeyValue.IKeyValue.PurgeDeletes(NATS.Client.KeyValue.KeyValuePurgeOptions)">
            <summary>
            Remove history from all keys that currently are deleted or purged
            </summary>
        </member>
        <member name="M:NATS.Client.KeyValue.IKeyValue.Status">
            <summary>
            Get the KeyValueStatus object
            </summary>
            <returns>the status object</returns>
        </member>
        <member name="M:NATS.Client.KeyValue.IKeyValueManagement.Create(NATS.Client.KeyValue.KeyValueConfiguration)">
            <summary>
            Create a key value store.
            </summary>
            <param name="config">the key value configuration</param>
            <returns>The status</returns>
        </member>
        <member name="M:NATS.Client.KeyValue.IKeyValueManagement.Update(NATS.Client.KeyValue.KeyValueConfiguration)">
            <summary>
            Update a key value store configuration. Storage type cannot change.
            </summary>
            <param name="config">the key value configuration</param>
            <returns>The status</returns>
        </member>
        <member name="M:NATS.Client.KeyValue.IKeyValueManagement.GetBucketNames">
            <summary>
            Get the list of bucket names.
            </summary>
            <returns>list of bucket names</returns>
        </member>
        <member name="M:NATS.Client.KeyValue.IKeyValueManagement.GetBucketInfo(System.String)">
            <summary>
            Gets the info for an existing bucket.
            </summary>
            <param name="bucketName">the bucket name to use</param>
            <returns>the bucket status object</returns>
        </member>
        <member name="M:NATS.Client.KeyValue.IKeyValueManagement.GetStatus(System.String)">
            <summary>
            Gets the status for an existing bucket.
            </summary>
            <param name="bucketName">the bucket name to use</param>
            <returns>the bucket status object</returns>
        </member>
        <member name="M:NATS.Client.KeyValue.IKeyValueManagement.GetStatuses">
            <summary>
            Gets the status for all buckets.
            </summary>
            <returns>the list of statuses</returns>
        </member>
        <member name="M:NATS.Client.KeyValue.IKeyValueManagement.Delete(System.String)">
            <summary>
            Deletes an existing bucket. Will throw a NATSJetStreamException if the delete fails.
            </summary>
            <param name="bucketName"></param>
        </member>
        <member name="M:NATS.Client.KeyValue.IKeyValueWatcher.Watch(NATS.Client.KeyValue.KeyValueEntry)">
            <summary>
            Called when a key has been updated
            </summary>
            <param name="kve">The entry for the updated key</param>
        </member>
        <member name="M:NATS.Client.KeyValue.IKeyValueWatcher.EndOfData">
            <summary>
            Called once if there is no data when the watch is created
            or if there is data, the first time the watch exhausts all existing data.
            </summary>
        </member>
        <member name="P:NATS.Client.KeyValue.KeyValueConfiguration.BucketName">
            <summary>
            The name of the bucket
            </summary>
        </member>
        <member name="P:NATS.Client.KeyValue.KeyValueConfiguration.Description">
            <summary>
            The description of this bucket
            </summary>
        </member>
        <member name="P:NATS.Client.KeyValue.KeyValueConfiguration.MaxHistoryPerKey">
            <summary>
            The maximum number of history for any one key. Includes the current value
            </summary>
        </member>
        <member name="P:NATS.Client.KeyValue.KeyValueConfiguration.MaxBucketSize">
            <summary>
            The maximum number of bytes for this bucket
            </summary>
        </member>
        <member name="P:NATS.Client.KeyValue.KeyValueConfiguration.MaxValueSize">
            <summary>
            The maximum size for an individual value in the bucket
            </summary>
        </member>
        <member name="P:NATS.Client.KeyValue.KeyValueConfiguration.MaximumValueSize">
            <summary>
            The maximum size for an individual value in the bucket
            </summary>
        </member>
        <member name="P:NATS.Client.KeyValue.KeyValueConfiguration.Ttl">
            <summary>
            The maximum age for a value in this bucket
            </summary>
        </member>
        <member name="P:NATS.Client.KeyValue.KeyValueConfiguration.StorageType">
            <summary>
            The storage type for this bucket
            </summary>
        </member>
        <member name="P:NATS.Client.KeyValue.KeyValueConfiguration.Replicas">
            <summary>
            The number of replicas for this bucket
            </summary>
        </member>
        <member name="P:NATS.Client.KeyValue.KeyValueConfiguration.Placement">
            <summary>
            Placement directives to consider when placing replicas of this stream
            </summary>
        </member>
        <member name="P:NATS.Client.KeyValue.KeyValueConfiguration.Republish">
            <summary>
            Republish options
            </summary>
        </member>
        <member name="P:NATS.Client.KeyValue.KeyValueConfiguration.AllowDirect">
            <summary>
            Allow Direct setting
            </summary>
        </member>
        <member name="P:NATS.Client.KeyValue.KeyValueConfiguration.IsCompressed">
            <summary>
            Compression setting
            </summary>
        </member>
        <member name="P:NATS.Client.KeyValue.KeyValueConfiguration.Metadata">
            <summary>
             Metadata
            </summary>
        </member>
        <member name="M:NATS.Client.KeyValue.KeyValueConfiguration.Builder">
            <summary>
            Creates a builder for the KeyValueConfiguration. 
            </summary>
            <returns>a KeyValueConfiguration builder</returns>
        </member>
        <member name="M:NATS.Client.KeyValue.KeyValueConfiguration.Builder(System.String)">
            <summary>
            Creates a builder for the KeyValueConfiguration. 
            </summary>
            <param name="name">name of the key value bucket</param>
            <returns>a KeyValueConfiguration builder</returns>
        </member>
        <member name="M:NATS.Client.KeyValue.KeyValueConfiguration.Builder(NATS.Client.KeyValue.KeyValueConfiguration)">
            <summary>
            Creates a builder for the KeyValueConfiguration. 
            </summary>
            <param name="kvc"></param>
            <returns>a KeyValueConfiguration builder</returns>
        </member>
        <member name="T:NATS.Client.KeyValue.KeyValueConfiguration.KeyValueConfigurationBuilder">
            <summary>
            KeyValueConfiguration is created using a Builder. The builder supports chaining and will
            create a default set of options if no methods are calls.
            </summary>
        </member>
        <member name="M:NATS.Client.KeyValue.KeyValueConfiguration.KeyValueConfigurationBuilder.#ctor">
            <summary>
            Default builder
            </summary>
        </member>
        <member name="M:NATS.Client.KeyValue.KeyValueConfiguration.KeyValueConfigurationBuilder.#ctor(System.String)">
            <summary>
            Builder accepting the object store bucket name.
            </summary>
            <param name="name">name of the key value bucket</param>
        </member>
        <member name="M:NATS.Client.KeyValue.KeyValueConfiguration.KeyValueConfigurationBuilder.#ctor(NATS.Client.KeyValue.KeyValueConfiguration)">
            <summary>
            Construct the builder by copying another configuration
            </summary>
            <param name="kvc">the other configuration</param>
        </member>
        <member name="M:NATS.Client.KeyValue.KeyValueConfiguration.KeyValueConfigurationBuilder.WithName(System.String)">
            <summary>
            Sets the name of the store.
            </summary>
            <param name="name">name of the key value bucket</param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.KeyValue.KeyValueConfiguration.KeyValueConfigurationBuilder.WithDescription(System.String)">
            <summary>
            Sets the description of the store.
            </summary>
            <param name="description">the description of the store.</param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.KeyValue.KeyValueConfiguration.KeyValueConfigurationBuilder.WithMaxHistoryPerKey(System.Int32)">
            <summary>
            Sets the maximum number of history for any one key. Includes the current value.
            </summary>
            <param name="maxHistoryPerKey">the maximum history</param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.KeyValue.KeyValueConfiguration.KeyValueConfigurationBuilder.WithMaxBucketSize(System.Int64)">
            <summary>
            Sets the maximum number of bytes in the KeyValueConfiguration. 
            </summary>
            <param name="maxBucketSize">the maximum number of bytes</param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.KeyValue.KeyValueConfiguration.KeyValueConfigurationBuilder.WithMaxValueSize(System.Int64)">
            <summary>
            Sets the maximum size for an individual value in the KeyValueConfiguration.
            </summary>
            <param name="maxValueSize">the maximum size for a value</param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.KeyValue.KeyValueConfiguration.KeyValueConfigurationBuilder.WithMaximumValueSize(System.Int32)">
            <summary>
            Sets the maximum size for an individual value in the KeyValueConfiguration.
            </summary>
            <param name="maxValueSize">the maximum size for a value</param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.KeyValue.KeyValueConfiguration.KeyValueConfigurationBuilder.WithTtl(NATS.Client.Internals.Duration)">
            <summary>
            Sets the maximum age for a value in this KeyValueConfiguration
            </summary>
            <param name="ttl">Sets the maximum age</param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.KeyValue.KeyValueConfiguration.KeyValueConfigurationBuilder.WithStorageType(NATS.Client.JetStream.StorageType)">
            <summary>
            Sets the storage type in the KeyValueConfiguration.
            </summary>
            <param name="storageType">the storage type</param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.KeyValue.KeyValueConfiguration.KeyValueConfigurationBuilder.WithReplicas(System.Int32)">
            <summary>
            Sets the number of replicas a message must be stored on in the KeyValueConfiguration.
            </summary>
            <param name="replicas">number of replicas</param>
            <returns>the number of replicas</returns>
        </member>
        <member name="M:NATS.Client.KeyValue.KeyValueConfiguration.KeyValueConfigurationBuilder.WithPlacement(NATS.Client.JetStream.Placement)">
            <summary>
            Set the placement directive
            </summary>
            <param name="placement">the placement</param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.KeyValue.KeyValueConfiguration.KeyValueConfigurationBuilder.WithRepublish(NATS.Client.JetStream.Republish)">
            <summary>
            Set the republish options
            </summary>
            <param name="republish">the republish</param>
            <returns>The KeyValueConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.KeyValue.KeyValueConfiguration.KeyValueConfigurationBuilder.WithMirror(NATS.Client.JetStream.Mirror)">
            <summary>
            Sets the mirror in the KeyValueConfiguration.
            </summary>
            <param name="mirror">the mirror</param>
            <returns>The KeyValueConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.KeyValue.KeyValueConfiguration.KeyValueConfigurationBuilder.WithSources(NATS.Client.JetStream.Source[])">
            <summary>
            Sets the sources in the KeyValueConfiguration.
            </summary>
            <param name="sources">the KeyValue's sources</param>
            <returns>The KeyValueConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.KeyValue.KeyValueConfiguration.KeyValueConfigurationBuilder.WithSources(System.Collections.Generic.List{NATS.Client.JetStream.Source})">
            <summary>
            Sets the sources in the KeyValueConfiguration.
            </summary>
            <param name="sources">the KeyValue's sources</param>
            <returns>The KeyValueConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.KeyValue.KeyValueConfiguration.KeyValueConfigurationBuilder.AddSources(NATS.Client.JetStream.Source[])">
            <summary>
            Sets the sources in the KeyValueConfiguration.
            </summary>
            <param name="sources">the KeyValue's sources</param>
            <returns>The KeyValueConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.KeyValue.KeyValueConfiguration.KeyValueConfigurationBuilder.AddSources(System.Collections.Generic.List{NATS.Client.JetStream.Source})">
            <summary>
            Sets the sources in the KeyValueConfiguration.
            </summary>
            <param name="sources">the KeyValue's sources</param>
            <returns>The KeyValueConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.KeyValue.KeyValueConfiguration.KeyValueConfigurationBuilder.AddSource(NATS.Client.JetStream.Source)">
            <summary>
            Add a source into the KeyValueConfiguration.
            </summary>
            <param name="source"></param>
            <returns>The KeyValueConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.KeyValue.KeyValueConfiguration.KeyValueConfigurationBuilder.WithAllowDirect(System.Boolean)">
            <summary>
            This method is deactivated. Allow Direct is Required default on KV
            Set whether to allow direct message access.
            This is an optimization for Key Value
            but is not available on all account / jwt configuration.
            </summary>
            <param name="allowDirect">true to allow direct headers.</param>
            <returns>The KeyValueConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.KeyValue.KeyValueConfiguration.KeyValueConfigurationBuilder.WithCompression(System.Boolean)">
            <summary>
            Set whether to have compression.
            </summary>
            <param name="compression">true to use the default compression algorithm of the KV backing store.</param>
            <returns>The KeyValueConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.KeyValue.KeyValueConfiguration.KeyValueConfigurationBuilder.WithMetadata(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Sets the metadata for the configuration 
            </summary>
            <param name="metadata">the metadata dictionary</param>
            <returns>The KeyValueConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.KeyValue.KeyValueConfiguration.KeyValueConfigurationBuilder.Build">
            <summary>
            Builds the KeyValueConfiguration
            </summary>
            <returns>the KeyValueConfiguration</returns>
        </member>
        <member name="M:NATS.Client.KeyValue.KeyValueOptions.Builder">
            <summary>
            Gets a KeyValueOptionsBuilder builder.
            </summary>
            <returns>
            The builder
            </returns>
        </member>
        <member name="M:NATS.Client.KeyValue.KeyValueOptions.Builder(NATS.Client.KeyValue.KeyValueOptions)">
            <summary>
            Gets the KeyValueOptions builder based on an existing KeyValueOptions object.
            </summary>
            <param name="kvo">an existing KeyValueOptions object</param>
            <returns>The builder</returns>
        </member>
        <member name="M:NATS.Client.KeyValue.KeyValueOptions.Builder(NATS.Client.JetStream.JetStreamOptions)">
            <summary>
            Gets the KeyValueOptions builder based on an existing JetStreamOptions object.
            </summary>
            <param name="jso">an existing JetStreamOptions object</param>
            <returns>The builder</returns>
        </member>
        <member name="M:NATS.Client.KeyValue.KeyValueOptions.KeyValueOptionsBuilder.#ctor">
            <summary>
            Construct a builder
            </summary>
        </member>
        <member name="M:NATS.Client.KeyValue.KeyValueOptions.KeyValueOptionsBuilder.#ctor(NATS.Client.KeyValue.KeyValueOptions)">
            <summary>
            Construct a builder from an existing KeyValueOptions object
            </summary>
            <param name="kvo">an existing KeyValueOptions object</param>
        </member>
        <member name="M:NATS.Client.KeyValue.KeyValueOptions.KeyValueOptionsBuilder.WithJetStreamOptions(NATS.Client.JetStream.JetStreamOptions)">
            <summary>
            Sets the JetStreamOptions.
            </summary>
            <param name="jso">The JetStreamOptions.</param>
            <returns>The KeyValueOptionsBuilder</returns>
        </member>
        <member name="M:NATS.Client.KeyValue.KeyValueOptions.KeyValueOptionsBuilder.WithRequestTimeout(NATS.Client.Internals.Duration)">
            <summary>
            Sets the request timeout for JetStream API calls.
            </summary>
            <param name="requestTimeout">the duration to wait for responses.</param>
            <returns>The ObjectStoreOptionsBuilder</returns>
        </member>
        <member name="M:NATS.Client.KeyValue.KeyValueOptions.KeyValueOptionsBuilder.WithJsPrefix(System.String)">
            <summary>
            Sets the prefix for JetStream subjects. A prefix can be used in conjunction with
            user permissions to restrict access to certain JetStream instances.  This must
            match the prefix used in the server.
            </summary>
            <param name="prefix">The prefix.</param>
            <returns>The JetStreamOptionsBuilder</returns>
        </member>
        <member name="M:NATS.Client.KeyValue.KeyValueOptions.KeyValueOptionsBuilder.WithJsDomain(System.String)">
            <summary>
            Sets the domain for JetStream subjects. A domain can be used in conjunction with
            user permissions to restrict access to certain JetStream instances.  This must
            match the domain used in the server.
            </summary>
            <param name="domain">The domain.</param>
            <returns>The JetStreamOptionsBuilder</returns>
        </member>
        <member name="M:NATS.Client.KeyValue.KeyValueOptions.KeyValueOptionsBuilder.Build">
            <summary>
            Builds the KeyValueOptions
            </summary>
            <returns>The KeyValueOptions object.</returns>
        </member>
        <member name="M:NATS.Client.KeyValue.KeyValuePurgeOptions.Builder">
            <summary>
            Gets a KeyValuePurgeOptions builder.
            </summary>
            <returns>
            The builder
            </returns>
        </member>
        <member name="M:NATS.Client.KeyValue.KeyValuePurgeOptions.KeyValuePurgeOptionsBuilder.#ctor">
            <summary>
            Construct a builder
            </summary>
        </member>
        <member name="M:NATS.Client.KeyValue.KeyValuePurgeOptions.KeyValuePurgeOptionsBuilder.WithDeleteMarkersThresholdMillis(System.Int64)">
            <summary>
            Set the delete marker threshold.
            0 will assume the default threshold.
            Less than zero will assume no threshold and will not keep any markers.
            </summary>
            <param name="thresholdMillis">the threshold millis</param>
            <returns>The KeyValuePurgeOptionsBuilder</returns>
        </member>
        <member name="M:NATS.Client.KeyValue.KeyValuePurgeOptions.KeyValuePurgeOptionsBuilder.WithDeleteMarkersThreshold(NATS.Client.Internals.Duration)">
            <summary>
            Set the delete marker threshold.
            null or duration of 0 will assume the default threshold.
            Duration less than zero will assume no threshold and will not keep any markers.
            </summary>
            <param name="threshold">the threshold duration or null</param>
            <returns>The KeyValuePurgeOptionsBuilder</returns>
        </member>
        <member name="M:NATS.Client.KeyValue.KeyValuePurgeOptions.KeyValuePurgeOptionsBuilder.WithDeleteMarkersNoThreshold">
            <summary>
            Set the delete marker threshold to -1 so as to not keep any markers
            </summary>
            <returns>The KeyValuePurgeOptionsBuilder</returns>
        </member>
        <member name="M:NATS.Client.KeyValue.KeyValuePurgeOptions.KeyValuePurgeOptionsBuilder.Build">
            <summary>
            Builds the KeyValueOptions
            </summary>
            <returns>The KeyValueOptions object.</returns>
        </member>
        <member name="P:NATS.Client.KeyValue.KeyValueStatus.BackingStreamInfo">
            <summary>
            The info for the stream which backs the bucket. Valid for BackingStore "JetStream"
            </summary>
        </member>
        <member name="P:NATS.Client.KeyValue.KeyValueStatus.Config">
            <summary>
            The configuration object directly
            </summary>
        </member>
        <member name="P:NATS.Client.KeyValue.KeyValueStatus.BucketName">
            <summary>
            The name of the bucket
            </summary>
        </member>
        <member name="P:NATS.Client.KeyValue.KeyValueStatus.Description">
            <summary>
            The description of this bucket
            </summary>
        </member>
        <member name="P:NATS.Client.KeyValue.KeyValueStatus.EntryCount">
            <summary>
            The number of total entries in the bucket, including historical entries
            </summary>
        </member>
        <member name="P:NATS.Client.KeyValue.KeyValueStatus.Bytes">
            <summary>
            The size of the bucket in bytes
            </summary>
        </member>
        <member name="P:NATS.Client.KeyValue.KeyValueStatus.MaxHistoryPerKey">
            <summary>
            The maximum number of history for any one key. Includes the current value
            </summary>
        </member>
        <member name="P:NATS.Client.KeyValue.KeyValueStatus.MaxBucketSize">
            <summary>
            The maximum number of bytes for this bucket
            </summary>
        </member>
        <member name="P:NATS.Client.KeyValue.KeyValueStatus.MaxValueSize">
            <summary>
            The maximum size for an individual value in the bucket
            </summary>
        </member>
        <member name="P:NATS.Client.KeyValue.KeyValueStatus.MaximumValueSize">
            <summary>
            The maximum size for an individual value in the bucket
            </summary>
        </member>
        <member name="P:NATS.Client.KeyValue.KeyValueStatus.Ttl">
            <summary>
            The maximum age for a value in this bucket
            </summary>
        </member>
        <member name="P:NATS.Client.KeyValue.KeyValueStatus.StorageType">
            <summary>
            The storage type for this bucket
            </summary>
        </member>
        <member name="P:NATS.Client.KeyValue.KeyValueStatus.Replicas">
            <summary>
            The number of replicas for this bucket
            </summary>
        </member>
        <member name="P:NATS.Client.KeyValue.KeyValueStatus.Placement">
            <summary>
            Placement directives to consider when placing replicas of this stream
            </summary>
        </member>
        <member name="P:NATS.Client.KeyValue.KeyValueStatus.Republish">
            <summary>
            Republish options
            </summary>
        </member>
        <member name="P:NATS.Client.KeyValue.KeyValueStatus.IsCompressed">
            <summary>
            Compression setting
            </summary>
        </member>
        <member name="P:NATS.Client.KeyValue.KeyValueStatus.Metadata">
            <summary>
             Metadata
            </summary>
        </member>
        <member name="P:NATS.Client.KeyValue.KeyValueStatus.BackingStore">
            <summary>
            The name of the type of backing store, currently only "JetStream"
            </summary>
        </member>
        <member name="F:NATS.Client.KeyValue.KeyValueWatchOption.IgnoreDelete">
            <summary>
            Do not include deletes or purges in results.
            Default is to include deletes.
            </summary>
        </member>
        <member name="F:NATS.Client.KeyValue.KeyValueWatchOption.MetaOnly">
            <summary>
            Only get metadata, skip value when retrieving data from the server.
            </summary>
        </member>
        <member name="F:NATS.Client.KeyValue.KeyValueWatchOption.IncludeHistory">
            <summary>
            Watch starting at the first entry for all keys.
            Default is to start at the last per key.
            </summary>
        </member>
        <member name="F:NATS.Client.KeyValue.KeyValueWatchOption.UpdatesOnly">
            <summary>
            Watch starting when there are new entries for keys.
            Default is to start at the last per key.
            </summary>
        </member>
        <member name="T:NATS.Client.Msg">
            <summary>
            A NATS message is an object encapsulating a subject, optional reply
            payload, optional header, and subscription information, sent or
            received by the client application.
            </summary>
        </member>
        <member name="M:NATS.Client.Msg.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NATS.Client.Msg"/> class without any
            subject, reply, or data.
            </summary>
        </member>
        <member name="M:NATS.Client.Msg.#ctor(System.String,System.String,NATS.Client.MsgHeader,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:NATS.Client.Msg"/> class with a subject, reply, header, and data.
            </summary>
            <param name="subject">Subject of the message.</param>
            <param name="reply">A reply subject, or <c>null</c>.</param>
            <param name="header">Message headers or <c>null</c>.</param>
            <param name="data">A byte array containing the message payload.</param>
        </member>
        <member name="M:NATS.Client.Msg.#ctor(System.String,NATS.Client.MsgHeader,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:NATS.Client.Msg"/> class with a subject, header, and data.
            </summary>
            <param name="subject">Subject of the message.</param>
            <param name="header">Message headers or <c>null</c>.</param>
            <param name="data">A byte array containing the message payload.</param>
        </member>
        <member name="M:NATS.Client.Msg.#ctor(System.String,System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:NATS.Client.Msg"/> class with a subject, reply, and data.
            </summary>
            <param name="subject">Subject of the message.</param>
            <param name="reply">A reply subject, or <c>null</c>.</param>
            <param name="data">A byte array containing the message payload.</param>
        </member>
        <member name="M:NATS.Client.Msg.#ctor(System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:NATS.Client.Msg"/> class with a subject and data.
            </summary>
            <param name="subject">Subject of the message.</param>
            <param name="data">A byte array containing the message payload.</param>
        </member>
        <member name="M:NATS.Client.Msg.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NATS.Client.Msg"/> class with a subject and no data.
            </summary>
            <param name="subject">Subject of the message.</param>
        </member>
        <member name="P:NATS.Client.Msg.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
        </member>
        <member name="P:NATS.Client.Msg.Reply">
            <summary>
            Gets or sets the reply subject.
            </summary>
        </member>
        <member name="P:NATS.Client.Msg.Data">
            <summary>
            Gets or sets the payload of the message.
            </summary>
            <remarks>
            This copies application data into the message. See <see cref="M:NATS.Client.Msg.AssignData(System.Byte[])" /> to directly pass the bytes buffer.
            </remarks>
            <seealso cref="M:NATS.Client.Msg.AssignData(System.Byte[])"/>
        </member>
        <member name="M:NATS.Client.Msg.AssignData(System.Byte[])">
            <summary>
            Assigns the data of the message.
            </summary>
            <remarks>
            <para>This is a direct assignment,
            to avoid expensive copy operations.  A change to the passed
            byte array will be changed in the message.</para>
            <para>The calling application is responsible for the data integrity in the message.</para>
            </remarks>
            <param name="data">a bytes buffer of data.</param>
        </member>
        <member name="P:NATS.Client.Msg.ArrivalSubcription">
            <summary>
            Gets the <see cref="T:NATS.Client.ISubscription"/> which received the message.
            </summary>
        </member>
        <member name="P:NATS.Client.Msg.ArrivalSubscription">
            <summary>
            Gets the <see cref="T:NATS.Client.ISubscription"/> which received the message.
            </summary>
        </member>
        <member name="M:NATS.Client.Msg.Respond(System.Byte[])">
            <summary>
            Send a response to the message on the arrival subscription.
            </summary>
            <param name="data">The response payload to send.</param>
            <exception cref="T:NATS.Client.NATSException">
            <para><see cref="P:NATS.Client.Msg.Reply"/> is null or empty.</para>
            <para>-or-</para>
            <para><see cref="P:NATS.Client.Msg.ArrivalSubscription"/> is null.</para>
            </exception>
        </member>
        <member name="M:NATS.Client.Msg.ToString">
            <summary>
            Generates a string representation of the messages.
            </summary>
            <returns>A string representation of the messages.</returns>
        </member>
        <member name="P:NATS.Client.Msg.Header">
            <summary>
            Gets or sets the <see cref="T:NATS.Client.MsgHeader"/> of the message.
            </summary>
        </member>
        <member name="P:NATS.Client.Msg.HasHeaders">
            <summary>
            Returns true if there is a <see cref="T:NATS.Client.MsgHeader"/> with fields set.
            </summary>
        </member>
        <member name="P:NATS.Client.Msg.Status">
            <summary>
            Gets the <see cref="T:NATS.Client.MsgStatus"/> of the message.
            </summary>
        </member>
        <member name="P:NATS.Client.Msg.HasStatus">
            <summary>
            Returns true if there is a <see cref="T:NATS.Client.MsgStatus"/> with fields set.
            </summary>
        </member>
        <member name="P:NATS.Client.Msg.MetaData">
            <summary>
            Gets the metadata associated with a JetStream message.
            </summary>
        </member>
        <member name="P:NATS.Client.Msg.LastAck">
            <summary>
            the last ack that was done with this message, or null if there has not been an ack
            </summary>
            <returns>the last ack or null</returns>
        </member>
        <member name="M:NATS.Client.Msg.Ack">
            <summary>
            Acknowledges a JetStream messages received from a Consumer,
            indicating the message will not be resent.
            </summary>
            <remarks>
            This is a NOOP for standard NATS messages.
            </remarks>
        </member>
        <member name="M:NATS.Client.Msg.AckSync(System.Int32)">
            <summary>
            Acknowledges a JetStream message received from a Consumer,
            indicating the message should not be received again later.
            A timeout of zero does not confirm the acknowledgement.
            </summary>
            <param name="timeout">the duration to wait for an ack
            confirmation</param>
            <remarks>
            This is a NOOP for standard NATS messages.
            </remarks>
        </member>
        <member name="M:NATS.Client.Msg.Nak">
            <summary>
            Acknowledges a JetStream message has been received but indicates
            that the message is not completely processed and should be sent
            again later.
            </summary>
            <remarks>
            This is a NOOP for standard NATS messages.
            </remarks>
        </member>
        <member name="M:NATS.Client.Msg.NakWithDelay(NATS.Client.Internals.Duration)">
            <summary>
            Acknowledges a JetStream message has been received but indicates
            that the message is not completely processed and should be sent
            again later, after at least the delay amount.
            </summary>
            <remarks>
            This is a NOOP for standard NATS messages.
            </remarks>
        </member>
        <member name="M:NATS.Client.Msg.NakWithDelay(System.Int64)">
            <summary>
            Acknowledges a JetStream message has been received but indicates
            that the message is not completely processed and should be sent
            again later, after at least the delay amount.
            </summary>
            <remarks>
            This is a NOOP for standard NATS messages.
            </remarks>
        </member>
        <member name="M:NATS.Client.Msg.Term">
            <summary>
            Prevents this message from ever being delivered regardless of
            maxDeliverCount.
            </summary>
            <remarks>
            This is a NOOP for standard NATS messages.
            </remarks>
        </member>
        <member name="M:NATS.Client.Msg.InProgress">
            <summary>
            Indicates that this message is being worked on and reset redelivery timer in the server.
            </summary>
            <remarks>
            This is a NOOP for standard NATS messages.
            </remarks>
        </member>
        <member name="P:NATS.Client.Msg.IsJetStream">
            <summary>
            Checks if a message is from Jetstream or is a standard message.
            </summary>
            <returns>True if this is a JetStream Message.</returns>
        </member>
        <member name="P:NATS.Client.Msg.ConsumeByteCount">
            <summary>
            The number of bytes the server counts for the message when calculating byte counts.
            Only applies to JetStream messages received from the server.
            </summary>
            <returns>the consumption byte count or -1 if the message implementation does not support this method</returns>
        </member>
        <member name="T:NATS.Client.MsgHeader">
             <summary>
             The MsgHeader class provides key/value message header support
             similar to HTTP headers.
             </summary>
             <remarks>
             Keys and values may only contain printable ASCII character values and
             cannot contain `:`.  Concurrent access may result in undefined
             behavior.
             </remarks>
             <example>
             Setting a header field in a message:
             <code>
             var m = new Msg();
             m.Header["Content-Type"] = "json";
             </code>
             
             Getting a header field from a message:
             <code>
             string contentType = m.Header["Content-Type"];
             </code>
            
             To set multiple values:
             <code>
             m.Header.Add("foo", "value1");
             m.Header.Add("foo", "value2");
             </code>
             Get multiple values:
             <code>
             string []values = m.Header.GetValues("foo");
             </code>
             </example>
        </member>
        <member name="F:NATS.Client.MsgHeader.Status">
            <summary>
            Status header key.
            </summary>
        </member>
        <member name="F:NATS.Client.MsgHeader.Description">
            <summary>
            Description header key.
            </summary>
        </member>
        <member name="M:NATS.Client.MsgHeader.#ctor">
            <summary>
            Initializes a new empty instance of the MsgHeader class.
            </summary>
        </member>
        <member name="M:NATS.Client.MsgHeader.#ctor(NATS.Client.MsgHeader)">
            <summary>
            Copies the entries from an existing MsgHeader instance to a
            new MsgHeader instance.
            </summary>
            <remarks>
            The header cannot be empty or contain invalid fields.
            </remarks>
            <param name="header">the NATS message header to copy.</param>
        </member>
        <member name="P:NATS.Client.MsgHeader.Keys">
            <summary>
            Gets an enumerator for the keys.
            </summary>
        </member>
        <member name="P:NATS.Client.MsgHeader.Count">
            <summary>
            Gets the current number of header entries.
            </summary>
        </member>
        <member name="P:NATS.Client.MsgHeader.Item(System.String)">
            <summary>
            Gets or sets the string entry with the specified string key in the message header.
            </summary>
            <param name="name">The string key of the entry to locate. The key cannot be null, empty, or whitespace.</param>
            <returns>A string that contains the comma-separated list of values associated with the specified key, if found; otherwise, null</returns>
        </member>
        <member name="M:NATS.Client.MsgHeader.Add(System.String,System.String)">
            <summary>
            Add a header field with the specified name and value.
            </summary>
            <param name="name">Name of the header field.</param>
            <param name="value">Value of the header field.</param>
        </member>
        <member name="M:NATS.Client.MsgHeader.Set(System.String,System.String)">
            <summary>
            Sets the value of a message header field.
            </summary>
            <param name="name">Name of the header field to set.</param>
            <param name="value">Value of the header field.</param>
        </member>
        <member name="M:NATS.Client.MsgHeader.Remove(System.String)">
            <summary>
            Remove a header entry.
            </summary>
            <param name="name">Name of the header field to remove.</param>
        </member>
        <member name="M:NATS.Client.MsgHeader.Clear">
            <summary>
            Removes all entries from the message header.
            </summary>
        </member>
        <member name="M:NATS.Client.MsgHeader.GetValues(System.String)">
            <summary>
            Gets all values of a header field.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.MsgHeader.GetFirst(System.String)">
            <summary>
            Gets the first value for the specific key.
            Will be null if the key is not found
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.MsgHeader.GetLast(System.String)">
            <summary>
            Gets the last value for the specific key.
            Will be null if the key is not found
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.MsgHeader.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the message header
            keys.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NATS.Client.NaCl.CryptoBytes">
            <summary>
            Utility class for cryptography.
            </summary>
        </member>
        <member name="M:NATS.Client.NaCl.CryptoBytes.ConstantTimeEquals(System.Byte[],System.Byte[])">
            <summary>
            Comparison of two arrays.
            
            The runtime of this method does not depend on the contents of the arrays. Using constant time
            prevents timing attacks that allow an attacker to learn if the arrays have a common prefix.
            
            It is important to use such a constant time comparison when verifying MACs.
            </summary>
            <param name="x">Byte array</param>
            <param name="y">Byte array</param>
            <returns>True if arrays are equal</returns>
        </member>
        <member name="M:NATS.Client.NaCl.CryptoBytes.ConstantTimeEquals(System.ArraySegment{System.Byte},System.ArraySegment{System.Byte})">
            <summary>
            Comparison of two array segments.
            
            The runtime of this method does not depend on the contents of the arrays. Using constant time
            prevents timing attacks that allow an attacker to learn if the arrays have a common prefix.
            
            It is important to use such a constant time comparison when verifying MACs.
            </summary>
            <param name="x">Byte array segment</param>
            <param name="y">Byte array segment</param>
            <returns>True if contents of x and y are equal</returns>
        </member>
        <member name="M:NATS.Client.NaCl.CryptoBytes.ConstantTimeEquals(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Comparison of two byte sequences.
            
            The runtime of this method does not depend on the contents of the arrays. Using constant time
            prevents timing attacks that allow an attacker to learn if the arrays have a common prefix.
            
            It is important to use such a constant time comparison when verifying MACs.
            </summary>
            <param name="x">Byte array</param>
            <param name="xOffset">Offset of byte sequence in the x array</param>
            <param name="y">Byte array</param>
            <param name="yOffset">Offset of byte sequence in the y array</param>
            <param name="length">Lengh of byte sequence</param>
            <returns>True if sequences are equal</returns>
        </member>
        <member name="M:NATS.Client.NaCl.CryptoBytes.Wipe(System.Byte[])">
            <summary>
            Overwrites the contents of the array, wiping the previous content. 
            </summary>
            <param name="data">Byte array</param>
        </member>
        <member name="M:NATS.Client.NaCl.CryptoBytes.Wipe(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Overwrites the contents of the array, wiping the previous content. 
            </summary>
            <param name="data">Byte array</param>
            <param name="offset">Index of byte sequence</param>
            <param name="length">Length of byte sequence</param>
        </member>
        <member name="M:NATS.Client.NaCl.CryptoBytes.Wipe(System.ArraySegment{System.Byte})">
            <summary>
            Overwrites the contents of the array segment, wiping the previous content. 
            </summary>
            <param name="data">Byte array segment</param>
        </member>
        <member name="M:NATS.Client.NaCl.CryptoBytes.ToHexStringUpper(System.Byte[])">
            <summary>
            Constant-time conversion of the bytes array to an upper-case hex string.
            Please see http://stackoverflow.com/a/14333437/445517 for the detailed explanation
            </summary>
            <param name="data">Byte array</param>
            <returns>Hex representation of byte array</returns>
        </member>
        <member name="M:NATS.Client.NaCl.CryptoBytes.ToHexStringLower(System.Byte[])">
            <summary>
            Constant-time conversion of the bytes array to an lower-case hex string.
            Please see http://stackoverflow.com/a/14333437/445517 for the detailed explanation.
            </summary>
            <param name="data">Byte array</param>
            <returns>Hex representation of byte array</returns>
        </member>
        <member name="M:NATS.Client.NaCl.CryptoBytes.FromHexString(System.String)">
            <summary>
            Converts the hex string to bytes. Case insensitive.
            </summary>
            <param name="hexString">Hex encoded byte sequence</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NATS.Client.NaCl.CryptoBytes.ToBase64String(System.Byte[])">
            <summary>
            Encodes the bytes with the Base64 encoding. 
            More compact than hex, but it is case-sensitive and uses the special characters `+`, `/` and `=`.
            </summary>
            <param name="data">Byte array</param>
            <returns>Base 64 encoded data</returns>
        </member>
        <member name="M:NATS.Client.NaCl.CryptoBytes.FromBase64String(System.String)">
            <summary>
            Decodes a Base64 encoded string back to bytes.
            </summary>
            <param name="base64String">Base 64 encoded data</param>
            <returns>Byte array</returns>
        </member>
        <member name="F:NATS.Client.NaCl.Ed25519.PublicKeySize">
            <summary>
            Public Keys are 32 byte values. All possible values of this size a valid.
            </summary>
        </member>
        <member name="F:NATS.Client.NaCl.Ed25519.SignatureSize">
            <summary>
            Signatures are 64 byte values
            </summary>
        </member>
        <member name="F:NATS.Client.NaCl.Ed25519.PrivateKeySeedSize">
            <summary>
            Private key seeds are 32 byte arbitrary values. This is the form that should be generated and stored.
            </summary>
        </member>
        <member name="F:NATS.Client.NaCl.Ed25519.ExpandedPrivateKeySize">
            <summary>
            A 64 byte expanded form of private key. This form is used internally to improve performance
            </summary>
        </member>
        <member name="M:NATS.Client.NaCl.Ed25519.Verify(System.ArraySegment{System.Byte},System.ArraySegment{System.Byte},System.ArraySegment{System.Byte})">
            <summary>
            Verify Ed25519 signature
            </summary>
            <param name="signature">Signature bytes</param>
            <param name="message">Message</param>
            <param name="publicKey">Public key</param>
            <returns>True if signature is valid, false if it's not</returns>
        </member>
        <member name="M:NATS.Client.NaCl.Ed25519.Verify(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Verify Ed25519 signature
            </summary>
            <param name="signature">Signature bytes</param>
            <param name="message">Message</param>
            <param name="publicKey">Public key</param>
            <returns>True if signature is valid, false if it's not</returns>
        </member>
        <member name="M:NATS.Client.NaCl.Ed25519.Sign(System.ArraySegment{System.Byte},System.ArraySegment{System.Byte},System.ArraySegment{System.Byte})">
            <summary>
            Create new Ed25519 signature
            </summary>
            <param name="signature">Buffer for signature</param>
            <param name="message">Message bytes</param>
            <param name="expandedPrivateKey">Expanded form of private key</param>
        </member>
        <member name="M:NATS.Client.NaCl.Ed25519.Sign(System.Byte[],System.Byte[])">
            <summary>
            Create new Ed25519 signature
            </summary>
            <param name="message">Message bytes</param>
            <param name="expandedPrivateKey">Expanded form of private key</param>
        </member>
        <member name="M:NATS.Client.NaCl.Ed25519.PublicKeyFromSeed(System.Byte[])">
            <summary>
            Calculate public key from private key seed
            </summary>
            <param name="privateKeySeed">Private key seed value</param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.NaCl.Ed25519.ExpandedPrivateKeyFromSeed(System.Byte[])">
            <summary>
            Calculate expanded form of private key from the key seed.
            </summary>
            <param name="privateKeySeed">Private key seed value</param>
            <returns>Expanded form of the private key</returns>
        </member>
        <member name="M:NATS.Client.NaCl.Ed25519.KeyPairFromSeed(System.Byte[]@,System.Byte[]@,System.Byte[])">
            <summary>
            Calculate key pair from the key seed.
            </summary>
            <param name="publicKey">Public key</param>
            <param name="expandedPrivateKey">Expanded form of the private key</param>
            <param name="privateKeySeed">Private key seed value</param>
        </member>
        <member name="M:NATS.Client.NaCl.Ed25519.KeyPairFromSeed(System.ArraySegment{System.Byte},System.ArraySegment{System.Byte},System.ArraySegment{System.Byte})">
            <summary>
            Calculate key pair from the key seed.
            </summary>
            <param name="publicKey">Public key</param>
            <param name="expandedPrivateKey">Expanded form of the private key</param>
            <param name="privateKeySeed">Private key seed value</param>
        </member>
        <member name="M:NATS.Client.NaCl.Sha512.#ctor">
            <summary>
            Allocation and initialization of the new SHA-512 object.
            </summary>
        </member>
        <member name="M:NATS.Client.NaCl.Sha512.Init">
            <summary>
            Performs an initialization of internal SHA-512 state.
            </summary>
        </member>
        <member name="M:NATS.Client.NaCl.Sha512.Update(System.ArraySegment{System.Byte})">
            <summary>
            Updates internal state with data from the provided array segment.
            </summary>
            <param name="data">Array segment</param>
        </member>
        <member name="M:NATS.Client.NaCl.Sha512.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Updates internal state with data from the provided array.
            </summary>
            <param name="data">Array of bytes</param>
            <param name="index">Offset of byte sequence</param>
            <param name="length">Sequence length</param>
        </member>
        <member name="M:NATS.Client.NaCl.Sha512.Finalize(System.ArraySegment{System.Byte})">
            <summary>
            Finalizes SHA-512 hashing
            </summary>
            <param name="output">Output buffer</param>
        </member>
        <member name="M:NATS.Client.NaCl.Sha512.Finalize">
            <summary>
            Finalizes SHA-512 hashing.
            </summary>
            <returns>Hash bytes</returns>
        </member>
        <member name="M:NATS.Client.NaCl.Sha512.Hash(System.Byte[])">
            <summary>
            Calculates SHA-512 hash value for the given bytes array.
            </summary>
            <param name="data">Data bytes array</param>
            <returns>Hash bytes</returns>
        </member>
        <member name="M:NATS.Client.NaCl.Sha512.Hash(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Calculates SHA-512 hash value for the given bytes array.
            </summary>
            <param name="data">Data bytes array</param>
            <param name="index">Offset of byte sequence</param>
            <param name="length">Sequence length</param>
            <returns>Hash bytes</returns>
        </member>
        <member name="T:NATS.Client.Defaults">
            <summary>
            This class contains default values for fields used throughout NATS.
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.Version">
            <summary>
            Client version
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.Url">
            <summary>
            The default NATS connect url ("nats://localhost:4222")
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.Port">
            <summary>
            The default NATS connect port. (4222)
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.MaxReconnect">
            <summary>
            Default number of times to attempt a reconnect. (60)
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.ReconnectWait">
            <summary>
            Default ReconnectWait time (2 seconds)
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.Timeout">
            <summary>
            Default timeout  (2 seconds).
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.PingInterval">
            <summary>
             Default ping interval (2 minutes);
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.MaxPingOut">
            <summary>
            Default MaxPingOut value (2);
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.MaxChanLen">
            <summary>
            Default MaxChanLen (65536)
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.RequestChanLen">
            <summary>
            Default Request Channel Length
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.LangString">
            <summary>
            Language string of this client, ".NET"
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.SubPendingMsgsLimit">
            <summary>
            Default subscriber pending messages limit.
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.SubPendingBytesLimit">
            <summary>
            Default subscriber pending bytes limit.
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.DefaultDrainTimeout">
            <summary>
            Default Drain Timeout in milliseconds.
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.ReconnectBufferSize">
            <summary>
            Default Pending buffer size is 8 MB.
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.ReconnectJitter">
            <summary>
            Default non-TLS reconnect jitter of 100ms.
            </summary>
        </member>
        <member name="F:NATS.Client.Defaults.ReconnectJitterTLS">
            <summary>
            Default TLS reconnect jitter of 1s.
            </summary>
        </member>
        <member name="T:NATS.Client.ConnEventArgs">
            <summary>
            Provides the details when the state of a <see cref="T:NATS.Client.Connection"/>
            changes.
            </summary>
        </member>
        <member name="P:NATS.Client.ConnEventArgs.Conn">
            <summary>
            Gets the <see cref="T:NATS.Client.Connection"/> associated with the event.
            </summary>
        </member>
        <member name="P:NATS.Client.ConnEventArgs.Error">
            <summary>
            Gets any Exception associated with the connection state change.
            </summary>
            <example>Could be an exception causing the connection to get disconnected.</example>
        </member>
        <member name="T:NATS.Client.ReconnectDelayEventArgs">
            <summary>
            Provides details for the ReconnectDelayEvent.
            </summary>
            <remarks>
            This event handler is a good place to apply backoff logic.  The associated
            connection will be RECONNECTING so accessing or calling IConnection methods will result
            in undefined behavior (including deadlocks).  Assigning a non-default handler
            requires the application to define reconnect delay and backoff behavior.
            </remarks>
        </member>
        <member name="P:NATS.Client.ReconnectDelayEventArgs.Attempts">
            <Summary>
            Gets the number of times the client has traversed the
            server list in attempting to reconnect.
            </Summary>
        </member>
        <member name="T:NATS.Client.ErrEventArgs">
            <summary>
            Provides details for an error encountered asynchronously
            by an <see cref="T:NATS.Client.IConnection"/>.
            </summary>
        </member>
        <member name="P:NATS.Client.ErrEventArgs.Conn">
            <summary>
            Gets the <see cref="T:NATS.Client.Connection"/> associated with the event.
            </summary>
        </member>
        <member name="P:NATS.Client.ErrEventArgs.Subscription">
            <summary>
            Gets the <see cref="T:NATS.Client.Subscription"/> associated with the event.
            </summary>
        </member>
        <member name="P:NATS.Client.ErrEventArgs.Error">
            <summary>
            Gets the error message associated with the event.
            </summary>
        </member>
        <member name="T:NATS.Client.ConnJsSubEventArgs">
            <summary>
            Base class for Event Args that have a connection and a subscription
            by an <see cref="T:NATS.Client.IConnection"/>.
            </summary>
        </member>
        <member name="P:NATS.Client.ConnJsSubEventArgs.Conn">
            <summary>
            The <see cref="T:NATS.Client.Connection"/> associated with the event.
            </summary>
        </member>
        <member name="P:NATS.Client.ConnJsSubEventArgs.Sub">
            <summary>
            The <see cref="T:NATS.Client.Subscription"/> associated with the event.
            </summary>
        </member>
        <member name="P:NATS.Client.ConnJsSubEventArgs.JetStreamSub">
            <summary>
            The <see cref="T:NATS.Client.JetStream.IJetStreamSubscription"/> when the associated Subscription is of this type.
            </summary>
        </member>
        <member name="T:NATS.Client.HeartbeatAlarmEventArgs">
            <summary>
            Provides details for an heartbeat alarm encountered
            </summary>
        </member>
        <member name="T:NATS.Client.StatusEventArgs">
            <summary>
            Provides details for an status message when it is unknown or unhandled
            </summary>
        </member>
        <member name="T:NATS.Client.UnhandledStatusEventArgs">
            <summary>
            Provides details for an status message when it is unknown or unhandled
            </summary>
        </member>
        <member name="T:NATS.Client.FlowControlProcessedEventArgs">
            <summary>
            Provides details for an status message when when a flow control is processed.
            </summary>
        </member>
        <member name="T:NATS.Client.UserJWTEventArgs">
            <summary>
            Provides details when a user JWT is read during a connection.  The
            JWT must be set or a <see cref="T:NATS.Client.NATSConnectionException"/> will
            be thrown.
            </summary>
        </member>
        <member name="P:NATS.Client.UserJWTEventArgs.JWT">
            <Summary>
            Sets the JWT read by the event handler. This MUST be set in the event handler.
            </Summary>
        </member>
        <member name="T:NATS.Client.UserSignatureEventArgs">
            <summary>
            Provides details when a user signature is read during a connection.
            The User Signature event signs the ServerNonce and sets the 
            SignedNonce with the result.
            The SignedNonce must be set or a <see cref="T:NATS.Client.NATSConnectionException"/>
            will be thrown.
            </summary>
        </member>
        <member name="P:NATS.Client.UserSignatureEventArgs.ServerNonce">
            <summary>
            Gets the nonce sent from the server.
            </summary>
        </member>
        <member name="P:NATS.Client.UserSignatureEventArgs.SignedNonce">
            <Summary>
            Sets the signed nonce to be returned to the server.  This MUST be set.
            </Summary>
        </member>
        <member name="T:NATS.Client.IC">
            Internal Constants
        </member>
        <member name="T:NATS.Client.MsgHandlerEventArgs">
            <summary>
            Provides the message received by an <see cref="T:NATS.Client.IAsyncSubscription"/>.
            </summary>
        </member>
        <member name="P:NATS.Client.MsgHandlerEventArgs.Message">
            <summary>
            Retrieves the message.
            </summary>
        </member>
        <member name="T:NATS.Client.NkeyPair">
            <summary>
            Partial implementation of the NATS Ed25519 KeyPair.  This is not complete, but provides enough
            functionality to implement the client side NATS 2.0 security scheme.
            </summary>
        </member>
        <member name="P:NATS.Client.NkeyPair.PublicKey">
            <summary>
            Gets the public key of the keypair.
            </summary>
        </member>
        <member name="P:NATS.Client.NkeyPair.PrivateKeySeed">
            <summary>
            Gets the private key of the keypair.
            </summary>
        </member>
        <member name="M:NATS.Client.NkeyPair.Wipe">
            <summary>
            Wipes clean the internal private keys.
            </summary>
        </member>
        <member name="M:NATS.Client.NkeyPair.Sign(System.Byte[])">
            <summary>
            Signs data and returns a signature.
            </summary>
            <param name="src"></param>
            <returns>The signature.</returns>
        </member>
        <member name="M:NATS.Client.NkeyPair.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the NkeyPair and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:NATS.Client.NkeyPair.Dispose">
            <summary>
            Releases all resources used by the NkeyPair.
            </summary>
        </member>
        <member name="T:NATS.Client.Nkeys">
            <summary>
            Nkeys is a class provided to manipulate Nkeys and generate NkeyPairs. 
            </summary>
        </member>
        <member name="M:NATS.Client.Nkeys.Decode(System.String)">
            <summary>
            Decodes a base 32 encoded NKey into a nkey seed and verifies the checksum.
            </summary>
            <param name="src">Base 32 encoded Nkey.</param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.Nkeys.Wipe(System.Byte[]@)">
            <summary>
            Wipes a byte array.
            </summary>
            <param name="src">byte array to wipe</param>
        </member>
        <member name="M:NATS.Client.Nkeys.Wipe(System.String)">
            <summary>
            Wipes a string.
            </summary>
            <param name="src">string to wipe</param>
        </member>
        <member name="M:NATS.Client.Nkeys.FromSeed(System.String)">
            <summary>
            Creates an NkeyPair from a private seed string.
            </summary>
            <param name="seed"></param>
            <returns>A NATS Ed25519 Keypair</returns>
        </member>
        <member name="M:NATS.Client.Nkeys.CreateUserSeed">
            <summary>
            Creates a private user seed string.
            </summary>
            <returns>A NATS Ed25519 User Seed</returns>
        </member>
        <member name="M:NATS.Client.Nkeys.CreateAccountSeed">
            <summary>
            Creates a private account seed string.
            </summary>
            <returns>A NATS Ed25519 Account Seed</returns>
        </member>
        <member name="M:NATS.Client.Nkeys.CreateOperatorSeed">
            <summary>
            Creates a private operator seed string.
            </summary>
            <returns>A NATS Ed25519 Operator Seed</returns>
        </member>
        <member name="M:NATS.Client.Nkeys.PublicKeyFromSeed(System.String)">
            <summary>
            Returns a seed's public key.
            </summary>
            <param name="seed"></param>
            <returns>A the public key corresponding to Seed</returns>
        </member>
        <member name="T:NATS.Client.NUID">
            <summary>
            NUID needs to be very fast to generate and truly unique, all while being entropy pool friendly.
            We will use 12 bytes of crypto generated data (entropy draining), and 10 bytes of sequential data
            that is started at a pseudo random number and increments with a pseudo-random increment.
            Total is 22 bytes of base 36 ascii text.
            </summary>
        </member>
        <member name="F:NATS.Client.NUID.LENGTH">
            <summary>
            Length of the NUID.
            </summary>
        </member>
        <member name="F:NATS.Client.NUID.MAXPRE">
            <summary>
            Maximum value of the prefix.
            </summary>
        </member>
        <member name="F:NATS.Client.NUID.MAXSEQ">
            <summary>
            Maximum value of the sequence.
            </summary>
        </member>
        <member name="M:NATS.Client.NUID.RandomizePrefix">
            <summary>
            Generates a new crypto/rand seeded prefix.
            </summary>
            <remarks>
            Generally not needed, this happens automatically.
            </remarks>
        </member>
        <member name="M:NATS.Client.NUID.#ctor">
            <summary>
            Creates a new NUID object.
            </summary>
        </member>
        <member name="P:NATS.Client.NUID.Instance">
            <summary>
            Gets the global instance of a NUID object
            </summary>
        </member>
        <member name="P:NATS.Client.NUID.NextGlobal">
            <summary>
            Returns the next NUID from the global instance.
            </summary>
        </member>
        <member name="P:NATS.Client.NUID.Next">
            <summary>
            Returns the next nuid string value from the NUID object.
            </summary>
        </member>
        <member name="P:NATS.Client.NUID.Pre">
            <summary>
            Gets or sets the prefix.
            </summary>
            <remarks>
            Not normally used outside of testing.
            </remarks>
        </member>
        <member name="P:NATS.Client.NUID.Seq">
            <summary>
            Gets or sets the sequence.  Not normally used outside of testing.
            </summary>
            <remarks>
            Not normally used outside of testing.
            </remarks>
        </member>
        <member name="P:NATS.Client.NUID.Length">
            <summary>
            Gets the Length of the nuid.
            </summary>
            <remarks>
            Not normally used outside of testing.
            </remarks>
        </member>
        <member name="P:NATS.Client.ObjectStore.IObjectStore.BucketName">
            <summary>
            Get the name of the object store's bucket.
            OBJECT STORE IMPLEMENTATION IS EXPERIMENTAL AND SUBJECT TO CHANGE.
            </summary>
            <returns>the name</returns>
        </member>
        <member name="M:NATS.Client.ObjectStore.IObjectStore.Put(NATS.Client.ObjectStore.ObjectMeta,System.IO.Stream)">
            <summary>
            Place the contents of the input stream into a new object.
            OBJECT STORE IMPLEMENTATION IS EXPERIMENTAL AND SUBJECT TO CHANGE.
            </summary>
            <param name="meta">the metadata for the object</param>
            <param name="inputStream">the source input stream</param>
            <returns>the ObjectInfo for the saved object</returns>
        </member>
        <member name="M:NATS.Client.ObjectStore.IObjectStore.Put(System.String,System.IO.Stream)">
            <summary>
            Place the contents of the input stream into a new object.
            OBJECT STORE IMPLEMENTATION IS EXPERIMENTAL AND SUBJECT TO CHANGE.
            </summary>
            <param name="objectName">the name of the object</param>
            <param name="inputStream">the source input stream</param>
            <returns>the ObjectInfo for the saved object</returns>
        </member>
        <member name="M:NATS.Client.ObjectStore.IObjectStore.Put(System.String,System.Byte[])">
            <summary>
            Place the bytes into a new object.
            OBJECT STORE IMPLEMENTATION IS EXPERIMENTAL AND SUBJECT TO CHANGE.
            </summary>
            <param name="objectName">the name of the object</param>
            <param name="input">the bytes to store</param>
            <returns>the ObjectInfo for the saved object</returns>
        </member>
        <member name="M:NATS.Client.ObjectStore.IObjectStore.Put(System.IO.FileInfo)">
            <summary>
            Place the contents of the file into a new object using the file name as the object name.
            OBJECT STORE IMPLEMENTATION IS EXPERIMENTAL AND SUBJECT TO CHANGE.
            </summary>
            <param name="fileInfo">the file to read</param>
            <returns>the ObjectInfo for the saved object</returns>
        </member>
        <member name="M:NATS.Client.ObjectStore.IObjectStore.Get(System.String,System.IO.Stream)">
            <summary>
            Get an object by name from the store, reading it into the output stream, if the object exists.
            OBJECT STORE IMPLEMENTATION IS EXPERIMENTAL AND SUBJECT TO CHANGE.
            </summary>
            <param name="objectName">The name of the object</param>
            <param name="outputStream">the destination stream.</param>
            <returns>the ObjectInfo for the object name or throw an exception if it does not exist or is deleted.</returns>
        </member>
        <member name="M:NATS.Client.ObjectStore.IObjectStore.GetInfo(System.String)">
            <summary>
            Get the info for an object if the object exists exists / is not deleted.
            OBJECT STORE IMPLEMENTATION IS EXPERIMENTAL AND SUBJECT TO CHANGE.
            </summary>
            <param name="objectName">The name of the object</param>
            <returns>the ObjectInfo for the object name or throw an exception if it does not exist.</returns>
        </member>
        <member name="M:NATS.Client.ObjectStore.IObjectStore.GetInfo(System.String,System.Boolean)">
            <summary>
            Get the info for an object if the object exists, optionally including deleted.
            OBJECT STORE IMPLEMENTATION IS EXPERIMENTAL AND SUBJECT TO CHANGE.
            </summary>
            <param name="objectName">The name of the object</param>
            <param name="includingDeleted">Whether to return info for deleted objects</param>
            <returns>the ObjectInfo for the object name or throw an exception if it does not exist.</returns>
        </member>
        <member name="M:NATS.Client.ObjectStore.IObjectStore.UpdateMeta(System.String,NATS.Client.ObjectStore.ObjectMeta)">
            <summary>
            Update the metadata of name, description or headers. All other changes are ignored.
            OBJECT STORE IMPLEMENTATION IS EXPERIMENTAL AND SUBJECT TO CHANGE.
            </summary>
            <param name="objectName">The name of the object</param>
            <param name="meta">the metadata with the new or unchanged name, description and headers.</param>
            <returns>the ObjectInfo after update</returns>
        </member>
        <member name="M:NATS.Client.ObjectStore.IObjectStore.Delete(System.String)">
            <summary>
            Delete the object by name. A No-op if the object is already deleted.
            OBJECT STORE IMPLEMENTATION IS EXPERIMENTAL AND SUBJECT TO CHANGE.
            </summary>
            <param name="objectName">The name of the object</param>
            <returns>the ObjectInfo after delete or throw an exception if it does not exist.</returns>
        </member>
        <member name="M:NATS.Client.ObjectStore.IObjectStore.AddLink(System.String,NATS.Client.ObjectStore.ObjectInfo)">
            <summary>
            Add a link to another object. A link cannot be for another link.
            OBJECT STORE IMPLEMENTATION IS EXPERIMENTAL AND SUBJECT TO CHANGE.
            </summary>
            <param name="objectName">The name of the object</param>
            <param name="toInfo">the info object of the object to link to</param>
            <returns>the ObjectInfo for the link as saved or throws an exception</returns>
        </member>
        <member name="M:NATS.Client.ObjectStore.IObjectStore.AddBucketLink(System.String,NATS.Client.ObjectStore.IObjectStore)">
            <summary>
            Add a link to another object store (bucket).
            OBJECT STORE IMPLEMENTATION IS EXPERIMENTAL AND SUBJECT TO CHANGE.
            </summary>
            <param name="objectName">The name of the object</param>
            <param name="toStore">the store object to link to</param>
            <returns>the ObjectInfo for the link as saved or throws an exception</returns>
        </member>
        <member name="M:NATS.Client.ObjectStore.IObjectStore.Seal">
            <summary>
            Close (seal) the bucket to changes. The store (bucket) will be read only.
            OBJECT STORE IMPLEMENTATION IS EXPERIMENTAL AND SUBJECT TO CHANGE.
            </summary>
            <returns>the status object</returns>
        </member>
        <member name="M:NATS.Client.ObjectStore.IObjectStore.GetList">
            <summary>
            Get a list of all object [infos] in the store.
            OBJECT STORE IMPLEMENTATION IS EXPERIMENTAL AND SUBJECT TO CHANGE.
            </summary>
            <returns>the list of objects</returns>
        </member>
        <member name="M:NATS.Client.ObjectStore.IObjectStore.Watch(NATS.Client.ObjectStore.IObjectStoreWatcher,NATS.Client.ObjectStore.ObjectStoreWatchOption[])">
            <summary>
            Create a watch on the store (bucket).
            OBJECT STORE IMPLEMENTATION IS EXPERIMENTAL AND SUBJECT TO CHANGE.
            </summary>
            <param name="watcher">the implementation to receive changes.</param>
            <param name="watchOptions">the watch options to apply. If multiple conflicting options are supplied, the last options wins.</param>
            <returns>the NatsObjectStoreWatchSubscription</returns>
        </member>
        <member name="M:NATS.Client.ObjectStore.IObjectStore.GetStatus">
            <summary>
            Get the ObjectStoreStatus object.
            OBJECT STORE IMPLEMENTATION IS EXPERIMENTAL AND SUBJECT TO CHANGE.
            </summary>
            <returns>the status object</returns>
        </member>
        <member name="M:NATS.Client.ObjectStore.IObjectStoreManagement.Create(NATS.Client.ObjectStore.ObjectStoreConfiguration)">
            <summary>
            Create an object store.
            OBJECT STORE IMPLEMENTATION IS EXPERIMENTAL AND SUBJECT TO CHANGE.
            </summary>
            <param name="config">the object store configuration</param>
            <returns>bucket info</returns>
        </member>
        <member name="M:NATS.Client.ObjectStore.IObjectStoreManagement.GetBucketNames">
            <summary>
            Get the list of object stores bucket names
            OBJECT STORE IMPLEMENTATION IS EXPERIMENTAL AND SUBJECT TO CHANGE.
            </summary>
            <returns>list of object stores bucket names</returns>
        </member>
        <member name="M:NATS.Client.ObjectStore.IObjectStoreManagement.GetStatus(System.String)">
            <summary>
            Gets the status for an existing object store.
            OBJECT STORE IMPLEMENTATION IS EXPERIMENTAL AND SUBJECT TO CHANGE.
            </summary>
            <param name="bucketName">the object store bucket name to get info for</param>
        </member>
        <member name="M:NATS.Client.ObjectStore.IObjectStoreManagement.GetStatuses">
            <summary>
            Gets the status for all object store buckets.
            </summary>
            <returns>the bucket status object</returns>
        </member>
        <member name="M:NATS.Client.ObjectStore.IObjectStoreManagement.Delete(System.String)">
            <summary>
            Deletes an existing object store. Will throw a JetStreamApiException if the delete fails.
            OBJECT STORE IMPLEMENTATION IS EXPERIMENTAL AND SUBJECT TO CHANGE.
            </summary>
        </member>
        <member name="M:NATS.Client.ObjectStore.IObjectStoreWatcher.Watch(NATS.Client.ObjectStore.ObjectInfo)">
            <summary>
            Called when a key has been updated
            </summary>
            /// <param name="oi">The object info that has been updated</param>
        </member>
        <member name="M:NATS.Client.ObjectStore.IObjectStoreWatcher.EndOfData">
            <summary>
            Called once if there is no data when the watch is created
            or if there is data, the first time the watch exhausts all existing data.
            </summary>
        </member>
        <member name="T:NATS.Client.ObjectStore.ObjectInfo">
            <summary>
            
            </summary>
        </member>
        <member name="T:NATS.Client.ObjectStore.ObjectLink">
            <summary>
            The ObjectLink is used to embed links to other objects.
            OBJECT STORE IMPLEMENTATION IS EXPERIMENTAL AND SUBJECT TO CHANGE.
            </summary>
        </member>
        <member name="T:NATS.Client.ObjectStore.ObjectMeta">
            <summary>
            
            </summary>
        </member>
        <member name="T:NATS.Client.ObjectStore.ObjectMetaOptions">
            <summary>
            The ObjectMeta is Object Meta is high level information about an object.
            OBJECT STORE IMPLEMENTATION IS EXPERIMENTAL AND SUBJECT TO CHANGE.
            </summary>
        </member>
        <member name="P:NATS.Client.ObjectStore.ObjectStoreConfiguration.BucketName">
            <summary>
            The name of the bucket
            </summary>
        </member>
        <member name="P:NATS.Client.ObjectStore.ObjectStoreConfiguration.Description">
            <summary>
            The description of this bucket
            </summary>
        </member>
        <member name="P:NATS.Client.ObjectStore.ObjectStoreConfiguration.MaxBucketSize">
            <summary>
            The maximum number of bytes for this bucket
            </summary>
        </member>
        <member name="P:NATS.Client.ObjectStore.ObjectStoreConfiguration.Ttl">
            <summary>
            The maximum age for a value in this bucket
            </summary>
        </member>
        <member name="P:NATS.Client.ObjectStore.ObjectStoreConfiguration.StorageType">
            <summary>
            The storage type for this bucket
            </summary>
        </member>
        <member name="P:NATS.Client.ObjectStore.ObjectStoreConfiguration.Replicas">
            <summary>
            The number of replicas for this bucket
            </summary>
        </member>
        <member name="P:NATS.Client.ObjectStore.ObjectStoreConfiguration.Placement">
            <summary>
            Placement directives to consider when placing replicas of this stream
            </summary>
        </member>
        <member name="P:NATS.Client.ObjectStore.ObjectStoreConfiguration.IsCompressed">
            <summary>
            Compression setting
            </summary>
        </member>
        <member name="P:NATS.Client.ObjectStore.ObjectStoreConfiguration.Metadata">
            <summary>
             Metadata
            </summary>
        </member>
        <member name="M:NATS.Client.ObjectStore.ObjectStoreConfiguration.Builder">
            <summary>
            Creates a builder for the ObjectStoreConfiguration. 
            </summary>
            <returns>an ObjectStoreConfiguration builder</returns>
        </member>
        <member name="M:NATS.Client.ObjectStore.ObjectStoreConfiguration.Builder(System.String)">
            <summary>
            Creates a builder for the ObjectStoreConfiguration. 
            </summary>
            <param name="name">the name of the object store bucket</param>
            <returns>an ObjectStoreConfiguration builder</returns>
        </member>
        <member name="M:NATS.Client.ObjectStore.ObjectStoreConfiguration.Builder(NATS.Client.ObjectStore.ObjectStoreConfiguration)">
            <summary>
            Creates a builder for the ObjectStoreConfiguration. 
            </summary>
            <param name="osc">An existing ObjectStoreConfiguration</param>
            <returns>an ObjectStoreConfiguration builder</returns>
        </member>
        <member name="T:NATS.Client.ObjectStore.ObjectStoreConfiguration.ObjectStoreConfigurationBuilder">
            <summary>
            ObjectStoreConfiguration is created using a Builder. The builder supports chaining and will
            create a default set of options if no methods are calls.
            </summary>
        </member>
        <member name="M:NATS.Client.ObjectStore.ObjectStoreConfiguration.ObjectStoreConfigurationBuilder.#ctor">
            <summary>
            Default builder
            </summary>
        </member>
        <member name="M:NATS.Client.ObjectStore.ObjectStoreConfiguration.ObjectStoreConfigurationBuilder.#ctor(System.String)">
            <summary>
            Builder accepting the object store bucket name.
            </summary>
            <param name="name">the name of the object store bucket</param>
        </member>
        <member name="M:NATS.Client.ObjectStore.ObjectStoreConfiguration.ObjectStoreConfigurationBuilder.#ctor(NATS.Client.ObjectStore.ObjectStoreConfiguration)">
            <summary>
            Construct the builder by copying another configuration
            </summary>
            <param name="osc">the other configuration</param>
        </member>
        <member name="M:NATS.Client.ObjectStore.ObjectStoreConfiguration.ObjectStoreConfigurationBuilder.WithName(System.String)">
            <summary>
            Sets the name of the store.
            </summary>
            <param name="name">name of the store bucket</param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.ObjectStore.ObjectStoreConfiguration.ObjectStoreConfigurationBuilder.WithDescription(System.String)">
            <summary>
            Sets the description of the store.
            </summary>
            <param name="description">the description of the store.</param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.ObjectStore.ObjectStoreConfiguration.ObjectStoreConfigurationBuilder.WithMaxBucketSize(System.Int64)">
            <summary>
            Sets the maximum number of bytes in the ObjectStoreConfiguration. 
            </summary>
            <param name="maxBucketSize">the maximum number of bytes</param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.ObjectStore.ObjectStoreConfiguration.ObjectStoreConfigurationBuilder.WithTtl(NATS.Client.Internals.Duration)">
            <summary>
            Sets the maximum age for a value in this ObjectStoreConfiguration
            </summary>
            <param name="ttl">Sets the maximum age</param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.ObjectStore.ObjectStoreConfiguration.ObjectStoreConfigurationBuilder.WithStorageType(NATS.Client.JetStream.StorageType)">
            <summary>
            Sets the storage type in the ObjectStoreConfiguration.
            </summary>
            <param name="storageType">the storage type</param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.ObjectStore.ObjectStoreConfiguration.ObjectStoreConfigurationBuilder.WithReplicas(System.Int32)">
            <summary>
            Sets the number of replicas a message must be stored on in the ObjectStoreConfiguration.
            </summary>
            <param name="replicas">number of replicas</param>
            <returns>the number of replicas</returns>
        </member>
        <member name="M:NATS.Client.ObjectStore.ObjectStoreConfiguration.ObjectStoreConfigurationBuilder.WithPlacement(NATS.Client.JetStream.Placement)">
            <summary>
            Set the placement directive
            </summary>
            <param name="placement">the placement</param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.ObjectStore.ObjectStoreConfiguration.ObjectStoreConfigurationBuilder.WithCompression(System.Boolean)">
            <summary>
            Set whether to have compression.
            </summary>
            <param name="compression">true to use the default compression algorithm of the Object Store backing.</param>
            <returns>The ObjectStoreConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.ObjectStore.ObjectStoreConfiguration.ObjectStoreConfigurationBuilder.WithMetadata(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Sets the metadata for the configuration 
            </summary>
            <param name="metadata">the metadata dictionary</param>
            <returns>The ObjectStoreConfigurationBuilder</returns>
        </member>
        <member name="M:NATS.Client.ObjectStore.ObjectStoreConfiguration.ObjectStoreConfigurationBuilder.Build">
            <summary>
            Builds the ObjectStoreConfiguration
            </summary>
            <returns>the ObjectStoreConfiguration</returns>
        </member>
        <member name="M:NATS.Client.ObjectStore.ObjectStoreOptions.Builder">
            <summary>
            Gets a ObjectStoreOptionsBuilder builder.
            </summary>
            <returns>
            The builder
            </returns>
        </member>
        <member name="M:NATS.Client.ObjectStore.ObjectStoreOptions.Builder(NATS.Client.ObjectStore.ObjectStoreOptions)">
            <summary>
            Gets the ObjectStoreOptions builder based on an existing ObjectStoreOptions object.
            </summary>
            <param name="oso">an existing ObjectStoreOptions object</param>
            <returns>The builder</returns>
        </member>
        <member name="M:NATS.Client.ObjectStore.ObjectStoreOptions.Builder(NATS.Client.JetStream.JetStreamOptions)">
            <summary>
            Gets the ObjectStoreOptions builder based on an existing JetStreamOptions object.
            </summary>
            <param name="jso">an existing JetStreamOptions object</param>
            <returns>The builder</returns>
        </member>
        <member name="M:NATS.Client.ObjectStore.ObjectStoreOptions.ObjectStoreOptionsBuilder.#ctor">
            <summary>
            Construct a builder
            </summary>
        </member>
        <member name="M:NATS.Client.ObjectStore.ObjectStoreOptions.ObjectStoreOptionsBuilder.#ctor(NATS.Client.ObjectStore.ObjectStoreOptions)">
            <summary>
            Construct a builder from an existing ObjectStoreOptions object
            </summary>
            <param name="oso">an existing ObjectStoreOptions object</param>
        </member>
        <member name="M:NATS.Client.ObjectStore.ObjectStoreOptions.ObjectStoreOptionsBuilder.WithJetStreamOptions(NATS.Client.JetStream.JetStreamOptions)">
            <summary>
            Sets the JetStreamOptions.
            </summary>
            <param name="jso">The JetStreamOptions.</param>
            <returns>The ObjectStoreOptionsBuilder</returns>
        </member>
        <member name="M:NATS.Client.ObjectStore.ObjectStoreOptions.ObjectStoreOptionsBuilder.WithRequestTimeout(NATS.Client.Internals.Duration)">
            <summary>
            Sets the request timeout for JetStream API calls.
            </summary>
            <param name="requestTimeout">the duration to wait for responses.</param>
            <returns>The ObjectStoreOptionsBuilder</returns>
        </member>
        <member name="M:NATS.Client.ObjectStore.ObjectStoreOptions.ObjectStoreOptionsBuilder.WithJsPrefix(System.String)">
            <summary>
            Sets the prefix for JetStream subjects. A prefix can be used in conjunction with
            user permissions to restrict access to certain JetStream instances.  This must
            match the prefix used in the server.
            </summary>
            <param name="prefix">The prefix.</param>
            <returns>The JetStreamOptionsBuilder</returns>
        </member>
        <member name="M:NATS.Client.ObjectStore.ObjectStoreOptions.ObjectStoreOptionsBuilder.WithJsDomain(System.String)">
            <summary>
            Sets the domain for JetStream subjects. A domain can be used in conjunction with
            user permissions to restrict access to certain JetStream instances.  This must
            match the domain used in the server.
            </summary>
            <param name="domain">The domain.</param>
            <returns>The JetStreamOptionsBuilder</returns>
        </member>
        <member name="M:NATS.Client.ObjectStore.ObjectStoreOptions.ObjectStoreOptionsBuilder.Build">
            <summary>
            Builds the ObjectStoreOptions
            </summary>
            <returns>The ObjectStoreOptions object.</returns>
        </member>
        <member name="P:NATS.Client.ObjectStore.ObjectStoreStatus.BackingStreamInfo">
            <summary>
            The info for the stream which backs the bucket. Valid for BackingStore "JetStream"
            </summary>
        </member>
        <member name="P:NATS.Client.ObjectStore.ObjectStoreStatus.Config">
            <summary>
            The configuration object directly
            </summary>
        </member>
        <member name="P:NATS.Client.ObjectStore.ObjectStoreStatus.BucketName">
            <summary>
            The name of ths object store
            </summary>
        </member>
        <member name="P:NATS.Client.ObjectStore.ObjectStoreStatus.Description">
            <summary>
            The description of this bucket
            </summary>
        </member>
        <member name="P:NATS.Client.ObjectStore.ObjectStoreStatus.Size">
            <summary>
            The combined size of all data in the bucket including metadata, in bytes
            </summary>
        </member>
        <member name="P:NATS.Client.ObjectStore.ObjectStoreStatus.Sealed">
            <summary>
            If true, indicates the stream is sealed and cannot be modified in any way
            </summary>
        </member>
        <member name="P:NATS.Client.ObjectStore.ObjectStoreStatus.Ttl">
            <summary>
            The maximum age for a value in this bucket
            </summary>
        </member>
        <member name="P:NATS.Client.ObjectStore.ObjectStoreStatus.StorageType">
            <summary>
            The storage type for this bucket
            </summary>
        </member>
        <member name="P:NATS.Client.ObjectStore.ObjectStoreStatus.Replicas">
            <summary>
            The number of replicas for this bucket
            </summary>
        </member>
        <member name="P:NATS.Client.ObjectStore.ObjectStoreStatus.Placement">
            <summary>
            Placement directives to consider when placing replicas of this stream
            </summary>
        </member>
        <member name="P:NATS.Client.ObjectStore.ObjectStoreStatus.IsCompressed">
            <summary>
            Compression setting
            </summary>
        </member>
        <member name="P:NATS.Client.ObjectStore.ObjectStoreStatus.Metadata">
            <summary>
             Metadata
            </summary>
        </member>
        <member name="P:NATS.Client.ObjectStore.ObjectStoreStatus.BackingStore">
            <summary>
            The name of the type of backing store, currently only "JetStream"
            </summary>
        </member>
        <member name="F:NATS.Client.ObjectStore.ObjectStoreWatchOption.IgnoreDelete">
            <summary>
            Do not include deletes or purges in results.
            Default is to include deletes.
            </summary>
        </member>
        <member name="F:NATS.Client.ObjectStore.ObjectStoreWatchOption.IncludeHistory">
            <summary>
            Watch starting at the first entry for all keys.
            Default is to start at the last per key.
            </summary>
        </member>
        <member name="F:NATS.Client.ObjectStore.ObjectStoreWatchOption.UpdatesOnly">
            <summary>
            Watch starting when there are new entries for keys.
            Default is to start at the last per key.
            </summary>
        </member>
        <member name="T:NATS.Client.Options">
            <summary>
            This class is used to setup all NATs client options.
            </summary>
        </member>
        <member name="F:NATS.Client.Options.ClosedEventHandler">
            <summary>
            Represents the method that will handle an event raised 
            when a connection is closed.
            </summary>
        </member>
        <member name="F:NATS.Client.Options.ServerDiscoveredEventHandler">
            <summary>
            Represents the method that will handle an event raised
            whenever a new server has joined the cluster.
            </summary>
        </member>
        <member name="F:NATS.Client.Options.DisconnectedEventHandler">
            <summary>
            Represents the method that will handle an event raised 
            when a connection has been disconnected from a server.
            </summary>
        </member>
        <member name="F:NATS.Client.Options.ReconnectedEventHandler">
            <summary>
            Represents the method that will handle an event raised 
            when a connection has reconnected to a server.
            </summary>
        </member>
        <member name="F:NATS.Client.Options.AsyncErrorEventHandler">
            <summary>
            Represents the method that will handle an event raised 
            when an error occurs out of band.
            </summary>
        </member>
        <member name="F:NATS.Client.Options.LameDuckModeEventHandler">
            <summary>
            Represents the method that will handle an event raised
            when the server notifies the connection that it entered lame duck mode.
            </summary>
            <remarks>
            A server in lame duck mode will gradually disconnect all its connections
            before shuting down. This is often used in deployments when upgrading
            NATS Servers.
            </remarks>
        </member>
        <member name="F:NATS.Client.Options.ReconnectDelayHandler">
            <summary>
            Represents the optional method that is used to get from the
            user the desired delay the client should pause before attempting
            to reconnect again.
            </summary>
            <remarks>
            Note that this is invoked after the library tried the
            entire list of URLs and failed to reconnect.  By default, the client
            will use the sum of <see cref="P:NATS.Client.Options.ReconnectWait"/> and a random value between
            zero and <see cref="P:NATS.Client.Options.ReconnectJitter"/> or
            <see cref="P:NATS.Client.Options.ReconnectJitterTLS"/>
            </remarks>
        </member>
        <member name="F:NATS.Client.Options.HeartbeatAlarmEventHandler">
            <summary>
            Represents the method that will handle an heartbeat alarm
            </summary>
        </member>
        <member name="F:NATS.Client.Options.UnhandledStatusEventHandler">
            <summary>
            Represents the method that will handle an unhandled status received in a push subscription.
            </summary>
        </member>
        <member name="F:NATS.Client.Options.PullStatusWarningEventHandler">
            <summary>
            Represents the method that will handle a status message that indicating either the subscription or pull might be problematic.
            </summary>
        </member>
        <member name="F:NATS.Client.Options.PullStatusErrorEventHandler">
            <summary>
            Represents the method that will handle a status message that indicating either the subscription cannot continue or the pull request cannot be processed.
            </summary>
        </member>
        <member name="F:NATS.Client.Options.FlowControlProcessedEventHandler">
            <summary>
            Represents the method that will handle a flow control processed event
            </summary>
        </member>
        <member name="F:NATS.Client.Options.UserJWTEventHandler">
            <summary>
            Represents the optional method that is used to fetch and
            return the account signed JWT for this user.  Exceptions thrown
            here will be passed up to the caller when creating a connection.
            </summary>
        </member>
        <member name="F:NATS.Client.Options.UserSignatureEventHandler">
            <summary>
            Represents the optional method that is used to sign a nonce
            from the server while authenticating with nkeys. The user
            should sign the nonce and set the base64 encoded signature.
            Exceptions thrown here will be passed up to the caller when 
            creating a connection.
            </summary>
        </member>
        <member name="M:NATS.Client.Options.SetUserCredentials(System.String,System.String)">
            <summary>
            Sets user credentials using the NATS 2.0 security scheme.
            </summary>
            <param name="credentialsPath">A user JWT, e.g user.jwt</param>
            <param name="privateKeyPath">Private Key file</param>
        </member>
        <member name="M:NATS.Client.Options.SetUserCredentialsFromString(System.String)">
            <summary>
            Sets user credentials from text instead of a file using the NATS 2.0 security scheme.
            </summary>
            <param name="credentialsText">The text containing the "-----BEGIN NATS USER JWT-----" block
            and the text containing the "-----BEGIN USER NKEY SEED-----" block</param>
        </member>
        <member name="M:NATS.Client.Options.SetUserCredentialsFromStrings(System.String,System.String)">
            <summary>
            Sets user credentials from text instead of a file using the NATS 2.0 security scheme.
            </summary>
            <param name="userJwtText">The text containing the "-----BEGIN NATS USER JWT-----" block</param>
            <param name="nkeySeedText">The text containing the "-----BEGIN USER NKEY SEED-----" block or the seed begining with "SU".
            May be the same as the jwt string if they are chained.</param>
        </member>
        <member name="M:NATS.Client.Options.SetUserCredentials(System.String)">
            <summary>
            Sets user credentials using the NATS 2.0 security scheme.
            </summary>
            <param name="credentialsPath">A chained credentials file, e.g user.cred</param>
        </member>
        <member name="M:NATS.Client.Options.SetUserCredentialHandlers(System.EventHandler{NATS.Client.UserJWTEventArgs},System.EventHandler{NATS.Client.UserSignatureEventArgs})">
            <summary>
            SetUserJWT will set the callbacks to retrieve the user's JWT and
            the signature callback to sign the server nonce. This an the Nkey
            option are mutually exclusive.
            </summary>
            <param name="userJWTEventHandler">A User JWT Event Handler</param>
            <param name="userSignatureEventHandler">A User signature Event Handler</param>
        </member>
        <member name="M:NATS.Client.Options.SetNkey(System.String,System.EventHandler{NATS.Client.UserSignatureEventArgs})">
            <summary>
            SetNkey will set the public Nkey and the signature callback to
            sign the server nonce.
            </summary>
            <param name="publicNkey">The User's public Nkey</param>
            <param name="userSignatureEventHandler">A User signature Event Handler to sign the server nonce.</param>
        </member>
        <member name="M:NATS.Client.Options.SetNkey(System.String,System.String)">
            <summary>
            SetNkey will set the public Nkey and the signature callback to
            sign the server nonce.
            </summary>
            <param name="publicNkey">The User's public Nkey</param>
            <param name="privateKeyPath">A path to a file containing the private Nkey.</param>
        </member>
        <member name="M:NATS.Client.Options.SetJWTEventHandlers(System.EventHandler{NATS.Client.UserJWTEventArgs},System.EventHandler{NATS.Client.UserSignatureEventArgs})">
            <summary>
            Sets a custom JWT Event Handler and Signature handler.
            </summary>
            <param name="JWTEventHandler"></param>
            <param name="SignatureEventHandler"></param>
        </member>
        <member name="P:NATS.Client.Options.Url">
            <summary>
            Gets or sets the url used to connect to the NATs server.
            Can be a comma delimited list, it will be turning into Servers
            </summary>
            <remarks>
            This may contain username/password information.
            </remarks>
        </member>
        <member name="P:NATS.Client.Options.Servers">
            <summary>
            Gets or sets the array of servers that the NATS client will connect to.
            </summary>
            <remarks>
            The individual URLs may contain username/password information.
            </remarks>
        </member>
        <member name="P:NATS.Client.Options.NoRandomize">
            <summary>
            Gets or sets a value indicating whether or not the server chosen for connection
            should not be selected randomly.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.Name">
            <summary>
            Gets or sets the name of this client.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.Verbose">
            <summary>
            Gets or sets a value indicating whether or not logging information should be verbose.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.Pedantic">
            <summary>
            This option is not used by the NATS Client.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.UseOldRequestStyle">
            <summary>
            Gets or sets a value indicating whether or not the old
            request pattern should be used.
            </summary>
            <remarks>
            The old request pattern involved a separate subscription
            per request inbox. The new style (default) involves creating
            a single inbox subscription per connection, upon the first
            request, and mapping outbound requests over that one
            subscription.
            </remarks>
        </member>
        <member name="P:NATS.Client.Options.Secure">
            <summary>
            Get or sets a value indicating whether or not a secure connection (TLS)
            should be made to NATS servers.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.TCPConnection">
            <summary>
            Get or sets a custom ITCPConnection object to use for communication
            to the NATs Server.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.AllowReconnect">
            <summary>
            Gets or sets a value indicating whether or not an <see cref="T:NATS.Client.IConnection"/> will attempt
            to reconnect to the NATS server if a connection has been lost.
            </summary>
        </member>
        <member name="F:NATS.Client.Options.ReconnectForever">
            <summary>
            Set <see cref="P:NATS.Client.Options.MaxReconnect"/> to this value for the client to attempt to
            connect indefinitely. 
            </summary>
        </member>
        <member name="P:NATS.Client.Options.MaxReconnect">
            <summary>
            Gets or sets the maxmimum number of times a connection will
            attempt to reconnect.  To reconnect indefinitely set this value to
            <see cref="F:NATS.Client.Options.ReconnectForever"/>
            </summary>
        </member>
        <member name="P:NATS.Client.Options.ReconnectWait">
            <summary>
            Gets or sets the amount of time, in milliseconds, the client will 
            wait before attempting a reconnection.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.PingInterval">
            <summary>
            Gets or sets the interval, in milliseconds, pings will be sent to the server.
            </summary>
            <remarks>
            Take care to coordinate this value with the server's interval.
            </remarks>
        </member>
        <member name="P:NATS.Client.Options.Timeout">
            <summary>
            Gets or sets the timeout, in milliseconds, when connecting to a NATS server.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.MaxPingsOut">
            <summary>
            Gets or sets the maximum number of outstanding pings before
            terminating a connection.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.SubChannelLength">
            <summary>
            Gets or sets the size of the subscriber channel, or number
            of messages the subscriber will buffer internally.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.PendingMessageLimit">
            <summary>
            Gets or sets the size of the subscriber channel, or number
            of messages the subscriber will buffer internally.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.PendingBytesLimit">
            <summary>
            Gets or sets the maximum pending bytes limit for the subscription, 
            or number of bytes the subscriber will buffer internally.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.User">
            <summary>
            Gets or sets the user name used when connecting to the NATs server,
            when not included directly in the URLs.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.Password">
            <summary>
            Sets the user password used when connecting to the NATs server,
            when not included directly in the URLs.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.Token">
            <summary>
            Gets or sets the token used when connecting to the NATs server
            when not included directly in the URLs.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.CustomInboxPrefix">
            <summary>
            Gets or sets a custom inbox prefix.
            </summary>
        </member>
        <member name="M:NATS.Client.Options.AddCertificate(System.String)">
            <summary>
            Adds an X.509 certificate from a file for use with a secure connection.
            </summary>
            <param name="fileName">Path to the certificate file to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="fileName"/> is <c>null</c>.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An error with the certificate
            occurred. For example:
            <list>
            <item>The certificate file does not exist.</item>
            <item>The certificate is invalid.</item>
            <item>The certificate's password is incorrect.</item></list></exception>
        </member>
        <member name="M:NATS.Client.Options.AddCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Adds an X.509 certificate for use with a secure connection.
            </summary>
            <param name="certificate">An X.509 certificate represented as an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="certificate"/> is <c>null</c>.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An error with the certificate
            occurred. For example:
            <list>
            <item>The certificate file does not exist.</item>
            <item>The certificate is invalid.</item>
            <item>The certificate's password is incorrect.</item></list></exception>
        </member>
        <member name="F:NATS.Client.Options.TLSRemoteCertificationValidationCallback">
            <summary>
            Overrides the default NATS RemoteCertificationValidationCallback.
            </summary>
            <remarks>
            The default callback simply checks if there were any protocol
            errors. Overriding this callback is useful during testing, or accepting self
            signed certificates.
            </remarks>
        </member>
        <member name="P:NATS.Client.Options.SubscriberDeliveryTaskCount">
            <summary>
            Gets or sets the number of long running tasks to deliver messages
            to asynchronous subscribers. The default is zero (<c>0</c>) indicating each
            asynchronous subscriber has its own channel and task created to 
            deliver messages.
            </summary>
            <remarks>
            The default where each subscriber has a delivery task is very 
            performant, but does not scale well when large numbers of
            subscribers are required in an application.  Setting this value
            will limit the number of subscriber channels to the specified number
            of long running tasks.  These tasks will process messages for ALL
            asynchronous subscribers rather than one task for each subscriber.  
            Delivery order by subscriber is still guaranteed.  The shared message
            processing channels are still each bounded by the SubChannelLength 
            option.  Note, slow subscriber errors will flag the last subscriber 
            processed in the tasks, which may not actually be the slowest subscriber.
            </remarks>
        </member>
        <member name="P:NATS.Client.Options.SubscriptionBatchSize">
            <summary>
            Gets or sets the batch size for calling subscription handlers.
            </summary>
            <remarks>
            When delivering messages to the subscriber, the batch size determines
            how many messages could be retrieved from the internal subscription
            queue at one time. This can allow higher performance from a single
            subscriber by avoiding the locking overhead of one-at-a-time
            retrieval from the queue.
            </remarks>
        </member>
        <member name="P:NATS.Client.Options.NoEcho">
            <summary>
            NoEcho configures whether the server will echo back messages
            that are sent on this connection if we also have matching subscriptions.
            Note this is supported on servers >= version 1.2. Proto 1 or greater.
            </summary>
        </member>
        <member name="P:NATS.Client.Options.IgnoreDiscoveredServers">
            <summary>
            Whether or not to ignore discovered servers when considering for connect/reconnect
            </summary>
        </member>
        <member name="P:NATS.Client.Options.TlsFirst">
            <summary>
            Whether or not to to do Tls Handshake First. Valid against servers 2.10.3 and later
            </summary>
        </member>
        <member name="P:NATS.Client.Options.ClientSideLimitChecks">
            <summary>
            Whether or not to make client side limit checks, currently only core publish/request max payload
            </summary>
        </member>
        <member name="F:NATS.Client.Options.ReconnectBufferSizeUnbounded">
            <summary>
            Constant used to sets the reconnect buffer size to unbounded.
            </summary>
            <seealso cref="P:NATS.Client.Options.ReconnectBufferSize"/>
        </member>
        <member name="F:NATS.Client.Options.ReconnectBufferDisabled">
            <summary>
            Constant that disables the reconnect buffer.
            </summary>
            <seealso cref="P:NATS.Client.Options.ReconnectBufferSize"/>
        </member>
        <member name="P:NATS.Client.Options.ReconnectBufferSize">
            <summary>
            Gets or sets the buffer size of messages kept while busy reconnecting.
            </summary>
            <remarks>
            When reconnecting, the NATS client will hold published messages that
            will be flushed to the new server upon a successful reconnect.  The default
            is buffer size is 8 MB.  This buffering can be disabled.
            </remarks>
            <seealso cref="F:NATS.Client.Options.ReconnectBufferSizeUnbounded"/>
            <seealso cref="F:NATS.Client.Options.ReconnectBufferDisabled"/>
        </member>
        <member name="M:NATS.Client.Options.SetReconnectJitter(System.Int32,System.Int32)">
            <summary>
            Sets the the upper bound for a random delay in milliseconds added to
            ReconnectWait during a reconnect for clear and TLS connections.
            </summary>
            <remarks>
            Defaults are 100 ms and 1s for TLS.
            </remarks>
            <seealso cref="F:NATS.Client.Options.ReconnectDelayHandler"/>
            <seealso cref="P:NATS.Client.Options.ReconnectJitter"/>
            <seealso cref="P:NATS.Client.Options.ReconnectJitterTLS"/>
            <seealso cref="P:NATS.Client.Options.ReconnectWait"/>
        </member>
        <member name="P:NATS.Client.Options.ReconnectJitter">
            <summary>
            Get the the upper bound for a random delay added to
            ReconnectWait during a reconnect for connections.
            </summary>
            <seealso cref="F:NATS.Client.Options.ReconnectDelayHandler"/>
            <seealso cref="P:NATS.Client.Options.ReconnectJitterTLS"/>
            <seealso cref="P:NATS.Client.Options.ReconnectWait"/>
            <seealso cref="M:NATS.Client.Options.SetReconnectJitter(System.Int32,System.Int32)"/>
        </member>
        <member name="P:NATS.Client.Options.ReconnectJitterTLS">
            <summary>
            Get the the upper bound for a random delay added to
            ReconnectWait during a reconnect for TLS connections.
            </summary>
            <seealso cref="F:NATS.Client.Options.ReconnectDelayHandler"/>
            <seealso cref="P:NATS.Client.Options.ReconnectJitter"/>
            <seealso cref="M:NATS.Client.Options.SetReconnectJitter(System.Int32,System.Int32)"/>
        </member>
        <member name="P:NATS.Client.Options.CheckCertificateRevocation">
            <summary>
            Get or set whether to check Certificate Revocation when connecting via TLS
            </summary>
            <seealso cref="M:System.Net.Security.SslStream.AuthenticateAsClientAsync(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean)"/>
        </member>
        <member name="M:NATS.Client.Options.ToString">
            <summary>
            Returns a string representation of the
            value of this Options instance.
            </summary>
            <returns>string value of this instance.</returns>
        </member>
        <member name="T:NATS.Client.ReconnectOptions">
            <summary>
            Options used when calling IConnection.Reconnect
            </summary>
        </member>
        <member name="P:NATS.Client.ReconnectOptions.FlushTimeout">
            <summary>
            Milliseconds. If supplied and at least 1 millisecond, the Reconnect will
            call IConnection.Flush(timeout) before closing and reconnecting. 
            </summary>
        </member>
        <member name="M:NATS.Client.ReconnectOptions.WithFlushTimeout(System.Int32)">
            <summary>
            
            </summary>
            <param name="timeout">The number of milliseconds to wait for the flush to complete.</param>
            <returns></returns>
        </member>
        <member name="T:NATS.Client.Rx.INATSObservable`1">
            <summary>
            Marker interface to have shipped extension methods to not interfere
            with official RX extensions.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:NATS.Client.Rx.NATSObservable`1">
            <summary>
            Base-class for basing observable solutions upon.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NATS.Client.Rx.NATSObservable`1.Subscribe(System.IObserver{`0})">
            <summary>
            Subscribes sent observer to the observable stream.
            </summary>
            <param name="observer">The Observer to invoke when messages arrive.</param>
            <returns>Subscription. Dispose when done consuming.</returns>
        </member>
        <member name="T:NATS.Client.Rx.NATSObservableSubscription">
            <summary>
            Represents an observable async subscription to which you
            can subscribe an consume messages from in push-style form.
            </summary>
        </member>
        <member name="M:NATS.Client.Rx.NATSObservableSubscription.Wrap(NATS.Client.IAsyncSubscription)">
            <summary>
            Wraps sent subscription and turns it into an observable.
            </summary>
            <param name="subscription"></param>
            <returns></returns>
        </member>
        <member name="T:NATS.Client.Rx.NATSRxException">
            <summary>
            The exception that is thrown when a RX operation fails.
            </summary>
        </member>
        <member name="M:NATS.Client.Rx.Ops.OpsExtensions.Subscribe``1(NATS.Client.Rx.INATSObservable{``0},System.Action{``0},System.Action{System.Exception},System.Action)">
            <summary>
            Subscribes a delegating observer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ob"></param>
            <param name="onNext"></param>
            <param name="onError"></param>
            <param name="onCompleted"></param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.Rx.Ops.OpsExtensions.SubscribeSafe``1(NATS.Client.Rx.INATSObservable{``0},System.Action{``0},System.Action{System.Exception},System.Action)">
            <summary>
            Subscribes a Safe delegating observer. Safe means that in the event of a failing observer, it will not get unsubscribed and disposed
            but instead still be seen as a valid observer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ob"></param>
            <param name="onNext"></param>
            <param name="onError"></param>
            <param name="onCompleted"></param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.Rx.Ops.OpsExtensions.SubscribeSafe``1(NATS.Client.Rx.INATSObservable{``0},System.IObserver{``0})">
            <summary>
            Subscribes a Safe observer. Safe means that in the event of a failing observer, it will not get unsubscribed and disposed
            but instead still be seen as a valid observer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ob"></param>
            <param name="observer"></param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.Rx.Ops.OpsExtensions.Where``1(NATS.Client.Rx.INATSObservable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Applies passed predicate <paramref name="predicate"/> to filter the stream of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ob"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.Rx.Ops.OpsExtensions.Select``2(NATS.Client.Rx.INATSObservable{``0},System.Func{``0,``1})">
            <summary>
            Maps observable of <typeparamref name="TSrc"/> to observable of <typeparamref name="TResult"/>.
            </summary>
            <typeparam name="TSrc"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="ob"></param>
            <param name="mapper"></param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.Rx.RxExtensions.Observe(NATS.Client.IConnection,System.String)">
            <summary>
            Subscribes to the passed subject and returns a hot observable. Hence unless you
            subscribe to the observable, no message will be handled and old messages will
            not be delivered, only new messages.
            </summary>
            <param name="cn">Connection to observe.</param>
            <param name="subject">Subject to observe.</param>
            <returns>Observable stream of messages.</returns>
        </member>
        <member name="M:NATS.Client.Rx.RxExtensions.ToObservable(NATS.Client.IAsyncSubscription)">
            <summary>
            Turns the passed <see cref="T:NATS.Client.IAsyncSubscription"/> to a hot observable. Hence unless you
            subscribe to the observable, no message will be handled and old messages will
            not be delivered, only new messages.
            </summary>
            <param name="subscription">Subscription to observe.</param>
            <returns>Observable stream of messages.</returns>
            <remarks>The passed subscription will be disposed when you dispose the observable.</remarks>
        </member>
        <member name="T:NATS.Client.Service.Discovery">
            <summary>
            Discovery is a utility class to help discover services by executing Ping, Info and Stats requests
            You are required to provide a connection.
            Optionally you can set 'maxTimeMillis' and 'maxResults'. When making a discovery request,
            the discovery will wait until the first one of those thresholds is reached before returning the results.
            <para>'maxTimeMillis' defaults to {@value DEFAULT_DISCOVERY_MAX_TIME_MILLIS}</para>
            <para>'maxResults' defaults tp {@value DEFAULT_DISCOVERY_MAX_RESULTS}</para>
            </summary>
        </member>
        <member name="P:NATS.Client.Service.Discovery.InboxSupplier">
            <summary>
            Override the normal inbox with a custom inbox to support you security model
            </summary>
        </member>
        <member name="M:NATS.Client.Service.Discovery.#ctor(NATS.Client.IConnection,System.Int32,System.Int32)">
            <summary>
            Construct a Discovery instance
            </summary>
            <param name="conn">the NATS Connection</param>
            <param name="maxTimeMillis">optional, the maximum time to wait for discovery requests to complete or any number less than 1 to use the default</param>
            <param name="maxResults">optional, the maximum number of results to wait for or any number less than 1 to use the default</param>
        </member>
        <member name="M:NATS.Client.Service.Discovery.Ping">
            <summary>
            Make a ping request to all services running on the server.
            </summary>
            <returns>the list of <see cref="T:NATS.Client.Service.PingResponse"/></returns>
        </member>
        <member name="M:NATS.Client.Service.Discovery.Ping(System.String)">
            <summary>
            Make a stats request only to services having the matching service name
            </summary>
            <param name="serviceName">the service name</param>
            <returns>the list of <see cref="T:NATS.Client.Service.StatsResponse"/></returns>
        </member>
        <member name="M:NATS.Client.Service.Discovery.PingForNameAndId(System.String,System.String)">
            <summary>
            Make a ping request only to services having the matching service name
            </summary>
            <param name="serviceName">the service name</param>
            <param name="serviceId">the specific service id</param>
            <returns>the list of <see cref="T:NATS.Client.Service.PingResponse"/></returns>
        </member>
        <member name="M:NATS.Client.Service.Discovery.Info">
            <summary>
            Make an info request to all services running on the server.
            </summary>
            <returns>the list of <see cref="T:NATS.Client.Service.InfoResponse"/></returns>
        </member>
        <member name="M:NATS.Client.Service.Discovery.Info(System.String)">
            <summary>
            Make an info request only to services having the matching service name
            </summary>
            <param name="serviceName">the service name</param>
            <returns>the list of <see cref="T:NATS.Client.Service.InfoResponse"/></returns>
        </member>
        <member name="M:NATS.Client.Service.Discovery.InfoForNameAndId(System.String,System.String)">
            <summary>
            Make an info request to a specific instance of a service having matching service name and id
            </summary>
            <param name="serviceName">the service name</param>
            <param name="serviceId">the specific service id</param>
            <returns>the list of <see cref="T:NATS.Client.Service.InfoResponse"/></returns>
        </member>
        <member name="M:NATS.Client.Service.Discovery.Stats">
            <summary>
            Make a stats request to all services running on the server.
            </summary>
            <returns>the list of <see cref="T:NATS.Client.Service.StatsResponse"/></returns>
        </member>
        <member name="M:NATS.Client.Service.Discovery.Stats(System.String)">
            <summary>
            Make a stats request only to services having the matching service name
            </summary>
            <param name="serviceName">the service name</param>
            <returns>the list of <see cref="T:NATS.Client.Service.StatsResponse"/></returns>
        </member>
        <member name="M:NATS.Client.Service.Discovery.StatsForNameAndId(System.String,System.String)">
            <summary>
            Make a stats request to a specific instance of a service having matching service name and id
            </summary>
            <param name="serviceName">the service name</param>
            <param name="serviceId">the specific service id</param>
            <returns>the list of <see cref="T:NATS.Client.Service.StatsResponse"/></returns>
        </member>
        <member name="T:NATS.Client.Service.Endpoint">
            <summary>
            Endpoint encapsulates the name, subject and metadata for a <see cref="T:NATS.Client.Service.ServiceEndpoint"/>.
            <para>Endpoints can be used directly or as part of a group. <see cref="T:NATS.Client.Service.ServiceEndpoint"/> and <see cref="T:NATS.Client.Service.Group"/></para>
            <para>Endpoint names and subjects are considered 'Restricted Terms' and must only contain A-Z, a-z, 0-9, '-' or '_'</para>
            <para>To create an Endpoint, either use a direct constructor or use the Endpoint builder
            via the static method <code>builder()</code> or <c>new Endpoint.Builder() to get an instance.</c>
            </para>
            </summary>
        </member>
        <member name="P:NATS.Client.Service.Endpoint.Name">
            <value>The name of the Endpoint</value>
        </member>
        <member name="P:NATS.Client.Service.Endpoint.Subject">
            <value>The subject of the Endpoint</value>
        </member>
        <member name="P:NATS.Client.Service.Endpoint.QueueGroup">
            <value>The queue group of the Endpoint</value>
        </member>
        <member name="P:NATS.Client.Service.Endpoint.Metadata">
            <value>A copy of the metadata of the Endpoint</value>
        </member>
        <member name="M:NATS.Client.Service.Endpoint.#ctor(System.String)">
            <summary>
            Directly construct an Endpoint with a name, which becomes the subject
            </summary>
            <param name="name">the name</param>
        </member>
        <member name="M:NATS.Client.Service.Endpoint.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Directly construct an Endpoint with a name, which becomes the subject, and metadata
            </summary>
            <param name="name">the name</param>
            <param name="metadata">the metadata</param>
        </member>
        <member name="M:NATS.Client.Service.Endpoint.#ctor(System.String,System.String)">
            <summary>
            Directly construct an Endpoint with a name and a subject
            </summary>
            <param name="name">the name</param>
            <param name="subject">the subject</param>
        </member>
        <member name="M:NATS.Client.Service.Endpoint.#ctor(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Directly construct an Endpoint with a name, the subject, and metadata
            </summary>
            <param name="name">the name</param>
            <param name="subject">the subject</param>
            <param name="metadata">the metadata</param>
        </member>
        <member name="M:NATS.Client.Service.Endpoint.#ctor(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Directly construct an Endpoint with a name, the subject, and metadata
            </summary>
            <param name="name">the name</param>
            <param name="subject">the subject</param>
            <param name="queueGroup">the queue group</param>
            <param name="metadata">the metadata</param>
        </member>
        <member name="M:NATS.Client.Service.Endpoint.ToJsonNode">
            <summary>
            Build a service using a fluent builder. Use Service.Builder() to get an instance or <c>new ServiceBuilder()</c>
            </summary>
        </member>
        <member name="M:NATS.Client.Service.Endpoint.Builder">
            <summary>
            Get an instance of an Endpoint builder.
            </summary>
            <returns>the instance</returns>
        </member>
        <member name="T:NATS.Client.Service.Endpoint.EndpointBuilder">
            <summary>
            Build an Endpoint using a fluent builder.
            </summary>
        </member>
        <member name="M:NATS.Client.Service.Endpoint.EndpointBuilder.WithEndpoint(NATS.Client.Service.Endpoint)">
            <summary>
            Copy the Endpoint, replacing all existing endpoint information.
            </summary>
            <param name="endpoint">the endpoint to copy</param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.Service.Endpoint.EndpointBuilder.WithName(System.String)">
            <summary>
            Set the name for the Endpoint, replacing any name already set.
            </summary>
            <param name="name">the endpoint name</param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.Service.Endpoint.EndpointBuilder.WithSubject(System.String)">
            <summary>
            Set the subject for the Endpoint, replacing any subject already set.
            </summary>
            <param name="subject">the subject</param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.Service.Endpoint.EndpointBuilder.WithQueueGroup(System.String)">
            <summary>
            Set the queue group for the Endpoint, replacing any queue group already set.
            </summary>
            <param name="queueGroup">the queue group</param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.Service.Endpoint.EndpointBuilder.WithMetadata(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Set the metadata for the Endpoint, replacing any metadata already set.
            </summary>
            <param name="metadata">the metadata</param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.Service.Endpoint.EndpointBuilder.Build">
            <summary>
            Build the Endpoint instance.
            </summary>
            <returns>the Endpoint instance</returns>
        </member>
        <member name="T:NATS.Client.Service.EndpointContext">
            <summary>
            Internal class to support service implementation
            </summary>
        </member>
        <member name="T:NATS.Client.Service.EndpointStats">
            <summary>
            Endpoints stats contains various stats and custom data for an endpoint.
            <code>
            {
            "id": "ZP1oVevzLGu4CBORMXKKke",
            "name": "Service1",
            "version": "0.0.1",
            "endpoints": [{
                "name": "SortEndpointAscending",
                "subject": "sort.ascending",
                "queue_group": "q",
                "num_requests": 1,
                "processing_time": 538900,
                "average_processing_time": 538900,
                "started": "2023-08-15T13:51:41.318000000Z"
            }
            </code>
            <code>
            {
                "name": "SortEndpointDescending",
                "subject": "sort.descending",
                "queue_group": "q",
                "num_requests": 1,
                "processing_time": 88400,
                "average_processing_time": 88400,
                "started": "2023-08-15T13:51:41.318000000Z"
            }
            </code>
            <code>
            {
                "name": "EchoEndpoint",
                "subject": "echo",
                "queue_group": "q",
                "num_requests": 5,
                "processing_time": 1931600,
                "average_processing_time": 386320,
                "data": {
                     "idata": 2,
                     "sdata": "s-996409223"
                },
                "started": "2023-08-15T13:51:41.318000000Z"
            }
            </code>
            </summary>
        </member>
        <member name="P:NATS.Client.Service.EndpointStats.Name">
            <value>Get the name of the Endpoint</value>
        </member>
        <member name="P:NATS.Client.Service.EndpointStats.Subject">
            <value>Get the subject of the Endpoint</value>
        </member>
        <member name="P:NATS.Client.Service.EndpointStats.QueueGroup">
            <value>Get the queue group for the Endpoint</value>
        </member>
        <member name="P:NATS.Client.Service.EndpointStats.NumRequests">
            <value>The number of requests received by the endpoint</value>
        </member>
        <member name="P:NATS.Client.Service.EndpointStats.NumErrors">
            <value>Number of errors that the endpoint has raised</value>
        </member>
        <member name="P:NATS.Client.Service.EndpointStats.ProcessingTime">
            <value>Total processing time for the endpoint</value>
        </member>
        <member name="P:NATS.Client.Service.EndpointStats.AverageProcessingTime">
            <value>Average processing time is the total processing time divided by the num requests</value>
        </member>
        <member name="P:NATS.Client.Service.EndpointStats.LastError">
            <value>If set, the last error triggered by the endpoint</value>
        </member>
        <member name="P:NATS.Client.Service.EndpointStats.Data">
            <value>A field that can be customized with any data as returned by stats handler</value>
        </member>
        <member name="P:NATS.Client.Service.EndpointStats.DataAsJson">
            <value>The json representation of the custom data. May be null</value>
        </member>
        <member name="P:NATS.Client.Service.EndpointStats.Started">
            <value>Get the time the endpoint was started (or restarted)</value>
        </member>
        <member name="T:NATS.Client.Service.Group">
            <summary>
            Group is way to organize endpoints by serving as a common prefix to all endpoints registered in it.
            </summary>
        </member>
        <member name="P:NATS.Client.Service.Group.Name">
            <value>Get the name of the group.</value>
        </member>
        <member name="P:NATS.Client.Service.Group.Next">
            <value>Get the next group after this group. May be null.</value>
        </member>
        <member name="P:NATS.Client.Service.Group.Subject">
            <value>The resolved subject of a group by concatenating the group name and any groups.</value>
            <summary>
            For example, this:
            <code>
            Group g = new Group("A")
                .appendGroup(new Group("B"))
                .appendGroup(new Group("C"))
                .appendGroup(new Group("D"));
            System.out.println(g.getSubject());
            </code>
            prints "A.B.C.D"
            </summary>
        </member>
        <member name="M:NATS.Client.Service.Group.#ctor(System.String)">
            <summary>
            Construct a group.
            <p>Group names and subjects are considered 'Restricted Terms' and must only contain A-Z, a-z, 0-9, '-' or '_'</p>
            </summary>
            <param name="name">the group name</param>
        </member>
        <member name="M:NATS.Client.Service.Group.AppendGroup(NATS.Client.Service.Group)">
            <summary>
            Append a group at the end of the list of groups this group starts or is a part of.
            Appended groups can be traversed by doing <see cref="P:NATS.Client.Service.Group.Next"/>
            Subsequent appends add the group to the end of the list.
            </summary>
            <param name="group">the group to append</param>
            <returns>like a fluent builder, return the Group instance</returns>
        </member>
        <member name="T:NATS.Client.Service.InfoResponse">
            <summary>
            Info response class forms the info json payload, for example:
            <code>{"id":"JlkwZvmHAXCQGwwxiPwaBJ","name":"MyService","version":"0.0.1","endpoints":[{"name":"MyEndpoint","subject":"myend"}],"type":"io.nats.micro.v1.info_response"}</code>
            </summary>
        </member>
        <member name="P:NATS.Client.Service.InfoResponse.Description">
            <value>Description for the service</value>
        </member>
        <member name="P:NATS.Client.Service.InfoResponse.Endpoints">
            <value>List of endpoints</value>
        </member>
        <member name="T:NATS.Client.Service.PingResponse">
            <summary>
            Ping response class forms the ping json payload, for example:
            <code>{"id":"JlkwZvmHAXCQGwwxiPwaBJ","name":"MyService","version":"0.0.1","type":"io.nats.micro.v1.ping_response"}</code>
            </summary>
        </member>
        <member name="T:NATS.Client.Service.Service">
            <summary>
            The Services Framework introduces a higher-level API for implementing services with NATS.
            Services automatically contain Ping, Info and Stats responders.
            Services have one or more service endpoints. <see cref="T:NATS.Client.Service.ServiceEndpoint"/>.
            When multiple instances of a service endpoints are active they work in a queue, meaning only one listener responds to any given request.
            </summary>
        </member>
        <member name="P:NATS.Client.Service.Service.PingResponse">
            <summary>
            The pre-constructed ping response.
            </summary>
        </member>
        <member name="P:NATS.Client.Service.Service.InfoResponse">
            <summary>
            The pre-constructed info response.
            </summary>
        </member>
        <member name="M:NATS.Client.Service.Service.StartService">
            <summary>
            Start the service
            </summary>
            <returns>a task that can be held to see if another thread called stop</returns>
        </member>
        <member name="M:NATS.Client.Service.Service.Builder">
            <summary>
            Get an instance of a ServiceBuilder.
            </summary>
            <returns>the instance</returns>
        </member>
        <member name="M:NATS.Client.Service.Service.Stop">
            <summary>
            Stop the service by draining.
            </summary>
        </member>
        <member name="M:NATS.Client.Service.Service.Stop(System.Exception)">
            <summary>
            Stop the service by draining. Mark the task that was received from the start method that the service had an exception.
            </summary>
            <param name="e">the error cause</param>
        </member>
        <member name="M:NATS.Client.Service.Service.Stop(System.Boolean)">
            <summary>
            Stop the service, optionally draining.
            </summary>
            <param name="drain">the flag indicating to drain or not</param>
        </member>
        <member name="M:NATS.Client.Service.Service.Stop(System.Boolean,System.Exception)">
            <summary>
            Stop the service, optionally draining and optionally with an error cause
            </summary>
            <param name="drain">the flag indicating to drain or not</param>
            <param name="e">the optional error cause. If supplied, mark the task that was received from the start method that the service had an exception.</param>
        </member>
        <member name="P:NATS.Client.Service.Service.Id">
            <value>The id of the service</value>
        </member>
        <member name="P:NATS.Client.Service.Service.Name">
            <value>The name of the service</value>
        </member>
        <member name="P:NATS.Client.Service.Service.Version">
            <value>The version of the service</value>
        </member>
        <member name="P:NATS.Client.Service.Service.Description">
            <value>The description of the service</value>
        </member>
        <member name="M:NATS.Client.Service.Service.GetStatsResponse">
            <summary>
            Get the up-to-date stats response which contains a list of all <see cref="T:NATS.Client.Service.EndpointStats"/>
            </summary>
            <returns>the stats response</returns>
        </member>
        <member name="M:NATS.Client.Service.Service.GetEndpointStats(System.String)">
            <summary>
            Get the up-to-date <see cref="T:NATS.Client.Service.EndpointStats"/> for a specific endpoint
            </summary>
            <param name="endpointName">the endpoint name</param>
            <returns>the EndpointStats or null if the name is not found</returns>
        </member>
        <member name="T:NATS.Client.Service.ServiceBuilder">
            <summary>
            Build a service using a fluent builder. Use Service.Builder() to get an instance or <c>new ServiceBuilder()</c>
            </summary>
        </member>
        <member name="M:NATS.Client.Service.ServiceBuilder.WithConnection(NATS.Client.IConnection)">
            <summary>
            The connection the service runs on
            </summary>
            <param name="conn">connection</param>
            <returns>the ServiceBuilder</returns>
        </member>
        <member name="M:NATS.Client.Service.ServiceBuilder.WithName(System.String)">
            <summary>
            The simple name of the service
            </summary>
            <param name="name">the name</param>
            <returns>the ServiceBuilder</returns>
        </member>
        <member name="M:NATS.Client.Service.ServiceBuilder.WithDescription(System.String)">
            <summary>
            The simple description of the service
            </summary>
            <param name="description">the description</param>
            <returns>the ServiceBuilder</returns>
        </member>
        <member name="M:NATS.Client.Service.ServiceBuilder.WithVersion(System.String)">
            <summary>
            The simple version of the service.
            </summary>
            <param name="version">the version</param>
            <returns>the ServiceBuilder</returns>
        </member>
        <member name="M:NATS.Client.Service.ServiceBuilder.WithMetadata(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Any meta information about this service
            </summary>
            <param name="metadata">the meta</param>
            <returns>the ServiceBuilder</returns>
        </member>
        <member name="M:NATS.Client.Service.ServiceBuilder.AddServiceEndpoint(NATS.Client.Service.ServiceEndpoint)">
            <summary>
            Add a service endpoint into the service. There can only be one instance of an endpoint by name
            </summary>
            <param name="serviceEndpoint">the endpoint</param>
            <returns>the ServiceBuilder</returns>
        </member>
        <member name="M:NATS.Client.Service.ServiceBuilder.WithDrainTimeoutMillis(System.Int32)">
            <summary>
            The timeout when stopping a service. Defaults to 5000 milliseconds
            </summary>
            <param name="drainTimeoutMillis">the drain timeout in milliseconds</param>
            <returns>the ServiceBuilder</returns>
        </member>
        <member name="M:NATS.Client.Service.ServiceBuilder.Build">
            <summary>
            Build the Service instance
            </summary>
            <returns>the Service instance</returns>
        </member>
        <member name="T:NATS.Client.Service.ServiceEndpoint">
            <summary>
            The ServiceEndpoint represents the working <see cref="P:NATS.Client.Service.ServiceEndpoint.Endpoint"/>
            <list type="bullet">
            <item>
            <description>It allows the endpoint to be grouped.</description>
            </item>
            <item>
            <description>It is where you can define the handler that will respond to incoming requests</description>
            </item>
            <item>
            <description>It allows you to define it's dispatcher if desired giving granularity to threads running subscribers</description>
            </item>
            <item>
            <description>It gives you a hook to provide custom data for the <see cref="T:NATS.Client.Service.EndpointStats"/></description>
            </item>
            </list>
            <para>To create a ServiceEndpoint, use the ServiceEndpoint static method <c>builder()</c> or <c>new ServiceEndpoint.Builder() to get an instance.</c></para>
            </summary>
        </member>
        <member name="P:NATS.Client.Service.ServiceEndpoint.Name">
            <value>The name of the <see cref="P:NATS.Client.Service.ServiceEndpoint.Endpoint"/></value>
        </member>
        <member name="P:NATS.Client.Service.ServiceEndpoint.Subject">
            <value>The subject of the ServiceEndpoint which takes into account the group path and the <see cref="P:NATS.Client.Service.ServiceEndpoint.Endpoint"/> subject</value>
        </member>
        <member name="P:NATS.Client.Service.ServiceEndpoint.QueueGroup">
            <value>The queue group for the ServiceEndpoint</value>
        </member>
        <member name="P:NATS.Client.Service.ServiceEndpoint.Metadata">
            <value>A copy of the metadata of the <see cref="P:NATS.Client.Service.ServiceEndpoint.Endpoint"/></value>
        </member>
        <member name="P:NATS.Client.Service.ServiceEndpoint.GroupName">
            <value>The <see cref="P:NATS.Client.Service.ServiceEndpoint.Group"/> name for this ServiceEndpoint, or null if there is no group</value>
        </member>
        <member name="M:NATS.Client.Service.ServiceEndpoint.Builder">
            <summary>
            Get an instance of a ServiceEndpointBuilder.
            </summary>
            <returns>the instance</returns>
        </member>
        <member name="T:NATS.Client.Service.ServiceEndpoint.ServiceEndpointBuilder">
            <summary>
            Build a ServiceEndpoint using a fluent builder.
            </summary>
        </member>
        <member name="M:NATS.Client.Service.ServiceEndpoint.ServiceEndpointBuilder.WithGroup(NATS.Client.Service.Group)">
            <summary>
            Set the <see cref="F:NATS.Client.Service.ServiceEndpoint.ServiceEndpointBuilder.Group"/> for this ServiceEndpoint
            </summary>
            <param name="group">The group</param>
            <returns>the ServiceEndpointBuilder</returns>
        </member>
        <member name="M:NATS.Client.Service.ServiceEndpoint.ServiceEndpointBuilder.WithEndpoint(NATS.Client.Service.Endpoint)">
            <summary>
            Set the <see cref="P:NATS.Client.Service.ServiceEndpoint.Endpoint"/> for this ServiceEndpoint replacing all existing endpoint information.
            </summary>
            <param name="endpoint"></param>
            <returns>the ServiceEndpointBuilder</returns>
        </member>
        <member name="M:NATS.Client.Service.ServiceEndpoint.ServiceEndpointBuilder.WithEndpointName(System.String)">
            <summary>
            Set the name for the <see cref="P:NATS.Client.Service.ServiceEndpoint.Endpoint"/> for this ServiceEndpoint replacing any name already set.
            </summary>
            <param name="name"></param>
            <returns>the ServiceEndpointBuilder</returns>
        </member>
        <member name="M:NATS.Client.Service.ServiceEndpoint.ServiceEndpointBuilder.WithEndpointSubject(System.String)">
            <summary>
            Set the subject for the <see cref="P:NATS.Client.Service.ServiceEndpoint.Endpoint"/> for this ServiceEndpoint replacing any subject already set.
            </summary>
            <param name="subject"></param>
            <returns>the ServiceEndpointBuilder</returns>
        </member>
        <member name="M:NATS.Client.Service.ServiceEndpoint.ServiceEndpointBuilder.WithEndpointQueueGroup(System.String)">
            <summary>
            Set the queue group for the <see cref="P:NATS.Client.Service.ServiceEndpoint.Endpoint"/> for this ServiceEndpoint replacing any queue group already set.
            </summary>
            <param name="queueGroup"></param>
            <returns>the ServiceEndpointBuilder</returns>
        </member>
        <member name="M:NATS.Client.Service.ServiceEndpoint.ServiceEndpointBuilder.WithEndpointMetadata(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Set the metadata for the <see cref="P:NATS.Client.Service.ServiceEndpoint.Endpoint"/> for this ServiceEndpoint replacing any metadata already set.
            </summary>
            <param name="metadata">the metadata</param>
            <returns>the ServiceEndpointBuilder</returns>
        </member>
        <member name="M:NATS.Client.Service.ServiceEndpoint.ServiceEndpointBuilder.WithHandler(System.EventHandler{NATS.Client.Service.ServiceMsgHandlerEventArgs})">
            <summary>
            Set the Service Message Handler for this ServiceEndpoint
            </summary>
            <param name="handler"></param>
            <returns>the ServiceEndpointBuilder</returns>
        </member>
        <member name="M:NATS.Client.Service.ServiceEndpoint.ServiceEndpointBuilder.WithStatsDataSupplier(System.Func{NATS.Client.Internals.SimpleJSON.JSONNode})">
            <summary>
            Set the <see cref="T:NATS.Client.Service.EndpointStats"/> data supplier for this ServiceEndpoint
            </summary>
            <param name="statsDataSupplier">the data supplier</param>
            <returns>the ServiceEndpointBuilder</returns>
        </member>
        <member name="M:NATS.Client.Service.ServiceEndpoint.ServiceEndpointBuilder.Build">
            <summary>
            Build the ServiceEndpoint instance.
            </summary>
            <returns>the ServiceEndpoint instance</returns>
        </member>
        <member name="T:NATS.Client.Service.ServiceException">
            <summary>
            Exception specific to Service
            </summary>
        </member>
        <member name="P:NATS.Client.Service.ServiceException.Code">
            <value>The exception code</value>
        </member>
        <member name="T:NATS.Client.Service.ServiceMsg">
            <summary>
            Service Message is service specific object that exposes the service relevant parts of a NATS Message.
            </summary>
        </member>
        <member name="F:NATS.Client.Service.ServiceMsg.NatsServiceError">
            <summary>
            Standard header name used to report the text of an error
            </summary>
        </member>
        <member name="F:NATS.Client.Service.ServiceMsg.NatsServiceErrorCode">
            <summary>
            Standard header name used to report the code of an error
            </summary>
        </member>
        <member name="P:NATS.Client.Service.ServiceMsg.Subject">
            <value>The subject that this message was sent to.</value>
        </member>
        <member name="P:NATS.Client.Service.ServiceMsg.Reply">
            <value>The subject the application is expected to send a reply message on.</value>
        </member>
        <member name="P:NATS.Client.Service.ServiceMsg.HasHeaders">
            <value>Whether there are headers.</value>
        </member>
        <member name="P:NATS.Client.Service.ServiceMsg.Header">
            <value>The headers object for the message.</value>
        </member>
        <member name="P:NATS.Client.Service.ServiceMsg.Data">
            <value>The data from the message.</value>
        </member>
        <member name="M:NATS.Client.Service.ServiceMsg.Respond(NATS.Client.IConnection,System.Byte[])">
            <summary>
            Respond to a service request message.
            </summary>
            <param name="conn">the NATS connection</param>
            <param name="response">the response payload in the form of a byte array </param>
        </member>
        <member name="M:NATS.Client.Service.ServiceMsg.Respond(NATS.Client.IConnection,System.String)">
            <summary>
            Respond to a service request message.
            </summary>
            <param name="conn">the NATS connection</param>
            <param name="response">the response payload in the form of a string</param>
        </member>
        <member name="M:NATS.Client.Service.ServiceMsg.Respond(NATS.Client.IConnection,NATS.Client.JetStream.JsonSerializable)">
            <summary>
            Respond to a service request message.
            </summary>
            <param name="conn">the NATS connection</param>
            <param name="response">the response payload in the form of a <see cref="T:NATS.Client.JetStream.JsonSerializable"/> object</param>
        </member>
        <member name="M:NATS.Client.Service.ServiceMsg.Respond(NATS.Client.IConnection,NATS.Client.Internals.SimpleJSON.JSONNode)">
            <summary>
            Respond to a service request message.
            </summary>
            <param name="conn">the NATS connection</param>
            <param name="response">the response payload in the form of a <see cref="T:NATS.Client.Internals.SimpleJSON.JSONNode"/> object</param>
        </member>
        <member name="M:NATS.Client.Service.ServiceMsg.Respond(NATS.Client.IConnection,System.Byte[],NATS.Client.MsgHeader)">
            <summary>
            Respond to a service request message with a response and custom headers.
            </summary>
            <param name="conn">the NATS connection</param>
            <param name="response">the response payload in the form of a byte array</param>
            <param name="headers">the custom headers</param>
        </member>
        <member name="M:NATS.Client.Service.ServiceMsg.Respond(NATS.Client.IConnection,System.String,NATS.Client.MsgHeader)">
            <summary>
            Respond to a service request message with a response and custom headers.
            </summary>
            <param name="conn">the NATS connection</param>
            <param name="response">the response payload in the form of a string</param>
            <param name="headers">the custom headers</param>
        </member>
        <member name="M:NATS.Client.Service.ServiceMsg.Respond(NATS.Client.IConnection,NATS.Client.JetStream.JsonSerializable,NATS.Client.MsgHeader)">
            <summary>
            Respond to a service request message.
            </summary>
            <param name="conn">the NATS connection</param>
            <param name="response">the response payload in the form of a <see cref="T:NATS.Client.JetStream.JsonSerializable"/> object</param>
            <param name="headers">the custom headers</param>
        </member>
        <member name="M:NATS.Client.Service.ServiceMsg.Respond(NATS.Client.IConnection,NATS.Client.Internals.SimpleJSON.JSONNode,NATS.Client.MsgHeader)">
            <summary>
            Respond to a service request message.
            </summary>
            <param name="conn">the NATS connection</param>
            <param name="response">the response payload in the form of a <see cref="T:NATS.Client.Internals.SimpleJSON.JSONNode"/> object</param>
            <param name="headers">the custom headers</param>
        </member>
        <member name="M:NATS.Client.Service.ServiceMsg.RespondStandardError(NATS.Client.IConnection,System.String,System.Int32)">
            <summary>
            Respond to a service request message with a standard error.
            </summary>
            <param name="conn">the NATS connection</param>
            <param name="errorText">the error message text</param>
            <param name="errorCode">the error message code</param>
        </member>
        <member name="T:NATS.Client.Service.ServiceMsgHandlerEventArgs">
            <summary>
            Event handler used to receive service request message.
            </summary>
        </member>
        <member name="T:NATS.Client.Service.ServiceResponse">
            <summary>
            Base class for service responses Info, Ping and Stats
            </summary>
        </member>
        <member name="P:NATS.Client.Service.ServiceResponse.Type">
            <value>The type of this response</value>
        </member>
        <member name="P:NATS.Client.Service.ServiceResponse.Id">
            <value>The unique ID of the service</value>
        </member>
        <member name="P:NATS.Client.Service.ServiceResponse.Name">
            <value>The name of the service</value>
        </member>
        <member name="P:NATS.Client.Service.ServiceResponse.Version">
            <value>The version of the service</value>
        </member>
        <member name="P:NATS.Client.Service.ServiceResponse.Metadata">
            <value>A copy of the metadata for the service, or null if there is no metadata</value>
        </member>
        <member name="T:NATS.Client.Service.StatsResponse">
            <summary>
            Stats response class forms the stats json payload, for example:
            <code>
            {
            "id": "ZP1oVevzLGu4CBORMXKKke",
            "name": "Service1",
            "version": "0.0.1",
            "endpoints": [{
                "name": "SortEndpointAscending",
                "subject": "sort.ascending",
                "num_requests": 1,
                "processing_time": 538900,
                "average_processing_time": 538900,
                "started": "2023-08-15T13:51:41.318000000Z"
            }, {
                "name": "SortEndpointDescending",
                "subject": "sort.descending",
                "num_requests": 1,
                "processing_time": 88400,
                "average_processing_time": 88400,
                "started": "2023-08-15T13:51:41.318000000Z"
            }, {
                "name": "EchoEndpoint",
                "subject": "echo",
                "num_requests": 5,
                "processing_time": 1931600,
                "average_processing_time": 386320,
                "data": {
                     "idata": 2,
                     "sdata": "s-996409223"
                },
                "started": "2023-08-15T13:51:41.318000000Z"
            }],
            "started": "2023-08-15T13:51:41.319000000Z",
            "type": "io.nats.micro.v1.stats_response"
            }
            </code>
            </summary>
        </member>
        <member name="P:NATS.Client.Service.StatsResponse.Started">
            <value>The time the endpoint was started (or restarted)</value>
        </member>
        <member name="P:NATS.Client.Service.StatsResponse.EndpointStatsList">
            <value>Get the list of <see cref="T:NATS.Client.Service.EndpointStats"/></value>
        </member>
        <member name="M:NATS.Client.IServerProvider.Setup(NATS.Client.Options)">
            <summary>
            Setup your provider 
            </summary>
            <param name="opts"></param>
        </member>
        <member name="T:NATS.Client.Statistics">
            <summary>
            Tracks various statistics received and sent on an <see cref="T:NATS.Client.IConnection"/>.
            </summary>
        </member>
        <member name="P:NATS.Client.Statistics.InMsgs">
            <summary>
            Gets the number of inbound messages received.
            </summary>
        </member>
        <member name="P:NATS.Client.Statistics.OutMsgs">
            <summary>
            Gets the number of messages sent.
            </summary>
        </member>
        <member name="P:NATS.Client.Statistics.InBytes">
            <summary>
            Gets the number of incoming bytes.
            </summary>
        </member>
        <member name="P:NATS.Client.Statistics.OutBytes">
            <summary>
            Gets the outgoing number of bytes.
            </summary>
        </member>
        <member name="P:NATS.Client.Statistics.Reconnects">
            <summary>
            Gets the number of reconnections.
            </summary>
        </member>
        <member name="T:NATS.Client.StringUserJWTHandler">
            <summary>
            TODO
            </summary>
        </member>
        <member name="P:NATS.Client.StringUserJWTHandler.UserJwt">
            <summary>
            Gets the JWT file.
            </summary>
        </member>
        <member name="P:NATS.Client.StringUserJWTHandler.NkeySeed">
            <summary>
            Gets the credentials files.
            </summary>
        </member>
        <member name="M:NATS.Client.StringUserJWTHandler.#ctor(System.String)">
            <summary>
            Creates a static user jwt handler.
            </summary>
            <param name="credentialsText">The text containing the "-----BEGIN NATS USER JWT-----" block
            and the text containing the "-----BEGIN USER NKEY SEED-----" block</param>
        </member>
        <member name="M:NATS.Client.StringUserJWTHandler.#ctor(System.String,System.String)">
            <summary>
            Creates a static user jwt handler.
            </summary>
            <param name="userJwt">The text containing the "-----BEGIN NATS USER JWT-----" block</param>
            <param name="nkeySeed">The text containing the "-----BEGIN USER NKEY SEED-----" block or the seed begining with "SU".
            May be the same as the jwt string if they are chained.</param>
        </member>
        <member name="M:NATS.Client.StringUserJWTHandler.DefaultUserJWTEventHandler(System.Object,NATS.Client.UserJWTEventArgs)">
            <summary>
            The default User JWT Event Handler.
            </summary>
            <param name="sender">Usually the connection.</param>
            <param name="args">Arguments</param>
        </member>
        <member name="M:NATS.Client.StringUserJWTHandler.SignNonce(NATS.Client.UserSignatureEventArgs)">
            <summary>
            Utility method to signs the UserSignatureEventArgs server nonce from 
            a private credentials file.
            </summary>
            <param name="args">Arguments</param>
        </member>
        <member name="M:NATS.Client.StringUserJWTHandler.DefaultUserSignatureHandler(System.Object,NATS.Client.UserSignatureEventArgs)">
            <summary>
            The default User Signature event handler.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:NATS.Client.Subscription">
            <summary>
            Represents interest in a NATS topic. This class should
            not be used directly.
            </summary>
        </member>
        <member name="P:NATS.Client.Subscription.Sid">
            <summary>
            the id associated with the subscription, used by the connection when processing an incoming
            </summary>
        </member>
        <member name="P:NATS.Client.Subscription.Subject">
            <summary>
            Gets the subject for this subscription.
            </summary>
        </member>
        <member name="P:NATS.Client.Subscription.Queue">
            <summary>
            Gets the optional queue group name.
            </summary>
            <remarks>
            If present, all subscriptions with the same name will form a distributed queue, and each message will only
            be processed by one member of the group.
            </remarks>
        </member>
        <member name="P:NATS.Client.Subscription.Connection">
            <summary>
            Gets the <see cref="P:NATS.Client.Subscription.Connection"/> associated with this instance.
            </summary>
        </member>
        <member name="M:NATS.Client.Subscription.processMsg(NATS.Client.Msg)">
            <summary>
            Called by <see cref="T:NATS.Client.Connection"/> when a <see cref="T:NATS.Client.Msg"/> is received, returning
            a value indicating if the <see cref="T:NATS.Client.Connection"/> should keep the subscription
            after processing.
            </summary>
            <param name="msg">A <see cref="T:NATS.Client.Msg"/> received by the <see cref="T:NATS.Client.Subscription"/>.</param>
            <returns><c>true</c> if-and-only-if the <see cref="T:NATS.Client.Subscription"/> should remain active;
            otherwise <c>false</c> if the <see cref="T:NATS.Client.Connection"/> should remove this
            instance.</returns>
        </member>
        <member name="M:NATS.Client.Subscription.tallyDeliveredMessage(NATS.Client.Msg)">
            <summary>
            Implementors should call this method when <paramref name="msg"/> has been
            delivered to an <see cref="T:NATS.Client.ISubscription"/>.
            </summary>
            <remarks>Caller must lock on <see cref="F:NATS.Client.Subscription.mu"/>.</remarks>
            <param name="msg">The <see cref="T:NATS.Client.Msg"/> object delivered to a
            <see cref="T:NATS.Client.ISubscription"/>.</param>
            <returns>The total number of delivered messages.</returns>
        </member>
        <member name="P:NATS.Client.Subscription.IsValid">
            <summary>
            Gets a value indicating whether or not the <see cref="T:NATS.Client.Subscription"/> is still valid.
            </summary>
        </member>
        <member name="M:NATS.Client.Subscription.Unsubscribe">
            <summary>
            Removes interest in the <see cref="P:NATS.Client.Subscription.Subject"/>.
            </summary>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException">There is no longer an associated <see cref="P:NATS.Client.Subscription.Connection"/></exception>
            <exception cref="T:NATS.Client.NATSConnectionDrainingException">The <see cref="P:NATS.Client.Subscription.Connection"/> is draining.
            for this <see cref="T:NATS.Client.ISubscription"/>.</exception>
        </member>
        <member name="M:NATS.Client.Subscription.AutoUnsubscribe(System.Int32)">
            <summary>
            Issues an automatic call to <see cref="M:NATS.Client.Subscription.Unsubscribe"/> when <paramref name="max"/> messages have been
            received.
            </summary>
            <remarks>This can be useful when sending a request to an unknown number of subscribers.
            <see cref="P:NATS.Client.Subscription.Connection"/>'s Request methods use this functionality.</remarks>
            <param name="max">The maximum number of messages to receive on the subscription before calling
            <see cref="M:NATS.Client.Subscription.Unsubscribe"/>. Values less than or equal to zero (<c>0</c>) unsubscribe immediately.</param>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException">There is no longer an associated <see cref="P:NATS.Client.Subscription.Connection"/>
            for this <see cref="T:NATS.Client.ISubscription"/>.</exception>
        </member>
        <member name="P:NATS.Client.Subscription.QueuedMessageCount">
            <summary>
            Gets the number of messages remaining in the delivery queue.
            </summary>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException">There is no longer an associated <see cref="P:NATS.Client.Subscription.Connection"/>
            for this <see cref="T:NATS.Client.ISubscription"/>.</exception>
        </member>
        <member name="M:NATS.Client.Subscription.Dispose(System.Boolean)">
            <summary>
            Unsubscribes the subscription and optionally releases the managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed
            and unmanaged resources; <c>false</c> to release only unmanaged 
            resources.</param>
        </member>
        <member name="M:NATS.Client.Subscription.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:NATS.Client.Subscription"/>.
            </summary>
            <remarks>This method unsubscribes from the subject, to release resources.</remarks>
        </member>
        <member name="M:NATS.Client.Subscription.ToString">
            <summary>
            Returns a string that represents the current instance.
            </summary>
            <returns>A string that represents the current <see cref="T:NATS.Client.Subscription"/>.</returns>
        </member>
        <member name="M:NATS.Client.Subscription.SetPendingLimits(System.Int64,System.Int64)">
            <summary>
            Sets the limits for pending messages and bytes for this instance.
            Any value less than or equal to zero means unlimited and will be stored as -1.
            </summary>
            <param name="messageLimit">The maximum number of pending messages.</param>
            <param name="bytesLimit">The maximum number of pending bytes of payload.</param>
        </member>
        <member name="P:NATS.Client.Subscription.PendingByteLimit">
            <summary>
            Gets or sets the maximum allowed count of pending bytes.
            </summary>
            <value>The pending byte limit if greater than 0 or -1 for unlimited.</value>
        </member>
        <member name="P:NATS.Client.Subscription.PendingMessageLimit">
            <summary>
            Gets or sets the maximum allowed count of pending messages.
            </summary>
            <value>The pending message limit if greater than 0 or -1 for unlimited.</value>
        </member>
        <member name="M:NATS.Client.Subscription.GetPending(System.Int64@,System.Int64@)">
            <summary>
            Returns the yet processed pending byte and message counts.
            </summary>
            <param name="pendingBytes">When this method returns, <paramref name="pendingBytes"/> will
            contain the count of bytes not yet processed on the <see cref="T:NATS.Client.ISubscription"/>.</param>
            <param name="pendingMessages">When this method returns, <paramref name="pendingMessages"/> will
            contain the count of messages not yet processed on the <see cref="T:NATS.Client.ISubscription"/>.</param>
        </member>
        <member name="P:NATS.Client.Subscription.PendingBytes">
            <summary>
            Gets the number of bytes not yet processed on this instance.
            </summary>
        </member>
        <member name="P:NATS.Client.Subscription.PendingMessages">
            <summary>
            Gets the number of messages not yet processed on this instance.
            </summary>
        </member>
        <member name="M:NATS.Client.Subscription.GetMaxPending(System.Int64@,System.Int64@)">
            <summary>
            Returns the maximum number of pending bytes and messages during the life of the <see cref="T:NATS.Client.Subscription"/>.
            </summary>
            <param name="maxPendingBytes">When this method returns, <paramref name="maxPendingBytes"/>
            will contain the current maximum pending bytes.</param>
            <param name="maxPendingMessages">When this method returns, <paramref name="maxPendingBytes"/>
            will contain the current maximum pending messages.</param>
        </member>
        <member name="P:NATS.Client.Subscription.MaxPendingBytes">
            <summary>
            Gets the maximum number of pending bytes seen so far by this instance.
            </summary>
        </member>
        <member name="P:NATS.Client.Subscription.MaxPendingMessages">
            <summary>
            Gets the maximum number of messages seen so far by this instance.
            </summary>
        </member>
        <member name="M:NATS.Client.Subscription.ClearMaxPending">
            <summary>
            Clears the maximum pending bytes and messages statistics.
            </summary>
        </member>
        <member name="P:NATS.Client.Subscription.Delivered">
            <summary>
            Gets the number of delivered messages for this instance.
            </summary>
        </member>
        <member name="P:NATS.Client.Subscription.Dropped">
            <summary>
            Gets the number of known dropped messages for this instance.
            </summary>
            <remarks>
            This will correspond to the messages dropped by violations of
            <see cref="P:NATS.Client.Subscription.PendingByteLimit"/> and/or <see cref="P:NATS.Client.Subscription.PendingMessageLimit"/>.
            If the NATS server declares the connection a slow consumer, the count
            may not be accurate.
            </remarks>
        </member>
        <member name="M:NATS.Client.Subscription.IsValidSubject(System.String)">
            <summary>
            Checks if a subject is valid.
            </summary>
            <param name="subject">The subject to check</param>
            <returns>true if valid, false otherwise.</returns>
        </member>
        <member name="M:NATS.Client.Subscription.IsValidPrefix(System.String)">
            <summary>
            Checks if a prefix is valid.
            </summary>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:NATS.Client.Subscription.IsValidQueueGroupName(System.String)">
            <summary>
            Checks if the queue group name is valid.
            </summary>
            <param name="queueGroup"></param>
            <returns>true is the queue group name is valid, false otherwise.</returns>
        </member>
        <member name="T:NATS.Client.SyncSubscription">
            <summary>
            <see cref="T:NATS.Client.SyncSubscription"/> provides messages for a subject through calls
            to <see cref="M:NATS.Client.SyncSubscription.NextMessage"/> and <see cref="M:NATS.Client.SyncSubscription.NextMessage(System.Int32)"/>. This class should
            not be used directly.
            </summary>
        </member>
        <member name="M:NATS.Client.SyncSubscription.NextMessage">
            <summary>
            Returns the next <see cref="T:NATS.Client.Msg"/> available to a synchronous
            subscriber, blocking until one is available.
            </summary>
            <returns>The next <see cref="T:NATS.Client.Msg"/> available to a subscriber.</returns>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The connection to the NATS Server
            is closed.</exception>
            <exception cref="T:NATS.Client.NATSMaxMessagesException">The maximum number of messages have been
            delivered to this <see cref="T:NATS.Client.ISyncSubscription"/>.</exception>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException">The subscription is closed.</exception>
            <exception cref="T:NATS.Client.NATSSlowConsumerException">The subscription has been marked as a slow consumer.</exception>
        </member>
        <member name="M:NATS.Client.SyncSubscription.NextMessage(System.Int32)">
            <summary>
            Returns the next <see cref="T:NATS.Client.Msg"/> available to a synchronous
            subscriber, or block up to a given timeout until the next one is available.
            </summary>
            <param name="timeout">The amount of time, in milliseconds, to wait for
            the next message.</param>
            <returns>The next <see cref="T:NATS.Client.Msg"/> available to a subscriber.</returns>
            <exception cref="T:NATS.Client.NATSConnectionClosedException">The connection to the NATS Server
            is closed.</exception>
            <exception cref="T:NATS.Client.NATSMaxMessagesException">The maximum number of messages have been
            delivered to this <see cref="T:NATS.Client.ISyncSubscription"/>.</exception>
            <exception cref="T:NATS.Client.NATSBadSubscriptionException">The subscription is closed.</exception>
            <exception cref="T:NATS.Client.NATSSlowConsumerException">The subscription has been marked as a slow consumer.</exception>
            <exception cref="T:NATS.Client.NATSTimeoutException">A timeout occurred while waiting for the next available
            <see cref="T:NATS.Client.Msg"/>.</exception>
        </member>
    </members>
</doc>
